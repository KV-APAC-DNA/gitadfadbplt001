{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"adfadbplt001lssnfkpltdnaload002": {
			"type": "string"
		},
		"adfadbplt001lsdbtclouddnacore": {
			"type": "string"
		},
		"adfadbplt001lsdlsadbplt001": {
			"type": "string"
		},
		"adfadbplt001lssnfkpltdnacore002": {
			"type": "string"
		},
		"adfadbplt001lsawswdvsgpw0006": {
			"type": "string"
		},
		"adfadbplt001lsdlsadbplt001_blob": {
			"type": "string"
		},
		"adfadbplt001lspltbitabap": {
			"type": "string"
		},
		"adfadbplt001lsmftappvkenvuecomjpdcl": {
			"type": "string"
		},
		"adfadbplt001lsmarketingcloudopsjpndcl": {
			"type": "string"
		},
		"adfadbplt001lsiqviaaus": {
			"type": "string"
		},
		"adfadbplt001lsperensoaus": {
			"type": "string"
		},
		"adfadbplt001lsexacttargettha": {
			"type": "string"
		},
		"adfadbplt001lsmarketingcloudopstha": {
			"type": "string"
		},
		"adfadbplt001lsthepopcompanycom": {
			"type": "string"
		},
		"adfadbplt001lsawswfgsgpw0002": {
			"type": "string"
		},
		"adfadbplt001lsawsbtasgpw0000": {
			"type": "string"
		},
		"adfadbplt001lsdlsadbplt001_ir001": {
			"type": "string"
		},
		"adfadbplt001lsawswfqsgpw0003": {
			"type": "string"
		},
		"adfadbplt001lsdmsindprd001": {
			"type": "string"
		},
		"adfadbplt001lsawsbmntkyl001y": {
			"type": "string"
		},
		"adfadbplt001lssfhcpveevaind002": {
			"type": "string"
		},
		"adfadbplt001lsarsprdcon360": {
			"type": "string"
		},
		"adfadbplt001lsvmcitsapl002fjx2com": {
			"type": "string"
		},
		"adfadbplt001lsvawsbtcsgpl0005kenvuecom": {
			"type": "string"
		},
		"adfadbplt001lsazrwbudbxprod": {
			"type": "string"
		},
		"adfadbplt001lsemartkor": {
			"type": "string"
		},
		"adfadbdev001smssqltpm001": {
			"type": "string"
		},
		"adfadbdev001lsardsbpanorama001": {
			"type": "string"
		},
		"adfadbplt001lsarsprdcon360002": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "read running status",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "job",
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "category",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": {
										"value": "SELECT AUDIT_LOG_ID ,PROCESS_STATUS FROM \nMETA_RAW.PROCESS_AUDIT_LOG \nWHERE JOB_NAME = '@{pipeline().Pipeline}' \nAND CATEGORY = '@{pipeline().parameters.category}' \nAND DATEDIFF(s, to_timestamp(moment), CONVERT_TIMEZONE( 'Asia/Singapore' , CURRENT_TIMESTAMP())) < 43200 \nQUALIFY ROW_NUMBER() OVER(ORDER BY AUDIT_LOG_ID DESC) =1;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "check running status",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "read running status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(if(equals(activity('read running status').output.resultSetCount,0),true,\n    not(equals(toUpper(activity('read running status').output.resultSets[0].rows[0].process_status),'START'))),\n    pipeline().parameters.force_rerun\n    )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "fail",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@concat(pipeline().Pipeline, ' is already running for ' , pipeline().parameters.category,\n', If that is of an obsolete status, please trigger the pipeling with force_rerun =  true.')",
											"type": "Expression"
										},
										"errorCode": "1000"
									}
								}
							]
						}
					},
					{
						"name": "audit fail on for loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each usecase",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().GroupId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": 0,
								"group_id": 0
							}
						}
					},
					{
						"name": "read usecases",
						"description": "Get distinct use case sequence id's",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT\n    USECASE.SEQUENCE_ID AS USECASE_SEQUENCE_ID\nFROM META_RAW.USECASE\nWHERE UPPER(CATEGORY) = '@{toUpper(pipeline().parameters.category)}'\n    AND USECASE.IS_ACTIVE = TRUE\nORDER BY USECASE.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for each usecase",
						"description": "Runs for each usecase, executes the phase_master pipeline with usecase_id as parameter",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "read usecases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('read usecases').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "check phase master status",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isphasemasterfailed')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "run usecase master",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "usecase_master",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"usecase_sequence_id": {
															"value": "@item().usecase_sequence_id",
															"type": "Expression"
														},
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set to failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "run usecase master",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isphasemasterfailed",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "read usecases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().GroupId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": 0,
								"group_id": 0
							}
						}
					},
					{
						"name": "eror log 2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "read usecases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('read usecases').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('read usecases').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					},
					{
						"name": "error log 1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "read running status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('read running status').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('read running status').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					},
					{
						"name": "eror log 3",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "for each usecase",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('run usecase master').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('run usecase master').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					},
					{
						"name": "check phasemaster status",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for each usecase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isphasemasterfailed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "audit success",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline().GroupId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": 0,
											"group_id": 0
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "audit fail child",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline().GroupId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": 0,
											"group_id": 0
										}
									}
								},
								{
									"name": "eror log 4",
									"type": "ExecutePipeline",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('read usecases').output.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": 0,
											"error_code": {
												"value": "@activity('read usecases').output.errorCode",
												"type": "Expression"
											},
											"job_id": 0
										}
									}
								},
								{
									"name": "fail this pipeline",
									"type": "Fail",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "eror log 4",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "audit fail child",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Phase master failed for @{pipeline().parameters.category}",
											"type": "Expression"
										},
										"errorCode": "1005"
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "repeat_until_no_dependents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().GroupId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": 0,
								"group_id": 0
							}
						}
					},
					{
						"name": "repeat_until_no_dependents",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "check running status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(toUpper(variables('deps_status')),'WAIT'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "check_dependent_status",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "check_for_depenedents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(greater(indexOf(variables('deps_status'),'STOP:'),0) ,'STOP',\nif(greater(indexOf(variables('deps_status'),'FAIL:'),0) ,'FAIL',\nif(greater(indexOf(variables('deps_status'),'WAIT:'),0),'WAIT',\nif(greater(indexOf(variables('deps_status'),'NOTIFY:'),0),'NOTIFY',\nif(greater(indexOf(toUpper(variables('deps_status')),'ERROR:'),0),'ERROR',\n'PROCEED')))))",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "WAIT",
												"activities": [
													{
														"name": "Wait_for_dependents",
														"type": "Wait",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"waitTimeInSeconds": 120
														}
													},
													{
														"name": "reset_to_wait",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Wait_for_dependents",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "deps_status",
															"value": "WAIT"
														}
													}
												]
											},
											{
												"value": "STOP",
												"activities": [
													{
														"name": "Stop_Execution",
														"type": "Fail",
														"dependsOn": [
															{
																"activity": "stop execution notification",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"message": {
																"value": "One or more of the dependent processes has not run yet, please check and re-run when completed, @{variables('deps_status')}. If you want to ignore the dependent processes, re-run with ignore_deps as True",
																"type": "Expression"
															},
															"errorCode": "1000"
														}
													},
													{
														"name": "stop execution notification",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "NotifiyTeamsChannelPipeline",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"subscription": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
																	"type": "Expression"
																},
																"resourceGroup": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
																	"type": "Expression"
																},
																"runId": {
																	"value": "@pipeline().RunId",
																	"type": "Expression"
																},
																"name": {
																	"value": "@pipeline().Pipeline",
																	"type": "Expression"
																},
																"triggerTime": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																},
																"status": "EXECUTION STOPPED",
																"supportMessage": {
																	"value": "Issue while running this category : \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**MESSAGE**: One or more of the dependent processes has not run yet, please check and re-run when completed, @{variables('deps_status')}. If you want to ignore the dependent processes, re-run with ignore_deps as True",
																	"type": "Expression"
																},
																"isBusinessNotification": "No",
																"isSupportNotification": "Yes",
																"isError": "No"
															}
														}
													}
												]
											},
											{
												"value": "NOTIFY",
												"activities": [
													{
														"name": "notify_and_proceed",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "NotifiyTeamsChannelPipeline",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"subscription": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
																	"type": "Expression"
																},
																"resourceGroup": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
																	"type": "Expression"
																},
																"runId": {
																	"value": "@pipeline().RunId",
																	"type": "Expression"
																},
																"name": {
																	"value": "@pipeline().Pipeline",
																	"type": "Expression"
																},
																"triggerTime": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																},
																"status": "PROCEEDING WITH NOTIFICATION",
																"supportMessage": {
																	"value": "Running : \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\nCurrent run seems a second run after predecessor jobs are run, hence proceeding. However, if necessary, re-run the predecessor and run this job again.",
																	"type": "Expression"
																},
																"isBusinessNotification": "No",
																"isSupportNotification": "Yes",
																"isError": "No"
															}
														}
													}
												]
											},
											{
												"value": "FAIL",
												"activities": [
													{
														"name": "Fail_Execution",
														"type": "Fail",
														"dependsOn": [
															{
																"activity": "fail execution notification",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"message": {
																"value": "One or more of the dependent processes has failed in latest run, please re-run that process, @{variables('deps_status')}, then run this. If you want to ignore the dependent processes, re-run this process with ignore_deps as True",
																"type": "Expression"
															},
															"errorCode": "1000"
														}
													},
													{
														"name": "fail execution notification",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "NotifiyTeamsChannelPipeline",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"subscription": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
																	"type": "Expression"
																},
																"resourceGroup": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
																	"type": "Expression"
																},
																"runId": {
																	"value": "@pipeline().RunId",
																	"type": "Expression"
																},
																"name": {
																	"value": "@pipeline().Pipeline",
																	"type": "Expression"
																},
																"triggerTime": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																},
																"status": "EXECUTION FAILED",
																"supportMessage": {
																	"value": "Issue while running this category : \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**MESSAGE**: One or more of the dependent processes has failed in latest run, please re-run that process, @{variables('deps_status')}, then run this. If you want to ignore the dependent processes, re-run this process with ignore_deps as True",
																	"type": "Expression"
																},
																"isBusinessNotification": "No",
																"isSupportNotification": "Yes",
																"isError": "No"
															}
														}
													}
												]
											},
											{
												"value": "ERROR",
												"activities": [
													{
														"name": "Error_out_execution",
														"type": "Fail",
														"dependsOn": [
															{
																"activity": "error execution notification",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"message": {
																"value": "the procedure to check dependent processes has failed. Please check and fix if necessary, then re-run this. @{variables('deps_status')}",
																"type": "Expression"
															},
															"errorCode": "1000"
														}
													},
													{
														"name": "error execution notification",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "NotifiyTeamsChannelPipeline",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"subscription": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
																	"type": "Expression"
																},
																"resourceGroup": {
																	"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
																	"type": "Expression"
																},
																"runId": {
																	"value": "@pipeline().RunId",
																	"type": "Expression"
																},
																"name": {
																	"value": "@pipeline().Pipeline",
																	"type": "Expression"
																},
																"triggerTime": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																},
																"status": "TECHNICAL FAILURE",
																"supportMessage": {
																	"value": "Issue while running this category : \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**MESSAGE**: the procedure to check dependent processes has failed. Please check and fix if necessary, then re-run this. @{variables('deps_status')}",
																	"type": "Expression"
																},
																"isBusinessNotification": "No",
																"isSupportNotification": "Yes",
																"isError": "No"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "check_for_depenedents",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ignore_deps",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "check_dependent_job",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "CALL META_RAW.CHECK_DEPENDENT_JOB_STATUS (['@{pipeline().parameters.category}']);",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "set_dependent_status",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "check_dependent_job",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "deps_status",
													"value": {
														"value": "@activity('check_dependent_job').output.resultSets[0].rows[0].CHECK_DEPENDENT_JOB_STATUS",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set_dependent_status_error",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "check_dependent_job",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "deps_status",
													"value": {
														"value": "ERROR: @{activity('check_dependent_job').error?.message}",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "set_to_proceed",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "deps_status",
													"value": "PROCEED"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "read_successor_jobs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "check phasemaster status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "WITH AUDIT_LOG AS\n(\n    SELECT MAX(MOMENT) MOMENT,PROCESS_ID \n    FROM META_RAW.PROCESS_AUDIT_LOG \n    GROUP BY PROCESS_ID\n) \nSELECT \n    DEP_USECASE.CATEGORY, \n    LISTAGG(DISTINCT DEP_PROC.PROCESS_ID,',') AS SUCCESSORS\nFROM META_RAW.PROCESS DEP_PROC\nCROSS JOIN TABLE(SPLIT_TO_TABLE(NULLIF(TRIM(DEP_PROC.DEPENDS_ON),''),',')) DEP_JOBS\nJOIN META_RAW.USECASE DEP_USECASE ON DEP_PROC.USECASE_ID = DEP_USECASE.USECASE_ID\nLEFT JOIN AUDIT_LOG DEP_AUDIT ON DEP_PROC.PROCESS_ID  = DEP_AUDIT.PROCESS_ID\nJOIN META_RAW.PROCESS CUR_PROC\nON DEP_JOBS.VALUE = CUR_PROC.PROCESS_ID\nJOIN META_RAW.USECASE CUR_USECASE\nON  CUR_PROC.USECASE_ID = CUR_USECASE.USECASE_ID\nLEFT JOIN AUDIT_LOG CUR_AUDIT ON CUR_PROC.PROCESS_ID  = CUR_AUDIT.PROCESS_ID\nWHERE CUR_USECASE.CATEGORY = '@{pipeline().parameters.category}' AND DEP_AUDIT.MOMENT<CUR_AUDIT.MOMENT\nGROUP BY DEP_USECASE.CATEGORY",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "if_successors_exit",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "read_successor_jobs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('read_successor_jobs').output.count,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "notify_to_run",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "Run Dependent Categories",
											"supportMessage": {
												"value": "Running : \\n\n**CATEGORY**: @{pipeline().parameters.category} has completed. \\n\nAnd the below categories seem to be depending on this, please run them if necessary \\n\n@{activity('read_successor_jobs').output.value} \\n\n",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "No"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"force_rerun": {
						"type": "bool",
						"defaultValue": false
					},
					"ignore_deps": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"test_variable": {
						"type": "String"
					},
					"isphasemasterfailed": {
						"type": "Boolean",
						"defaultValue": false
					},
					"deps_status": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"folder": {
					"name": "Master_Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T15:01:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/usecase_master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/write_audit_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "write to audit table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "processid",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pipelineid",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "runid",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "jobname",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "message",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "status",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "incount",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "outcount",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "category",
											"type": "String",
											"value": {
												"value": "@if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "usecase_id",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "group_id",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.group_id, null),0,pipeline().parameters.group_id)",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "phase_id",
											"type": "Int32",
											"value": {
												"value": "@if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "alter session set  timezone ='Asia/Singapore';\nSET DURATION =(\nSELECT DATEDIFF(s, MOMENT, CURRENT_TIMESTAMP())\nFROM META_RAW.PROCESS_AUDIT_LOG WHERE RUN_ID='@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}');\n\nINSERT INTO META_RAW.PROCESS_AUDIT_LOG\n(\nPROCESS_ID,\nPHASE_ID,\nMOMENT,\nDURATION,\nPIPELINE_ID,\nRUN_ID,\nJOB_NAME,\nMESSAGE,\nPROCESS_STATUS,\nINPUT_ROW_COUNT,\nOUTPUT_ROW_COUNT,\nCATEGORY,\nUSECASE_ID\n)\nVALUES\n(\n@{if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)},\n@{if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)},\nCURRENT_TIMESTAMP,\n$DURATION,\n'@{if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)}',\n'@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}',\n'@{if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)}',\n'@{if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)}',\nTRIM(UPPER('@{if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)}')),\n@{if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)},\n@{if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)},\n'@{if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)}',\n@{if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)}\n);\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"parameters": {
					"process_id": {
						"type": "int"
					},
					"status": {
						"type": "string"
					},
					"input_row_count": {
						"type": "int"
					},
					"output_row_count": {
						"type": "int"
					},
					"jobname": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"runid": {
						"type": "string"
					},
					"pipeline_id": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"group_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"subscriptionid": {
						"type": "String"
					},
					"test_variable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T17:06:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mtd_process')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/write_error_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "write to error log",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "alter session set  timezone ='Asia/Singapore';\nINSERT INTO META_RAW.ERROR_LOG (\n    PROCESS_ID,\n    PHASE_ID,\n    MOMENT,\n    RUN_ID,\n    JOB_ID,\n    JOB_NAME,\n    ERROR_MESSAGE,\n    ERROR_CODE,\n    CATEGORY\n) VALUES (\n    @{pipeline().parameters.process_id},\n    @{pipeline().parameters.phase_id},\n    CURRENT_TIMESTAMP,\n    '@{pipeline().parameters.run_id}',\n    '@{pipeline().parameters.job_id}',\n    '@{pipeline().parameters.job_name}',\n    '@{replace(pipeline().parameters.error_message,'''','''''')}',\n    '@{pipeline().parameters.error_code}',\n    '@{pipeline().parameters.category}'\n);",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"parameters": {
					"process_id": {
						"type": "int"
					},
					"job_name": {
						"type": "string"
					},
					"error_message": {
						"type": "string"
					},
					"run_id": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"phase_id": {
						"type": "int"
					},
					"error_code": {
						"type": "string"
					},
					"job_id": {
						"type": "int"
					}
				},
				"variables": {
					"subscriptionid": {
						"type": "String"
					},
					"test_variable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Logging"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T15:02:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NotifiyTeamsChannelPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If support error notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set containerWebhook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(equals(pipeline().parameters.isSupportNotification, 'Yes'), equals(pipeline().parameters.isError, 'Yes')),contains(pipeline().DataFactory,'prd'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set JSON Schema support",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set supportWebhook",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "messageCardSupport",
										"value": {
											"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message​​​​\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Pipeline execution alert​​​​\",\n            \"facts\": [\n                {\n                    \"name\": \"Subscription Id:\",\n                    \"value\": \"@{pipeline().parameters.subscription}\"\n                },\n                {\n                    \"name\": \"Resource Group:\",\n                    \"value\": \"@{pipeline().parameters.resourceGroup}\"\n                },\n                {\n                    \"name\": \"Data Factory Name:\",\n                    \"value\": \"@{pipeline().DataFactory}\"\n                },\n                {\n                    \"name\": \"Pipeline RunId:\",\n                    \"value\": \"@{pipeline().parameters.runId}\"\n                },\n                {\n                    \"name\": \"Pipeline Name:\",\n                    \"value\": \"@{pipeline().parameters.name}\"\n                },\n                {\n                    \"name\": \"Pipeline Status:\",\n                    \"value\": \"@{pipeline().parameters.status}\"\n                },\n                {\n                    \"name\": \"Execution Start Time (SGT):\",\n                    \"value\": \"@{convertTimeZone(pipeline().parameters.triggerTime, 'UTC', 'Singapore Standard Time')}\"\n                },\n                {\n                    \"name\": \"Message:\",\n                    \"value\": \"@{replace(replace(replace(replace(replace(replace(pipeline().parameters.supportMessage,'\"',''),'\\n','~~'),'\\',''),'~~','\\n'),'{',''),'}','')}\"\n                },\n                {\n                    \"name\": \"Notification Time (SGT):\",\n                    \"value\": \"@{convertTimeZone(utcnow(), 'UTC', 'Singapore Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"@type\": \"OpenUri\",\n            \"name\": \"View pipeline run\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \"@{concat('https://adf.azure.com/monitoring/pipelineruns/',pipeline().parameters.runId,'?factory=%2Fsubscriptions%2F',pipeline().parameters.subscription,'%2FresourceGroups%2F',pipeline().parameters.resourceGroup,'%2Fproviders%2FMicrosoft.DataFactory%2Ffactories%2F',pipeline().DataFactory)}\"\n                }\n            ]\n        }\n    ]\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Invoke Teams Webhook URL support",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set JSON Schema support",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"url": {
											"value": "@variables('supportWebhook')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "adfiradbplt001",
											"type": "IntegrationRuntimeReference"
										},
										"body": {
											"value": "@json(variables('messageCardSupport'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set supportWebhook",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "supportWebhook",
										"value": "https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/bf4e56fb71b3420c865a543422fd5757/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2xjJSRACQGh_uvMqF306ueTCZ1FDmKGCGhgsgWtdX1501"
									}
								}
							]
						}
					},
					{
						"name": "If business error notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set containerWebhook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(equals(pipeline().parameters.isBusinessNotification, 'Yes'), equals(pipeline().parameters.isError, 'Yes')),contains(pipeline().DataFactory,'prd'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set JSON Schema business",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set business Webhook",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "messageCardBusiness",
										"value": {
											"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message​​​​\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Pipeline failure alert​​​​\",\n            \"facts\": [\n                {\n                    \"name\": \"Execution Start Time (SGT):\",\n                    \"value\": \"@{convertTimeZone(pipeline().parameters.triggerTime, 'UTC', 'Singapore Standard Time')}\"\n                },\n                {\n                    \"name\": \"Message:\",\n                    \"value\": \"@{replace(replace(replace(replace(replace(replace(pipeline().parameters.businessMessage,'\"',''),'\\n','~~'),'\\',''),'~~','\\n'),'{',''),'}','')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"@type\": \"OpenUri\",\n            \"name\": \"Download File Attachment\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \"@{if(equals(pipeline().parameters.fileUrl, null),'', pipeline().parameters.fileUrl)}\"\n                }\n            ]\n        }\n    ]\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Invoke Teams Webhook URL business",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set JSON Schema business",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"url": {
											"value": "@variables('businessWebhook')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "adfiradbplt001",
											"type": "IntegrationRuntimeReference"
										},
										"body": {
											"value": "@json(variables('messageCardBusiness'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set business Webhook",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "businessWebhook",
										"value": {
											"value": "@json(variables('container_webhook'))[pipeline().parameters.container]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set containerWebhook",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "container_webhook",
							"value": "{\n  \"ASP\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/b398da3c0a4f4850be50325f503952dc/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2dY6FOCaz_FEpRACyur2h-i_fxWeKhPimq_dvN6ssws41\",\n  \"CHN\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/f0665cb578094c46b29dddd4ea186a61/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2rLtBFZapp8Qhcp-Y0ULeTGvtzqlWz2YA1R1650YgdD01\",\n  \"HKG\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/c865a3f1b3b54b239963f836c526f5b9/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2LBRP8XOsHjQScCOwq3Mwz8xjzS508JCbMbk7ayszpL81\",\n  \"IDN\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/2c4e3136778e47dfb33b9f4fbed3b270/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2l3NXDSzU1ja3RADc8Kem0LLPzC6y5XcvK-jNOd1-NPM1\",\n  \"JPN\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/4acc75a02dd64f5888ea5c460eeddbb9/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2JWNeSMaGY15lzWIvLCo7W-FQZM9pRhmDXeNvze5iCiA1\",\n  \"KOR\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/0d47ca535bd84f288f4da3bdee466704/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2l9j3bBvSeG6CemB3TZN0SjIfA04qOQtfMgur2-K7oFI1\",\n  \"MYS\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/43078594075d4beb8fdc4ad8e20d92b7/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2qNCqjymSylIIHguaIOZPCkHmllOOGN_O6MFbcwXZu7Q1\",\n  \"PAC\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/96659321b5a8456cb052b4df4a25b893/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V29QlkngZIOtNIuFKowiGLWBceYu_2umOnU5-W-biBlVw1\",\n  \"PHL\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/d98f53834fd04e4980dd742f4cbae8d7/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2X54TW2n6kOcY94Lw3Xt8v7vTra2fcg8sPjD1pQ0gbF41\",\n  \"SGP\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/3eac90396bc04ba7ac68c4424cf864be/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2INesTsJ6YVTLu8EoX5iSHSVpYGSy_wofUz-B-YGmMhg1\",\n  \"TWN\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/a9038b026a4340fda0d131acdbb921b2/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2VEBlMJcV0NBlZpRhZZDFKEag62243HoIKhsivWKNKzs1\",\n  \"THA\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/3f9dca53b8a2497b9e489681fbaa3917/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2LIDTfEMH3oetn6wKvr0vzyCCfNu4nH_ddLKvpYPR5FI1\",\n  \"VNM\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/69b4a3a127c14c80a4f9c4fde99a97ea/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2snwNSYAaSU4AHy-rsibAeHKFCIQxt3VbPdwUwBCoEeI1\",\n  \"IND\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/bc9ecd26a4cd46c0b2ab62ee079bba6f/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2RJldfTspLbt_XH8aXYWcokT1U1fWRhjsV3W955p7ryU1\",\n \"OSE\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/08138f4921ef40fd9d6b2bad8d2c79e8/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V29jNnUB3KFNBnYs-6F2yUOCSQ_owdpkvrj2dK0iZ9ZwM1\",\n \"HCP\": \"https://kenvue.webhook.office.com/webhookb2/08067575-6f4e-4e13-a36c-bc85d41b2896@7ba64ac2-8a2b-417e-9b8f-fcf8238f2a56/IncomingWebhook/bce844f5ec5442218ec64986c3048f38/b96e6ec8-5d95-42c8-9ba2-44a3024dd2ac/V2YMnL3xFqxE9rapppcU_SUoJvvpA_6dfE2T4_ttknQYs1\"\n}"
						}
					},
					{
						"name": "If business success notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set containerWebhook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(equals(pipeline().parameters.isBusinessNotification, 'Yes'), equals(pipeline().parameters.isError, 'No')),contains(pipeline().DataFactory,'prd'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set JSON Schema business success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set business Webhook_success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "messageCardBusiness",
										"value": {
											"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message​​​​\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Pipeline Success alert​​​​\",\n            \"facts\": [\n                {\n                    \"name\": \"Execution Start Time (SGT):\",\n                    \"value\": \"@{convertTimeZone(pipeline().parameters.triggerTime, 'UTC', 'Singapore Standard Time')}\"\n                },\n                {\n                    \"name\": \"Message:\",\n                    \"value\": \"@{replace(replace(replace(replace(replace(replace(pipeline().parameters.businessMessage,'\"',''),'\\n','~~'),'\\',''),'~~','\\n'),'{',''),'}','')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"@type\": \"OpenUri\",\n            \"name\": \"Download File Attachment\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \"@{if(equals(pipeline().parameters.fileUrl, null),'', pipeline().parameters.fileUrl)}\"\n                }\n            ]\n        }\n    ]\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Invoke Teams Webhook URL business success",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set JSON Schema business success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"url": {
											"value": "@variables('businessWebhook')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "adfiradbplt001",
											"type": "IntegrationRuntimeReference"
										},
										"body": {
											"value": "@json(variables('messageCardBusiness'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set business Webhook_success",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "businessWebhook",
										"value": {
											"value": "@json(variables('container_webhook'))[pipeline().parameters.container]",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"subscription": {
						"type": "string"
					},
					"resourceGroup": {
						"type": "string"
					},
					"runId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"triggerTime": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"supportMessage": {
						"type": "string"
					},
					"isBusinessNotification": {
						"type": "string",
						"defaultValue": "No"
					},
					"isSupportNotification": {
						"type": "string",
						"defaultValue": "No"
					},
					"businessMessage": {
						"type": "string"
					},
					"isError": {
						"type": "string",
						"defaultValue": "Yes"
					},
					"container": {
						"type": "string"
					},
					"fileUrl": {
						"type": "string"
					}
				},
				"variables": {
					"messageCardBusiness": {
						"type": "String"
					},
					"messageCardSupport": {
						"type": "String"
					},
					"currentTime": {
						"type": "String"
					},
					"container_webhook": {
						"type": "String"
					},
					"businessWebhook": {
						"type": "String"
					},
					"supportWebhook": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MS Teams Notification"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/usecase_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get usecases",
						"description": "Retrieve all use cases from the current use case sequence",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT\n    USECASE.USECASE_ID\nFROM META_RAW.USECASE\nWHERE UPPER(CATEGORY) = '@{toUpper(pipeline().parameters.category)}'\n    AND USECASE.SEQUENCE_ID = @{pipeline().parameters.usecase_sequence_id}\n    AND USECASE.IS_ACTIVE = TRUE\nORDER BY USECASE.USECASE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for each usecase",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get usecases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get usecases').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "run phase master",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "phase_master",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"usecase_id": {
												"value": "@item().usecase_id",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each usecase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "audit fail on for loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each usecase",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get usecases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "error log 1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "audit fail on lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('get usecases').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('get usecases').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					},
					{
						"name": "error log 2",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "audit fail on for loop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('get usecases').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('run phase master').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					}
				],
				"parameters": {
					"usecase_sequence_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Master_Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T15:01:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/phase_master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/phase_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get phases",
						"description": "Retrieve all phases for the current usecase",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT\n    PHASE.PHASE_ID,\n    PHASE.PHASE_NAME,\n    PROCESS.USECASE_ID\nFROM META_RAW.PROCESS \nJOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE \n    PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PHASE.PHASE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each group and phase combination",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get phases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get phases').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Decide phase",
									"description": "Decide, based on each group's phase, what phase pipeline to run",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(equals(variables('isphasefailed'),true),'failed'\n    ,item().phase_name)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Ingestion",
												"activities": [
													{
														"name": "run Ingestion",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "ingestion_master",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"usecase_id": {
																	"value": "@item().usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@item().phase_id",
																	"type": "Expression"
																},
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "ingest failed",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "run Ingestion",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "isphasefailed",
															"value": true
														}
													}
												]
											},
											{
												"value": "Transformation",
												"activities": [
													{
														"name": "run transformation",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "transformation_master",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@item().usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@item().phase_id",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "tranform failed",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "run transformation",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "isphasefailed",
															"value": true
														}
													}
												]
											},
											{
												"value": "Consumption",
												"activities": [
													{
														"name": "run consumption",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "consumption_master",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@item().usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@item().phase_id",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "consume fialed",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "run consumption",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "isphasefailed",
															"value": true
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "audit fail on for loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "For each group and phase combination",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get phases",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"group_id": 0
							}
						}
					},
					{
						"name": "error log 1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "audit fail on lookup",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('get phases').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('get phases').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log 2",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "audit fail on for loop",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Decide phase').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": 0,
								"error_code": {
									"value": "@activity('Decide phase').error?.errorCode",
									"type": "Expression"
								},
								"job_id": 0
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For each group and phase combination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isphasefailed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "audit success",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"group_id": 0
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "audit fail in some phase",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"group_id": 0
										}
									}
								},
								{
									"name": "error log 3",
									"type": "ExecutePipeline",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "audit fail in some phase",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Decide phase').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": 0,
											"error_code": {
												"value": "@activity('Decide phase').error?.errorCode",
												"type": "Expression"
											},
											"job_id": 0
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"usecase_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					}
				},
				"variables": {
					"isphasefailed": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Master_Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T15:01:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/ingestion_master')]",
				"[concat(variables('factoryId'), '/pipelines/transformation_master')]",
				"[concat(variables('factoryId'), '/pipelines/consumption_master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingestion_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get sequences",
						"description": "Retrieve the sequence configuration in the current use case",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each sequence",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get sequences",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get sequences').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "check pipeline status",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('pipelinefailed')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "execute sequence",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ingestion_sequence",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sequence_id": {
															"value": "@item().sequence_id",
															"type": "Expression"
														},
														"usecase_id": {
															"value": "@pipeline().parameters.usecase_id",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set to failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "execute sequence",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "pipelinefailed",
													"value": false
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get sequences",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on for loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "For each sequence",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "check sub pipelinestatus",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For each sequence",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('pipelinefailed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "audit success",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "audit fail inside for loop",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "fail this pipeline",
									"type": "Fail",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "audit fail inside for loop",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Ingestion master failed for @{pipeline().parameters.usecase_id}",
											"type": "Expression"
										},
										"errorCode": "1004"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					}
				},
				"variables": {
					"output_variable": {
						"type": "String"
					},
					"Isunknown": {
						"type": "Boolean"
					},
					"adls_container": {
						"type": "String"
					},
					"folder_path": {
						"type": "String"
					},
					"target_table": {
						"type": "String"
					},
					"target_schema": {
						"type": "String"
					},
					"file_spec": {
						"type": "String"
					},
					"stage": {
						"type": "String"
					},
					"file_format": {
						"type": "String"
					},
					"pipelinefailed": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T19:45:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/ingestion_sequence')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit failure on exec pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each sequence",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "for each sequence",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get sequences",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get sequences').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "check sequence status",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('issequencefailed')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "exec transform sequence",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "transformation_sequence",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sequence_id": {
															"value": "@item().sequence_id",
															"type": "Expression"
														},
														"usecase_id": {
															"value": "@pipeline().parameters.usecase_id",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set to failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "exec transform sequence",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "issequencefailed",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "get sequences",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "check if sequence failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for each sequence",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('issequencefailed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "audit success",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "audit failure on loop",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "fail this pipeline",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "audit failure on loop",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Transformation Master failed for @{pipeline().parameters.usecase_id}",
											"type": "Expression"
										},
										"errorCode": "1020"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"output_variable": {
						"type": "String"
					},
					"dbt-result": {
						"type": "String"
					},
					"sequence_id": {
						"type": "Integer"
					},
					"Isunknown": {
						"type": "Boolean"
					},
					"adls_container": {
						"type": "String"
					},
					"folder_path": {
						"type": "String"
					},
					"target_table": {
						"type": "String"
					},
					"target_schema": {
						"type": "String"
					},
					"file_spec": {
						"type": "String"
					},
					"stage": {
						"type": "String"
					},
					"file_format": {
						"type": "String"
					},
					"issequencefailed": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T19:45:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/transformation_sequence')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/consumption_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get sequences",
						"description": "Retrieve the sequence configuration in the current use case",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for each sequence",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get sequences",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Sequences').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "check sequence status",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('issequencefailed')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "run consumption sequence",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "consumption_sequence",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														},
														"usecase_id": {
															"value": "@pipeline().parameters.usecase_id",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"sequence_id": {
															"value": "@item().sequence_id",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "run consumption sequence",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "issequencefailed",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get sequences",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each sequence",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "check loop status",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for each sequence",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('issequencefailed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "audit success",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "audit fail children",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": 0,
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "fail this pipeline",
									"type": "Fail",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "audit fail children",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Consumption master failed for @{pipeline().parameters.usecase_id}",
											"type": "Expression"
										},
										"errorCode": "3001"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"output_variable": {
						"type": "String"
					},
					"issequencefailed": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Consumption"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T13:09:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/consumption_sequence')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingestion_sequence')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get processes",
						"description": "Retrieve process records for the current sequence",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT *\nFROM META_RAW.PROCESS\nJOIN META_RAW.SOURCE USING(SOURCE_ID)\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each process",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get processes').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "decide source",
									"description": "Decide which Source Activity to use based on the source_type parameter",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().source_type",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "SFTP",
												"activities": [
													{
														"name": "SFTP ingestion",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SFTP",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ADLS",
												"activities": [
													{
														"name": "ADLS ingestion",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "ADLS",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "SQL",
												"activities": [
													{
														"name": "SQL Server ingestion",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "DB",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "File_System",
												"activities": [
													{
														"name": "File_System",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "FILE_SYSTEM",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Snowflake_No_Cdata",
												"activities": [
													{
														"name": "Reverse sync sql",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Reverse_SQL_Sync",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Unknown source",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "Unknown source type: @{item().source_type}",
														"type": "Expression"
													},
													"errorCode": "2000"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "For each process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_LKP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_Foreach",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "For each process",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"sequence_id": {
						"type": "int"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					}
				},
				"variables": {
					"Isunknown": {
						"type": "Boolean"
					},
					"adls_container": {
						"type": "String"
					},
					"folder_path": {
						"type": "String"
					},
					"target_table": {
						"type": "String"
					},
					"target_schema": {
						"type": "String"
					},
					"file_spec": {
						"type": "String"
					},
					"stage": {
						"type": "String"
					},
					"file_format": {
						"type": "String"
					},
					"errorResponse": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:21:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/SFTP')]",
				"[concat(variables('factoryId'), '/pipelines/ADLS')]",
				"[concat(variables('factoryId'), '/pipelines/DB')]",
				"[concat(variables('factoryId'), '/pipelines/FILE_SYSTEM')]",
				"[concat(variables('factoryId'), '/pipelines/Reverse_SQL_Sync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_sequence')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get processes",
						"description": "Retrieve process records for the current sequence",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT *\nFROM META_RAW.PROCESS\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for each process",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get processes').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute dbt pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "dbt",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@item().process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each process",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"sequence_id": {
						"type": "int"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					}
				},
				"variables": {
					"dbt-result": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-27T20:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/dbt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/consumption_sequence')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get processes",
						"description": "Retrieve process records for the current sequence",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "SELECT \n    *\nFROM META_RAW.PROCESS\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for each process",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get processes').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "decide consumption",
									"description": "Decide which Consumption Activity to use based on the phase_type parameter",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().phase_type",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Tableau",
												"activities": [
													{
														"name": "tableau refresh",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Tableau",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "GPT_Tableau_Export",
												"activities": [
													{
														"name": "GPT_Tableau_Export",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Tableau_View_Export",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Data_Export",
												"activities": [
													{
														"name": "Data_Export",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Data_Export",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Mbox_File_Copy",
												"activities": [
													{
														"name": "Mbox_File_Copy",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Mbox_File_Copy",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "DCL_ContactHist_Unload_MBox",
												"activities": [
													{
														"name": "DCL_ContactHist_Unload_MBox",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "DCL_ContactHist_Unload_MBox",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Data_Export_SFMC",
												"activities": [
													{
														"name": "Data_Export_SFMC",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Data_Export_SFMC",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"category": {
																	"value": "@pipeline().parameters.category",
																	"type": "Expression"
																},
																"usecase_id": {
																	"value": "@pipeline().parameters.usecase_id",
																	"type": "Expression"
																},
																"phase_id": {
																	"value": "@pipeline().parameters.phase_id",
																	"type": "Expression"
																},
																"sequence_id": {
																	"value": "@pipeline().parameters.sequence_id",
																	"type": "Expression"
																},
																"process_id": {
																	"value": "@item().process_id",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Unknown source",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "Unknown source type: @{item().source_type}",
														"type": "Expression"
													},
													"errorCode": "2000"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get processes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail on loop",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "for each process",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": 0,
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Consumption"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/Tableau')]",
				"[concat(variables('factoryId'), '/pipelines/Tableau_View_Export')]",
				"[concat(variables('factoryId'), '/pipelines/Data_Export')]",
				"[concat(variables('factoryId'), '/pipelines/Mbox_File_Copy')]",
				"[concat(variables('factoryId'), '/pipelines/DCL_ContactHist_Unload_MBox')]",
				"[concat(variables('factoryId'), '/pipelines/Data_Export_SFMC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'jobId'\" AS jobId,\n\"'accountId'\" AS accountId,\n\"'waitTime'\" AS waitTime,\n\"'transformationType'\" AS transformationType,\n\"'tempId'\" AS tempId,\n\"'container'\" AS container\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'jobId',\n'accountId',\n'waitTime',\n'transformationType',\n'tempId',\n'container'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Trigger DBT Job",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Fetch Credential from Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:06:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "{\n  \"cause\": \"Triggered via ADF transformation pipeline in @{pipeline().globalParameters.environment} for category @{pipeline().parameters.category}. ADF Pipeline run id is @{pipeline().RunId}\"\n}",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "Token @{activity('Fetch Credential from Vault').output.value}",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DbtRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "api/v2/accounts/@{activity('read parameters').output.value[0].accountId}/jobs/@{activity('read parameters').output.value[0].jobId}/run/",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DbtAPIResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": "asp",
									"tempDirectory": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/dbt/@{activity('read parameters').output.value[0].jobId}",
										"type": "Expression"
									},
									"tempFileName": "dbtResponseTrigger.json"
								}
							}
						]
					},
					{
						"name": "Read response",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Trigger DBT Job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DbtAPIResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": "asp",
									"tempDirectory": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/dbt/@{activity('read parameters').output.value[0].jobId}",
										"type": "Expression"
									},
									"tempFileName": "dbtResponseTrigger.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Fetch Credential from Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"url": "https://akvadbplt001.vault.azure.net/secrets/adfadbplt001lsdbtclouddnacore?api-version=7.0",
							"connectVia": {
								"referenceName": "adfiradbplt002",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "wait until job is complete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "get run id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(variables('run_status'), 10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "wait a while before checking status",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@int(activity('read parameters').output.value[0].waitTime)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Status Value",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Read Job Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "run_status",
										"value": {
											"value": "@activity('Read Job Status').output.value[0].data?.status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get DBT Job Status",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "wait a while before checking status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": {
													"value": "Token @{activity('Fetch Credential from Vault').output.value}",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DbtRestAPI",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "api/v2/accounts/@{activity('read parameters').output.value[0].accountId}/runs/@{variables('run_id')}/",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DbtAPIResponse",
											"type": "DatasetReference",
											"parameters": {
												"tempContainer": "asp",
												"tempDirectory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/dbt/@{activity('read parameters').output.value[0].jobId}",
													"type": "Expression"
												},
												"tempFileName": "dbtResponseCurrentJobStatus.json"
											}
										}
									]
								},
								{
									"name": "Read Job Status",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get DBT Job Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "DbtAPIResponse",
											"type": "DatasetReference",
											"parameters": {
												"tempContainer": "asp",
												"tempDirectory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/dbt/@{activity('read parameters').output.value[0].jobId}",
													"type": "Expression"
												},
												"tempFileName": "dbtResponseCurrentJobStatus.json"
											}
										},
										"firstRowOnly": false
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "get run id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "run_id",
							"value": {
								"value": "@activity('Read response').output.value[0].data?.id",
								"type": "Expression"
							}
						}
					},
					{
						"name": "error Fetching token from Vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Credential from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch Credential from Vault').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch Credential from Vault').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Credential from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger DBT Job",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "wait until job is complete",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error triggering DBT job",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger DBT Job",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Trigger DBT Job').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Trigger DBT Job').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification triggering dbt",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger DBT Job",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error triggering DBT job (@{activity('read parameters').output.value[0].jobId}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Trigger DBT Job').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Execute dbt check utility",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "wait until job is complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dbt_check_utility",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"parameters": {
									"value": "@activity('read parameters').output",
									"type": "Expression"
								},
								"run_id": {
									"value": "@variables('run_id')",
									"type": "Expression"
								},
								"run_status": {
									"value": "@variables('run_status')",
									"type": "Expression"
								},
								"parent_seq_run_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"dbt_runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"dbt_jobid": {
									"value": "@{activity('read parameters').output.value[0].jobId}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification fetching credentials",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Credential from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error while fetching credentials from vault for DBT job (@{activity('read parameters').output.value[0].jobId}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch Credential from Vault').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"run_id": {
						"type": "Integer"
					},
					"run_status": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Transformation/dbt"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/DbtRestAPI')]",
				"[concat(variables('factoryId'), '/datasets/DbtAPIResponse')]",
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/dbt_check_utility')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DbtRestAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdbtclouddnacore')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/DBT"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().url",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DbtAPIResponse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tempContainer": {
						"type": "string"
					},
					"tempDirectory": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/DBT"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tempFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().tempDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().tempContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbt_check_utility')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit failure of dbt status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch success or failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": "dbt",
								"message": {
									"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error dbt run failed_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch success or failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": "dbt",
								"error_message": {
									"value": "dbt job failed, check on run_id @{pipeline().parameters.run_id} and retry",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "2002",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Switch success or failure",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(pipeline().parameters.parameters.value[0].transformationType,'ingestion'), '1', if(greater(pipeline().parameters.run_status,10), '2','0'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "0",
									"activities": [
										{
											"name": "audit success",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_audit_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"status": "FINISH",
													"input_row_count": 0,
													"output_row_count": 0,
													"jobname": "dbt",
													"message": {
														"value": "@concat('dbt pipeline is completed for use case ', string(pipeline().parameters.category))",
														"type": "Expression"
													},
													"runid": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"pipeline_id": {
														"value": "@pipeline().parameters.parent_seq_run_id",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "1",
									"activities": [
										{
											"name": "Script1",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "select * from core_integration.dbtjobs_test_cdc_metadata where tempid='@{pipeline().parameters.parameters.value[0].tempId}';\n",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Script2",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set parameters",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "call core_integration.SP_failed_tests_models('@{pipeline().parameters.parameters.value[0].tempId}',@{variables('sp_params')});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "ResultSet Array",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Script2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "resultSet",
												"value": {
													"value": "@activity('Script2').output.resultSets",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set parameters",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Script1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sp_params",
												"value": {
													"value": "'@{replace(activity('Script1').output.resultSets[0].rows[0].MODELS,'''' ,'\\''')}'",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "fail this job",
											"type": "Fail",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "dbt job failed, check on run_id @{pipeline().parameters.run_id} and retry",
													"type": "Expression"
												},
												"errorCode": "2002"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEveryModel",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ModelName Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('modelNameArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Script3",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "select * from CORE_INTEGRATION.DBTTEST_TABLES_METADATA where model= '@{item().model_name}';",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set current time",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentTime",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Error notification dbt ing build fail_copy1_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Script fetch file names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().parameters.dbt_runid",
												"type": "Expression"
											},
											"name": "dbt",
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "Error due to DQ Checks in DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**DATASET**: @{item().model_name} \\n\n**ERROR**: _Dbt job failed due to DQ check, check on run_id @{pipeline().parameters.run_id} and retry. Download the file with this URL - @{activity('Script Fetch presigned url').output.resultSets[0].rows[0].URL}_ \\n\n@{if(variables('IsCountryDeployed'),concat('**FILE_NAMES**: ',activity('Script fetch file names').output.resultSets[0].rows[0].FILE_NAMES), '')}",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "Error due to Data Quality Checks in DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**ERROR**: _Data load failed for @{item().model_name}. Please check the failed records here @{activity('Script Fetch presigned url').output.resultSets[0].rows[0].URL}_ \\n \n@{if(variables('IsCountryDeployed'),concat('Kindly fix and reupload these files - ',activity('Script fetch file names').output.resultSets[0].rows[0].FILE_NAMES), 'Kindly fix and reupload.')}",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@pipeline().parameters.parameters.value[0].container",
												"type": "Expression"
											},
											"fileUrl": {
												"value": "@{activity('Script Fetch presigned url').output.resultSets[0].rows[0].URL}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Script Unload to stage",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script3",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set current time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO @{concat('@UTILITY_RAW.INTSTG_USERERRORNOTIFICATION/',pipeline().parameters.parameters.value[0].container,'/',item().model_name,'/',item().model_name,'_',formatDateTime(convertTimeZone(variables('currentTime'), 'UTC', 'Singapore Standard Time'),'yyyyMMdd_HHmmss'),'.csv')} \nFROM (\n  @{replace(activity('Script3').output.resultSets[0].rows[0].QUERY,';','')}\n)\nFILE_FORMAT = (\n  TYPE = 'CSV'\n  FIELD_DELIMITER = ','\n  ENCODING = 'UTF-8',\n  COMPRESSION = 'NONE'\n  NULL_IF =() \n  EMPTY_FIELD_AS_NULL = FALSE\n) \nsingle = true \nheader = true \nmax_file_size = 4900000000;",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script Fetch presigned url",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script Unload to stage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "SELECT GET_PRESIGNED_URL( @{concat('@UTILITY_RAW.INTSTG_USERERRORNOTIFICATION')},'@{concat(pipeline().parameters.parameters.value[0].container,'/',item().model_name,'/',item().model_name,'_',formatDateTime(convertTimeZone(variables('currentTime'), 'UTC', 'Singapore Standard Time'),'yyyyMMdd_HHmmss'),'.csv')}', 604800) as URL;\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "error dbt dq check copy cmd",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Script Unload to stage",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": "dbt",
											"error_message": {
												"value": "@activity('Script Unload to stage').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().parameters.dbt_runid",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Script Unload to stage').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline().parameters.parent_seq_run_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error notification dq check copy cmd",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Script Unload to stage",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().parameters.dbt_runid",
												"type": "Expression"
											},
											"name": "dbt",
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "Error with DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Script Unload to stage').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "Script fetch file names",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set isCountryDeployed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(variables('IsCountryDeployed'),concat('with fileName as (',replace(replace(activity('Script3').output.resultSets[0].rows[0].QUERY,'*','LISTAGG(DISTINCT file_name, '', '') as file_names'),';',''),') Select LISTAGG(DISTINCT file_names, '', '') as file_names from fileName  where file_names !='''''), 'Select 1')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set isCountryDeployed",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Fetch presigned url",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "IsCountryDeployed",
										"value": {
											"value": "@if(equals(pipeline().parameters.parameters.value[0].container, 'phl'),true,if(equals(pipeline().parameters.parameters.value[0].container, 'tha'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'ind'), true,if(equals(pipeline().parameters.parameters.value[0].container, 'vnm'), true,if(equals(pipeline().parameters.parameters.value[0].container, 'mys'), true,if(equals(pipeline().parameters.parameters.value[0].container, 'sgp'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'pac'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'jpn'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'hcp'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'idn'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'asp'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'kor'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'hkg'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'twn'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'chn'), true, if(equals(pipeline().parameters.parameters.value[0].container, 'ose'), true, false))))))))))))))))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If not Ingestion Error",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEveryModel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.parameters.value[0].transformationType,'ingestion'),not(empty(variables('resultSet'))))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Script5",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "call core_integration.SP_updatecdc_failed_tests_models('@{pipeline().parameters.parameters.value[0].tempId}',@{variables('sp_params')});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "ModelName Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Switch success or failure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "modelNameArray",
							"value": {
								"value": "@if(equals(pipeline().parameters.parameters.value[0].transformationType,'ingestion'),if(empty(variables('resultSet')),variables('emptyArray'),variables('resultSet')[0].rows),variables('emptyArray'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch Build or DQ check failed",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If not Ingestion Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(and(equals(pipeline().parameters.parameters.value[0].transformationType,'ingestion'),not(empty(variables('resultSet')))),if(empty(variables('resultSet')),'10','11'),'0')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "10",
									"activities": [
										{
											"name": "audit failure of dbt status ing build",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_audit_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"status": "FAIL",
													"input_row_count": 0,
													"output_row_count": 0,
													"jobname": "dbt",
													"message": {
														"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
														"type": "Expression"
													},
													"runid": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"pipeline_id": {
														"value": "@pipeline().parameters.parent_seq_run_id",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error dbt run failed ing build",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "audit failure of dbt status ing build",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": "dbt",
													"error_message": {
														"value": "dbt job failed, check on run_id @{pipeline().parameters.run_id} and retry",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "2002",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline().parameters.parent_seq_run_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send Error notification dbt ing build fail",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "audit failure of dbt status ing build",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"name": "dbt",
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "Error in DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _dbt job failed, check on run_id @{pipeline().parameters.run_id} and retry_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								},
								{
									"value": "11",
									"activities": [
										{
											"name": "audit failure of dbt ing dq check",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_audit_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"status": "FAIL : DQ Check",
													"input_row_count": 0,
													"output_row_count": 0,
													"jobname": "dbt",
													"message": {
														"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
														"type": "Expression"
													},
													"runid": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"pipeline_id": {
														"value": "@pipeline().parameters.parent_seq_run_id",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error dbt run failed ing check",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "audit failure of dbt ing dq check",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "dbt job failed due to DQ check, check on run_id @{pipeline().parameters.run_id} and retry",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "2002",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline().parameters.parent_seq_run_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send Error notification dbt ing build fail_copy1",
											"type": "ExecutePipeline",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "audit failure of dbt ing dq check",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().parameters.dbt_runid",
														"type": "Expression"
													},
													"name": "dbt",
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "Error in DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _dbt job failed, check on run_id @{pipeline().parameters.run_id} and retry_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Send Error notification dbt build fail 1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch success or failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"name": "dbt",
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error with DBT job (@{pipeline().parameters.dbt_jobid}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _DBT job failed, check on run_id @{pipeline().parameters.run_id} and retry_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "audit failure for syntax issues",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryModel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": "dbt",
								"message": {
									"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit failure for syntax issues2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If not Ingestion Error",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": "dbt",
								"message": {
									"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch Build or DQ check failed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": "dbt",
								"message": {
									"value": "@concat('dbt pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error dbt syntax issues",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryModel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": "dbt",
								"error_message": {
									"value": "Process failed due to some Metadata issues for DQ checks. Please check the adf pipeline to find out the exact error.",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().parameters.dbt_runid",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "2002",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline().parameters.parent_seq_run_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Ingestion Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch Build or DQ check failed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.parameters.value[0].transformationType,'ingestion'),empty(variables('resultSet')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "audit finish",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FINISH",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": "dbt",
											"message": {
												"value": "@concat('dbt pipeline is completed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().parameters.dbt_runid",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline().parameters.parent_seq_run_id",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"parameters": {
						"type": "object"
					},
					"run_id": {
						"type": "int"
					},
					"run_status": {
						"type": "int"
					},
					"parent_seq_run_id": {
						"type": "string"
					},
					"dbt_runid": {
						"type": "string"
					},
					"dbt_jobid": {
						"type": "string"
					}
				},
				"variables": {
					"modelNameArray": {
						"type": "Array",
						"defaultValue": []
					},
					"sp_params": {
						"type": "String"
					},
					"resultSet": {
						"type": "Array",
						"defaultValue": []
					},
					"emptyArray": {
						"type": "Array",
						"defaultValue": []
					},
					"currentTime": {
						"type": "String"
					},
					"IsCountryDeployed": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Transformation/dbt/utilities"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'file_spec'\" AS file_spec,\n\"'folder_path'\" AS folder_path,\n\"'target_table'\" AS target_table,\n\"'container'\" AS container,\n\"'target_schema'\" AS target_schema,\n\"'source_extn'\" AS source_extn,\nIFNULL(\"'isUnzipNeeded'\",'N') AS isUnzipNeeded,\n\"'ftpName'\" AS ftpName,\n\"'ftpDirectory'\" AS ftpDirectory\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'file_spec',\n'folder_path',\n'target_table',\n'container',\n'target_schema',\n'source_extn',\n'isUnzipNeeded',\n'ftpName',\n'ftpDirectory'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Switch SFTP",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('read parameters').output.value[0].ftpName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "iqviaaus",
									"activities": [
										{
											"name": "Get files iqviaaus",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPiqviaaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files iqviaaus",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files iqviaaus",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files iqviaaus').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error iqviaaus",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files iqviaaus",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files iqviaaus').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "perensoaus",
									"activities": [
										{
											"name": "Get files perensoaus",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPperensoaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "@{activity('read parameters').output.value[0].file_spec}*",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files perensoaus",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files perensoaus",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files perensoaus').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error exacttargetphl_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files perensoaus",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files perensoaus').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "exacttargettha",
									"activities": [
										{
											"name": "Get files exacttargettha",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPexacttargettha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files exacttargettha",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files exacttargettha",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files exacttargettha').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error exacttargettha",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files exacttargettha",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files exacttargettha').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "marketingcloudopstha",
									"activities": [
										{
											"name": "Get files marketingcloudopstha",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPmarketingcloudopstha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files marketingcloudopstha",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files marketingcloudopstha",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files marketingcloudopstha').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error marketingcloudopstha",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files marketingcloudopstha",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files marketingcloudopstha').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "popcompany",
									"activities": [
										{
											"name": "Get files popcompany",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "@{formatDateTime(\n        convertTimeZone(\n            addDays(utcnow(), -1),\n            'UTC',\n            'Singapore Standard Time'\n        ),\n        'yyyyMMdd'\n    )}_@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files popcompany",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files popcompany",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files popcompany').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error popcompany",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files popcompany",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files popcompany').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "marketingcloudopsjpndcl",
									"activities": [
										{
											"name": "Get files marketingcloudopsjpndcl",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPmarketingcloudopsjpndcl",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files marketingcloudopsjpndcl",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files marketingcloudopsjpndcl",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files marketingcloudopsjpndcl').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error marketingcloudopsjpndcl",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files marketingcloudopsjpndcl",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files marketingcloudopsjpndcl').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "popcompanytrans",
									"activities": [
										{
											"name": "Get files popcompanytrans",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"childItems"
												],
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											}
										},
										{
											"name": "files popcompanytrans",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files popcompanytrans",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "getFiles",
												"value": {
													"value": "@string(activity('Get files popcompanytrans').output.childItems)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error popcompanytrans",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get files popcompanytrans",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Get files popcompanytrans').error?.message",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail - SFTP Source",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Set error unknown ftp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail - FTP Source Unknown",
										"errorCode": "404"
									}
								},
								{
									"name": "Set error unknown ftp",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse1",
										"value": " SFTP Source Unknown"
									}
								}
							]
						}
					},
					{
						"name": "FilterOnlyFile",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(variables('getFiles'))",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEveryFileInFTP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Switch SFTP for file filtering",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('fileNamesArray')",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Execute SFTP_To_ADLS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SFTP_To_ADLS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"FtpDirectory": {
												"value": "@activity('read parameters').output.value[0].ftpDirectory",
												"type": "Expression"
											},
											"FtpFileName": {
												"value": "@item()",
												"type": "Expression"
											},
											"FtpName": {
												"value": "@activity('read parameters').output.value[0].ftpName",
												"type": "Expression"
											},
											"AdlsContainer": {
												"value": "@activity('read parameters').output.value[0].container",
												"type": "Expression"
											},
											"AdlsPath": {
												"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"isUnzipNeeded": {
												"value": "@activity('read parameters').output.value[0].isUnzipNeeded",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit fail - directory not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - directory not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@variables('errorResponse1')",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": "00",
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - directory not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**FTP_NAME**: @{activity('read parameters').output.value[0].ftpName} \\n\n**FTP_DIRECTORY**: @{activity('read parameters').output.value[0].ftpDirectory} \\n\n**FILE_PREFIX**: @{activity('read parameters').output.value[0].FILE_SPEC} \\n\n**ERROR**: _@{variables('errorResponse1')}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryFileInFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryFileInFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Switch SFTP for file filtering",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ForEachFile append name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(and(equals(activity('read parameters').output.value[0].ftpName,'iqviaaus'), greater(activity('FilterOnlyFile').output.FilteredItemsCount,0)),'iqviaaus','')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "iqviaaus",
									"activities": [
										{
											"name": "Filter File Name Iqvia",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Script sort file names",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "fileNamesArray",
												"value": {
													"value": "@array(json(activity('Script sort file names').output.resultSets[0].rows[0].SORT_VALUES)[0])",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Script sort file names",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set sorting call query",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@variables('sortingCall')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set sorting call query",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sortingCall",
												"value": {
													"value": "call meta_raw.sort_values([@{replace(string(variables('fileNamesArray')),'\"','''')}, ['1']])",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachFile append name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyFile').output.Value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNamesArray",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string",
						"defaultValue": "PH_SFMC_CRM"
					},
					"usecase_id": {
						"type": "int",
						"defaultValue": 112
					},
					"sequence_id": {
						"type": "int",
						"defaultValue": 1
					},
					"process_id": {
						"type": "int",
						"defaultValue": 614
					},
					"phase_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"getFiles": {
						"type": "String"
					},
					"sheet_names": {
						"type": "Array"
					},
					"emptyArray": {
						"type": "Array",
						"defaultValue": []
					},
					"fileNamesArray": {
						"type": "Array"
					},
					"sortingCall": {
						"type": "String"
					},
					"errorResponse1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/SFTP_To_ADLS')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPiqviaaus')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPperensoaus')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPexacttargettha')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPmarketingcloudopstha')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPpopcompany')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPmarketingcloudopsjpndcl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'val_file_header'\" AS val_file_header,\n\"'file_spec'\" AS file_spec,\n\"'val_file_name'\" AS val_file_name,\n\"'val_file_extn'\" AS val_file_extn,\n\"'load_method'\" AS load_method,\n\"'sp_name'\" AS sp_name,\n\"'sheet_index'\" AS sheet_index,\n\"'folder_path'\" AS folder_path,\n\"'target_table'\" AS target_table,\n\"'container'\" AS container,\n\"'target_schema'\" AS target_schema,\n\"'validation'\" AS validation,\n\"'index'\" AS index,\n\"'source_extn'\" AS source_extn,\n\"'sheet_names'\" AS sheet_names,\n\"'file_header_row_num'\" AS file_header_row_num,\n\"'is_truncate'\" AS is_truncate,\n\"'startRange'\" AS startRange,\nIFNULL(\"'is_direct_load'\",'N') AS is_direct_load,\nIFNULL(\"'hasDateInPath'\",'N') AS hasDateInPath,\n\"'header_regex'\" AS header_regex,\n\"'is_forced_truncate'\" AS is_forced_truncate,\nIFNULL(\"'QueryOnSource'\",'NA') AS QueryOnSource \nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'val_file_header',\n'file_spec',\n'val_file_name',\n'val_file_extn',\n'load_method',\n'sp_name',\n'sheet_index',\n'folder_path',\n'target_table',\n'container',\n'target_schema',\n'validation',\n'index',\n'source_extn',\n'sheet_names',\n'file_header_row_num',\n'is_truncate',\n'startRange',\n'is_direct_load',\n'hasDateInPath',\n'header_regex',\n'is_forced_truncate',\n'QueryOnSource'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Only File",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "get file name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get file name').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type,'File'),not(contains(item().name,'Trigger')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get file name",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set src_path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adls_src",
								"type": "DatasetReference",
								"parameters": {
									"src_path": {
										"value": "@variables('src_path')",
										"type": "Expression"
									},
									"src_container": {
										"value": "@activity('read parameters').output.value[0].CONTAINER",
										"type": "Expression"
									},
									"src_filename": {
										"value": "@concat('*',activity('read parameters').output.value[0].FILE_SPEC,'*')\n",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set sheet_names array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If No file is present",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "sheet_names",
							"value": {
								"value": "@if(equals(coalesce(activity('read parameters').output.value[0].sheet_names, variables('emptyArray')),variables('emptyArray')),variables('emptyArray'),split(activity('read parameters').output.value[0].sheet_names,','))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "audit fail - file not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get file name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - file not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get file name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('get file name').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('get file name').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEveryFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEveryFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "If is_truncate Y",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only File').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set fileExtVal",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileExtVal",
										"value": {
											"value": "@split(activity('read parameters').output.value[0].validation,'-')[1]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If file extn validation",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set fileExtVal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(equals(variables('fileExtVal'),'0'), and(equals(variables('fileExtVal'),'1'), contains(item().name,activity('read parameters').output.value[0].source_extn)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "File ext validation",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "error log - file ext val",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Send error - file ext validation",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Execute Archival Error File Extn Val",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "File Extension Validation got failed. Received file name \"@{item().name}\" and valid extension is \"@{activity('read parameters').output.value[0].source_extn}\"",
														"type": "Expression"
													},
													"errorCode": "200"
												}
											},
											{
												"name": "error log - file ext val",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "write_error_log",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"process_id": {
															"value": "@pipeline().parameters.process_id",
															"type": "Expression"
														},
														"job_name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"error_message": {
															"value": "File Extension Validation got failed. Received file name \"@{item().name}\" and valid extension is \"@{activity('read parameters').output.value[0].source_extn}\"",
															"type": "Expression"
														},
														"run_id": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"error_code": "200",
														"job_id": {
															"value": "@pipeline()?.TriggeredByPipelineRunId",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Send error - file ext validation",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "NotifiyTeamsChannelPipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subscription": {
															"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
															"type": "Expression"
														},
														"resourceGroup": {
															"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
															"type": "Expression"
														},
														"runId": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"status": "FAIL",
														"supportMessage": {
															"value": "File Validation Failure : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}@{if(equals(activity('read parameters').output.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{item().name} \\n\n**ERROR**: _File Extension Validation got failed. Received file name \"@{item().name}\" and valid extension is \"@{activity('read parameters').output.value[0].source_extn}\"_",
															"type": "Expression"
														},
														"isBusinessNotification": "Yes",
														"isSupportNotification": "Yes",
														"businessMessage": {
															"value": "There is some issue with the structure of source file as File Validation was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{activity('read parameters').output.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}@{if(equals(activity('read parameters').output.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{item().name} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{activity('read parameters').output.value[0].target_table} table under @{activity('read parameters').output.value[0].target_schema} schema. Kindly fix and reupload. File Extension Validation got failed. Received file name \"@{item().name}\" and valid extension is \"@{activity('read parameters').output.value[0].source_extn}\"_",
															"type": "Expression"
														},
														"isError": "Yes",
														"container": {
															"value": "@activity('read parameters').output.value[0].CONTAINER",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute Archival Error File Extn Val",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "File_Archival",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														},
														"usecase_id": {
															"value": "@pipeline().parameters.usecase_id",
															"type": "Expression"
														},
														"sequence_id": {
															"value": "@pipeline().parameters.sequence_id",
															"type": "Expression"
														},
														"process_id": {
															"value": "@pipeline().parameters.process_id",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"isError": "Yes",
														"container": {
															"value": "@activity('read parameters').output.value[0].container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{activity('read parameters').output.value[0].FOLDER_PATH}@{if(equals(activity('read parameters').output.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"sheetNames": {
															"value": "@variables('sheet_names')",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Execute Load_File",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Load_File",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"category": {
															"value": "@pipeline().parameters.category",
															"type": "Expression"
														},
														"usecase_id": {
															"value": "@pipeline().parameters.usecase_id",
															"type": "Expression"
														},
														"sequence_id": {
															"value": "@pipeline().parameters.sequence_id",
															"type": "Expression"
														},
														"process_id": {
															"value": "@pipeline().parameters.process_id",
															"type": "Expression"
														},
														"phase_id": {
															"value": "@pipeline().parameters.phase_id",
															"type": "Expression"
														},
														"sourceFileName": {
															"value": "@item().name",
															"type": "Expression"
														},
														"parameters": {
															"value": "@activity('read parameters').output",
															"type": "Expression"
														},
														"sheetNames": {
															"value": "@variables('sheet_names')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "If No file is present",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Filter Only File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Filter Only File').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "error log - no file",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "No file present at the location",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "404",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "No file Present",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error log - no file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "No file present at the location",
											"type": "Expression"
										},
										"errorCode": "404"
									}
								}
							]
						}
					},
					{
						"name": "error log - file not present2",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If No file is present",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('No file Present').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('No file Present').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - file not present2",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "If No file is present",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If is_truncate Y",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set sheet_names array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('read parameters').output.value[0].is_truncate,'Y'),or(greater(activity('Filter Only File').output.FilteredItemsCount,0),equals(activity('read parameters').output.value[0].is_forced_truncate,'Y')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "truncate table",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema}.@{join(split(activity('read parameters').output.value[0].target_table,':'),concat(';\nTRUNCATE TABLE ',activity('read parameters').output.value[0].target_schema,'.'))};",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Send error - directory not present",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get file name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**FOLDER_PATH**: @{activity('read parameters').output.value[0].FOLDER_PATH}@{if(equals(activity('read parameters').output.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_PREFIX**: @{activity('read parameters').output.value[0].FILE_SPEC} \\n\n**ERROR**: _@{activity('get file name').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes",
								"container": {
									"value": "@activity('read parameters').output.value[0].CONTAINER",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set src_path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "src_path",
							"value": {
								"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}@{if(equals(activity('read parameters').output.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"sheet_names": {
						"type": "Array"
					},
					"emptyArray": {
						"type": "Array",
						"defaultValue": []
					},
					"errorMessage": {
						"type": "String",
						"defaultValue": "NO"
					},
					"sheetNames": {
						"type": "Array"
					},
					"src_path": {
						"type": "String"
					},
					"queryOnSource": {
						"type": "String"
					},
					"fileExtVal": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:21:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/adls_src')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/File_Archival')]",
				"[concat(variables('factoryId'), '/pipelines/Load_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "delete_after_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set landing_file_name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "landing_file_name",
							"value": {
								"value": "@concat(concat(activity('read parameters').output.value[0].landing_file_name, '_', formatDateTime(convertTimeZone(UTCnow(),'UTC','Singapore Standard Time'), 'yyyyMMddHHmmss')),'.csv')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select SNOWFLAKE_STAGE,IS_INCREMENTAL,WATERMARK_VALUE,\n\"'container'\" AS container,\n\"'landing_file_path'\" AS landing_file_path,\n\"'landing_file_name'\" AS landing_file_name,\n\"'target_table'\" AS target_table,\n\"'target_schema'\" AS target_schema,\nREPLACE(CASE WHEN IS_INCREMENTAL = TRUE AND WATERMARK_VALUE IS NOT NULL\nTHEN\n    CONCAT(\"'ms_query'\",' ',REPLACE(ifnull(\"'incremental_filter'\",''), '{WATERMARK_VALUE}', WATERMARK_VALUE))\nELSE    \"'ms_query'\" END, '{JOB_START_TIME}', '@{formatDateTime(convertTimeZone(pipeline().TriggerTime,'UTC','Singapore Standard Time'), 'yyyy-MM-dd HH:mm:ss')}') AS ms_query,\n\"'truncate_and_load'\" AS truncate_and_load,\n\"'decide_source'\" AS decide_source,\nifnull(\"'param_list'\",'') AS param_list,\n\"'param_query'\" AS param_query,\nlower(ifnull(\"'load_method'\",'copy')) AS load_method,\n\"'sp_name'\" AS SP_NAME,\n\"'next_incremental_value'\" AS next_incremental_value,\nifnull(\"'map_names'\",'N') AS map_names,\nifnull(\"'extract_month'\",'0') AS extract_month\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT, IS_INCREMENTAL,WATERMARK_VALUE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS P USING (PARAMETER_GROUP_ID)\nLEFT JOIN (SELECT PROCESS_ID,WATERMARK_VALUE FROM META_RAW.INCREMENTAL_WATERMARK\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND LOAD_STATUS = 'SUCCESS'\nQUALIFY ROW_NUMBER() OVER(PARTITION BY PROCESS_ID ORDER BY INSERT_TIMESTAMP DESC) = 1) I USING(PROCESS_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'container',\n'landing_file_path',\n'landing_file_name',\n'target_table',\n'target_schema',\n'ms_query',\n'truncate_and_load',\n'decide_source',\n'param_list',\n'param_query',\n'incremental_filter',\n'load_method',\n'sp_name',\n'next_incremental_value',\n'map_names',\n'extract_month'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set FILE_PATH",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "landing_file_path",
							"value": {
								"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SDL_TABLE",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "sdl_table",
							"value": {
								"value": "@{activity('read parameters').output.value[0].TARGET_SCHEMA}.@{activity('read parameters').output.value[0].TARGET_TABLE}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set container",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "container",
							"value": {
								"value": "@activity('read parameters').output.value[0].CONTAINER",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SOURCE_TABLE",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ms_query",
							"value": {
								"value": "@activity('read parameters').output.value[0].ms_query",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - move sql_server_to_alds",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "extract_source_data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - adls_to_snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - adls_to_snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('load_with_load_method').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('load_with_load_method').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - adls_to_snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue with load : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**ERROR**: _@{activity('load_with_load_method').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "audit fail - Truncate_Target",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "truncate_target_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "parameter_replace",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set SOURCE_TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(not(equals(activity('read parameters').output.value[0].param_list, '')),true,false)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "read_query_parameters",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@activity('read parameters').output.value[0].param_query",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "replace_query_params_with_values",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "read_query_parameters",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "CALL META_RAW.SP_GET_FULLQUERY(['@{replace(variables('ms_query'),'''','''''')}','@{activity('read parameters').output.value[0].param_list}','@{activity('read_query_parameters').output.resultSets[0].rows[0]}'])",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "reset_source_query",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "replace_query_params_with_values",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ms_query",
										"value": {
											"value": "@activity('replace_query_params_with_values').output.resultSets[0].rows[0].SP_GET_FULLQUERY",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "audit fail - parameter_replace",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "parameter_replace",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log  - parameter_replace",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "parameter_replace",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('parameter_replace').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('parameter_replace').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error  - parameter_replace",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "parameter_replace",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue with parameter replacement of source query : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**ERROR**: _@{activity('parameter_replace').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "load_with_load_method",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "truncate_target_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toLower(activity('read parameters').output.value[0].load_method)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "copy",
									"activities": [
										{
											"name": "load_adls_to_snowflake",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "NonQuery",
														"text": {
															"value": "COPY INTO @{variables('sdl_table')} FROM \n'@{concat('@', activity('read parameters').output.value[0].SNOWFLAKE_STAGE, '/', variables('landing_file_path'), '/',variables('landing_file_name'))}' \nFILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = '\\u0001' RECORD_DELIMITER='\\r\\n' @{concat('',if(equals(toLower(activity('read parameters').output.value[0].map_names),'y'),'PARSE_HEADER = TRUE','SKIP_HEADER = 1'))} ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE, FIELD_OPTIONALLY_ENCLOSED_BY = None)\n@{concat('',if(equals(toLower(activity('read parameters').output.value[0].map_names),'y'),'MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE',''))}\n;",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message_on_Copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load_adls_to_snowflake",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load_adls_to_snowflake').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "fail_on_copy",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "load_adls_to_snowflake",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@{activity('load_adls_to_snowflake').error?.message}",
													"type": "Expression"
												},
												"errorCode": "1501"
											}
										}
									]
								},
								{
									"value": "sp",
									"activities": [
										{
											"name": "Load with SP",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "CALL @{activity('read parameters').output.value[0].sp_name} (['@{variables('landing_file_name')}','@{activity('read parameters').output.value[0].snowflake_stage\n}','@{variables('landing_file_path')}','@{activity('read parameters').output.value[0].TARGET_TABLE\n}']);\n",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand"
													}
												},
												"dataset": {
													"referenceName": "mtd_process",
													"type": "DatasetReference"
												},
												"firstRowOnly": false
											}
										},
										{
											"name": "Set Error Message",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Load with SP",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('Load with SP').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Error Message from SP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Load with SP",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "@string(activity('Load with SP').output.value[0])",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "set_watermark_value",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(\n\tactivity('read parameters').output.value[0].is_incremental,\n    if(equals(toLower(activity('read parameters').output.value[0].next_incremental_value),'load_date'),\n                    'LOAD_DATE',\n            if(startswith(toLower(activity('read parameters').output.value[0].next_incremental_value),'query:'), 'QUERY'\n            ,'Unknown')),\n            'NO_WATERMARK')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "LOAD_DATE",
									"activities": [
										{
											"name": "load_date",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "watermark_value",
												"value": {
													"value": "@if(equals(variables('container'),'jpn'),formatDateTime(convertTimeZone(adddays(pipeline().TriggerTime,-1),'UTC','Tokyo Standard Time'), 'yyyy-MM-dd HH:mm:ss'),formatDateTime(convertTimeZone(pipeline().TriggerTime,'UTC','Singapore Standard Time'), 'yyyy-MM-dd HH:mm:ss'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "QUERY",
									"activities": [
										{
											"name": "query_result",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "run_watermark_query",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "watermark_value",
												"value": {
													"value": "@activity('run_watermark_query').output.firstRow.next_value",
													"type": "Expression"
												}
											}
										},
										{
											"name": "run_watermark_query",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "@replace(activity('read parameters').output.value[0].next_incremental_value,'query:','')",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand"
													}
												},
												"dataset": {
													"referenceName": "mtd_process",
													"type": "DatasetReference"
												}
											}
										}
									]
								},
								{
									"value": "NO_WATERMARK",
									"activities": [
										{
											"name": "dummy_wait",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "UNKNOWN",
									"activities": [
										{
											"name": "Send error - unknown watermark",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "The method to decide next water mark value is not understood , in : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**FOLDER_PATH**: @{activity('read parameters').output.value[0].FOLDER_PATH} \\n\n**FILE_PREFIX**: @{activity('read parameters').output.value[0].FILE_SPEC} \\n\nPlease recheck, either correct the parameters or improve the process_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "update_watermark_if_needed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set_watermark_value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('read parameters').output.value[0].is_incremental,\nnot(empty(variables('watermark_value'))))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "save_water_mark_value",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO META_RAW.INCREMENTAL_WATERMARK \n(PROCESS_ID, WATERMARK_VALUE, LOAD_STATUS)\nVALUES\n(@{pipeline().parameters.process_id},\n'@{variables('watermark_value')}',\n'SUCCESS'\n)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Error Encountered during load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(contains(toUpper(variables('errorMessage')),'ERROR:'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "error log - load",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "Data Load Failed : @{variables('errorMessage')}",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "102",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Data load fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error log - load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Data Load Failed : @{variables('errorMessage')}",
											"type": "Expression"
										},
										"errorCode": "102"
									}
								},
								{
									"name": "Send error - data load failed",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error log - load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "Data Loading Failed : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{variables('container')} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{variables('landing_file_path')} \\n\n**FILE_NAME**: @{variables('landing_file_name')} \\n\n**ERROR**: _@{variables('errorMessage')}_",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "There is some issue with the source file as Data Loading was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{variables('container')}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{variables('landing_file_path')} \\n\n**FILE_NAME**: @{variables('landing_file_name')} \\n\n**ERROR**: _Kindly fix the file and reupload. More details on error - @{variables('errorMessage')}_",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@variables('container')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit fail - load_sp",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "if_error_batch_no_batch",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "archive_files_after_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@endswith(activity('read parameters').output.value[0].DECIDE_SOURCE,'_batchread')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "move_to_error_nonbatch",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('container')",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('landing_file_path')}/archive/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{variables('landing_file_name')}.gz",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination_Archive",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('container')",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('landing_file_path')}/error/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat(variables('landing_file_name'),'.gz')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "move_to_error_batch",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@variables('landing_file_path')",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@{variables('landing_file_name')}*",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('container')",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('landing_file_path')}/archive/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{variables('landing_file_name')}.gz",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination_Archive_Batch",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('container')",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('landing_file_path')}/error/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "extract_source_data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "parameter_replace",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set landing_file_name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set FILE_PATH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set SDL_TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set extract_month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DB_to_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"source_name": {
									"value": "@activity('read parameters').output.value[0].DECIDE_SOURCE",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								},
								"landing_file_path": {
									"value": "@variables('landing_file_path')",
									"type": "Expression"
								},
								"landing_file_name": {
									"value": "@variables('landing_file_name')",
									"type": "Expression"
								},
								"source_query": {
									"value": "@variables('ms_query')",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"target_table": {
									"value": "@activity('read parameters').output.value[0].TARGET_SCHEMA",
									"type": "Expression"
								},
								"target_schema": {
									"value": "@activity('read parameters').output.value[0].TARGET_TABLE",
									"type": "Expression"
								},
								"truncate_and_load": {
									"value": "@activity('read parameters').output.value[0].TRUNCATE_AND_LOAD",
									"type": "Expression"
								},
								"extract_month": {
									"value": "@variables('extract_month')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "truncate_target_table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "extract_source_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@if(and(equals(activity('read parameters').output.value[0].TRUNCATE_AND_LOAD, 'Y'),\nnot(endswith(activity('read parameters').output.value[0].decide_source,'dbload'))),\nconcat('truncate table  ',variables('sdl_table')),'SELECT NULL AS DUMMY')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "error log - truncate_target",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "truncate_target_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('truncate_target_table').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('truncate_target_table').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - truncate_target",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "truncate_target_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**ERROR**: _@{activity('truncate_target_table').error?.message}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "archive_files_after_load",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "load_with_load_method",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(activity('read parameters').output.value[0].load_method, 'none'),'keep',if(endswith(activity('read parameters').output.value[0].DECIDE_SOURCE,'_batchread'),'batch','single'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "batch",
									"activities": [
										{
											"name": "move_to_archive_batch",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"wildcardFolderPath": {
															"value": "@variables('landing_file_path')",
															"type": "Expression"
														},
														"wildcardFileName": {
															"value": "@{variables('landing_file_name')}*",
															"type": "Expression"
														},
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings",
														"copyBehavior": "PreserveHierarchy"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@variables('container')",
															"type": "Expression"
														},
														"directory": {
															"value": "@variables('landing_file_path')",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@variables('landing_file_name')",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination_Archive_Batch",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@variables('container')",
															"type": "Expression"
														},
														"directory": {
															"value": "@{variables('landing_file_path')}/archive/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "audit fail - move_to_archive_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_batch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_audit_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"status": "FAIL",
													"input_row_count": 0,
													"output_row_count": 0,
													"jobname": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"message": {
														"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
														"type": "Expression"
													},
													"runid": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"pipeline_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error log - move_to_archive_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_batch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('move_to_archive_batch').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('move_to_archive_batch').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - move_to_archive_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_batch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**FOLDER_PATH**: @{variables('landing_file_path')} \\n\n**ERROR**: _@{activity('move_to_archive_batch').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								},
								{
									"value": "single",
									"activities": [
										{
											"name": "move_to_archive_nonbatch",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@variables('container')",
															"type": "Expression"
														},
														"directory": {
															"value": "@variables('landing_file_path')",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@variables('landing_file_name')",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination_Archive",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@variables('container')",
															"type": "Expression"
														},
														"directory": {
															"value": "@{variables('landing_file_path')}/archive/@{formatDateTime(convertTimeZone(utcNow(), 'UTC', 'Singapore Standard Time'),'yyyy/MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@concat(variables('landing_file_name'),'.gz')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "audit fail - move_to_archive_no_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_nonbatch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_audit_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"status": "FAIL",
													"input_row_count": 0,
													"output_row_count": 0,
													"jobname": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"message": {
														"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
														"type": "Expression"
													},
													"runid": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"pipeline_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error log - move_to_archive_no_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_nonbatch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('move_to_archive_nonbatch').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('move_to_archive_nonbatch').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - move_to_archive_no_batch",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "move_to_archive_nonbatch",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**FOLDER_PATH**: @{variables('landing_file_path')} \\n\n**ERROR**: _@{activity('move_to_archive_nonbatch').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "delete_after_archive",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "archive_files_after_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('read parameters').output.value[0].load_method, 'none'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "delete_original_file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('container')",
													"type": "Expression"
												},
												"directory": {
													"value": "@variables('landing_file_path')",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@variables('landing_file_name')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{variables('landing_file_name')}*",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Set extract_month",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "extract_month",
							"value": {
								"value": "@activity('read parameters').output.value[0].extract_month",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"container": {
						"type": "String"
					},
					"landing_file_path": {
						"type": "String"
					},
					"landing_file_name": {
						"type": "String"
					},
					"sdl_table": {
						"type": "String"
					},
					"stage": {
						"type": "String"
					},
					"ms_query": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String",
						"defaultValue": "NO"
					},
					"watermark_value": {
						"type": "String"
					},
					"trueval": {
						"type": "String"
					},
					"extract_month": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "Ingestion/Sources"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:47:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/DB_to_ADLS')]",
				"[concat(variables('factoryId'), '/datasets/BinarySource')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination_Archive')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination_Archive_Batch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_SYSTEM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'filename'\" AS filename,\n\"'adls_path'\" as adls_path,\n\"'container'\" AS container,\n\"'filesystemName'\" AS filesystemName\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'filename',\n'adls_path',\n'container',\n'filesystemName'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Switch_FileSystem",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('read parameters').output.value[0].FILESYSTEMNAME",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sawswfgsgpw0002",
									"activities": [
										{
											"name": "FileSystem_to_ADLS",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "file_system_source",
													"type": "DatasetReference",
													"parameters": {
														"File_Name": {
															"value": "@activity('read parameters').output.value[0].FILENAME",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@activity('read parameters').output.value[0].CONTAINER",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].ADLS_PATH}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@activity('read parameters').output.value[0].FILENAME",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "FileSystem_to_ADLS: @{activity('FileSystem_to_ADLS').error?.errorCode} @{activity('FileSystem_to_ADLS').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "error log - move sql_server_to_alds",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('FileSystem_to_ADLS').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('FileSystem_to_ADLS').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - sql_server_to_alds",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].ADLS_PATH} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].FILENAME} \\n\n**ERROR**: _@{activity('FileSystem_to_ADLS').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								},
								{
									"value": "sawsbtasgpw0000",
									"activities": [
										{
											"name": "error_copy1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS_th",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "FileSystem_to_ADLS: @{activity('FileSystem_to_ADLS_th').error?.errorCode} @{activity('FileSystem_to_ADLS_th').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "error log - FileSystem_to_ADLS_th",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS_th",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('FileSystem_to_ADLS_th').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('FileSystem_to_ADLS_th').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - FileSystem_to_ADLS_th",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS_th",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].ADLS_PATH} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].FILENAME} \\n\n**ERROR**: _@{activity('FileSystem_to_ADLS_th').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "FileSystem_to_ADLS_th",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "file_system_source_th",
													"type": "DatasetReference",
													"parameters": {
														"input_folder": "@concat(formatDateTime(convertTimeZone(utcnow(), 'UTC', 'India Standard Time'), 'yyyy-MM-dd'), '_D')"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "File_system_dest_th",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].CONTAINER",
														"folder_path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].ADLS_PATH}/@{concat(formatDateTime(convertTimeZone(utcnow(), 'UTC', 'India Standard Time'), 'yyyy-MM-dd'), '_D')}/@{concat(formatDateTime(convertTimeZone(utcnow(), 'UTC', 'India Standard Time'), 'yyyy-MM-dd'), '_D')}",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "adls_to_adls_zip",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "FileSystem_to_ADLS_th",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "File_system_dest_th",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].CONTAINER",
														"folder_path": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].ADLS_PATH}/@{concat(formatDateTime(convertTimeZone(utcnow(), 'UTC', 'India Standard Time'), 'yyyy-MM-dd'), '_D')}"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "File_system_dest_th_zip",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].CONTAINER",
														"folder_path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].ADLS_PATH}",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Delete1",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "adls_to_adls_zip",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "File_system_dest_th",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].CONTAINER",
														"folder_path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].ADLS_PATH}/@{concat(formatDateTime(convertTimeZone(utcnow(), 'UTC', 'India Standard Time'), 'yyyy-MM-dd'), '_D')}",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										},
										{
											"name": "error adls_to_adls_zip",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "adls_to_adls_zip",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "FileSystem_to_ADLS: @{activity('adls_to_adls_zip').error?.errorCode} @{activity('adls_to_adls_zip').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "error log - adls_to_adls_zip",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "adls_to_adls_zip",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('adls_to_adls_zip').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('adls_to_adls_zip').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - adls_to_adls_zip",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "adls_to_adls_zip",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].ADLS_PATH} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].FILENAME} \\n\n**ERROR**: _@{activity('adls_to_adls_zip').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail - SFTP Source",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Set error unknown file system",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail - file system  Source Unknown",
										"errorCode": "404"
									}
								},
								{
									"name": "Set error unknown file system",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse1",
										"value": " SFTP Source Unknown"
									}
								}
							]
						}
					},
					{
						"name": "audit fail - Switch_FileSystem",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch_FileSystem",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch_FileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"getFiles": {
						"type": "String"
					},
					"sheet_names": {
						"type": "Array"
					},
					"emptyArray": {
						"type": "Array",
						"defaultValue": []
					},
					"errorResponse1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/file_system_source')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/file_system_source_th')]",
				"[concat(variables('factoryId'), '/datasets/File_system_dest_th')]",
				"[concat(variables('factoryId'), '/datasets/File_system_dest_th_zip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reverse_SQL_Sync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select SNOWFLAKE_STAGE,IS_INCREMENTAL,WATERMARK_VALUE,\n\"'container'\" AS container,\n\"'landing_file_path'\" AS landing_file_path,\n\"'landing_file_name'\" AS landing_file_name,\n\"'target_schema_table'\" AS target_schema_table,\n\"'source_schema_table'\" AS source_schema_table,\n\"'source_query'\" AS source_query,\n\"'truncate_and_load'\" AS truncate_and_load,\n\"'decide_source'\" AS decide_source,\nIFNULL(\"'truncate_source'\",'N') AS truncate_source,\n\"'trunc_source_schema_table'\" AS trunc_source_schema_table\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT, IS_INCREMENTAL,WATERMARK_VALUE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS P USING (PARAMETER_GROUP_ID)\nLEFT JOIN (SELECT PROCESS_ID,WATERMARK_VALUE FROM META_RAW.INCREMENTAL_WATERMARK\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND LOAD_STATUS = 'SUCCESS'\nQUALIFY ROW_NUMBER() OVER(PARTITION BY PROCESS_ID ORDER BY INSERT_TIMESTAMP DESC) = 1) I USING(PROCESS_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'container',\n'landing_file_path',\n'landing_file_name',\n'target_schema_table',\n'source_schema_table',\n'source_query',\n'truncate_and_load',\n'decide_source',\n'truncate_source',\n'trunc_source_schema_table'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Switch_Source_get_source_count",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If Truncate Target",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@{activity('read parameters').output.value[0].decide_source}",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "dna_core",
									"activities": [
										{
											"name": "Script Source Count Core",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "SELECT count(*) AS \"count\" FROM @{activity('read parameters').output.value[0].source_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set sourceCount",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Script Source Count Core",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sourceCount",
												"value": {
													"value": "@int(activity('Script Source Count Core').output.resultSets[0].rows[0].count)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Get flagDataPresent",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set sourceCount",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@{activity('read parameters').output.value[0].source_query} LIMIT 2;",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set sourceCount2",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get flagDataPresent",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sourceCount2",
												"value": {
													"value": "@activity('Get flagDataPresent').output.resultSetCount",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "dna_load",
									"activities": [
										{
											"name": "Script Source Count Load",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "SELECT count(*) AS \"count\" FROM @{activity('read parameters').output.value[0].source_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set sourceCount load",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Script Source Count Load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sourceCount",
												"value": {
													"value": "@int(activity('Script Source Count Load').output.resultSets[0].rows[0].count)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Get flagDataPresent load",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set sourceCount load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@{activity('read parameters').output.value[0].source_query} LIMIT 2;",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set sourceCount2 load",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get flagDataPresent load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "sourceCount2",
												"value": {
													"value": "@activity('Get flagDataPresent load').output.resultSetCount",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail - Unknown Source",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Set error unknown source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@variables('errorResponse1')",
											"type": "Expression"
										},
										"errorCode": "404"
									}
								},
								{
									"name": "Set error unknown source",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse1",
										"value": "Fail - Source Unknown"
									}
								}
							]
						}
					},
					{
						"name": "Switch Source",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Switch_Source_get_source_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(and(greater(variables('sourceCount'),0),greater(variables('sourceCount2'),0)),activity('read parameters').output.value[0].decide_source,'noDataLoad')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "dna_core",
									"activities": [
										{
											"name": "Copy data dna core to adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "@{activity('read parameters').output.value[0].source_query}",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand",
														"additionalCopyOptions": {
															"MAX_FILE_SIZE": "524288000"
														}
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DNA_CORE_Dataset",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "csv_blob_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@{activity('read parameters').output.value[0].container}",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
															"type": "Expression"
														},
														"file": {
															"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move dna_core_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data dna core to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Copy data dna core to adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Copy data dna core to adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mds_sf_core_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data dna core to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while copying data from snowflake core to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data dna core to adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes",
													"container": {
														"value": "@{activity('read parameters').output.value[0].container}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error_copying_dna_core",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Copy data dna core to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "snowflake_core_to_adls: @{activity('Copy data dna core to adls').error?.errorCode} @{activity('Copy data dna core to adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "Copy data adls to sql",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy data dna core to adls",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "SqlServerSink",
													"writeBehavior": "insert",
													"sqlWriterUseTableLock": false
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sql_server_sink_soh_delim",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@{activity('read parameters').output.value[0].container}",
															"type": "Expression"
														},
														"path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
															"type": "Expression"
														},
														"file": {
															"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "SqlServerSink",
													"type": "DatasetReference",
													"parameters": {
														"schema": {
															"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[0]",
															"type": "Expression"
														},
														"table": {
															"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[1]",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Script Target Count post sync",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Execute Archival",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "File_Archival",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"sequence_id": {
														"value": "@pipeline().parameters.sequence_id",
														"type": "Expression"
													},
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"isError": "No",
													"container": {
														"value": "@activity('read parameters').output.value[0].container",
														"type": "Expression"
													},
													"directory": {
														"value": "@{activity('read parameters').output.value[0].landing_file_path}",
														"type": "Expression"
													},
													"sourceFile": {
														"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
														"type": "Expression"
													},
													"sheetNames": {
														"value": "@variables('emptyArray')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error log - move adls to sql",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Copy data adls to sql').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Copy data adls to sql').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mds_adls_to_sql",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while copying data from adls to sql : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data adls to sql').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes",
													"container": {
														"value": "@{activity('read parameters').output.value[0].container}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error_copying_adls_to_sql",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "adls_to_sql: @{activity('Copy data adls to sql').error?.errorCode} @{activity('Copy data adls to sql').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "Execute Archival_error",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "File_Archival",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"sequence_id": {
														"value": "@pipeline().parameters.sequence_id",
														"type": "Expression"
													},
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"isError": "Yes",
													"container": {
														"value": "@activity('read parameters').output.value[0].container",
														"type": "Expression"
													},
													"directory": {
														"value": "@{activity('read parameters').output.value[0].landing_file_path}",
														"type": "Expression"
													},
													"sourceFile": {
														"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
														"type": "Expression"
													},
													"sheetNames": {
														"value": "@variables('emptyArray')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "dna_load",
									"activities": [
										{
											"name": "Copy data dna load to adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "@{activity('read parameters').output.value[0].source_query}",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand",
														"additionalCopyOptions": {
															"MAX_FILE_SIZE": "524288000"
														}
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DNA_LOAD_Dataset",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "csv_blob_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@{activity('read parameters').output.value[0].container}",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
															"type": "Expression"
														},
														"file": {
															"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move dna_load_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data dna load to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Copy data dna load to adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Copy data dna load to adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mds_sf_load_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data dna load to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while copying data from snowflake core to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data dna load to adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes",
													"container": {
														"value": "@{activity('read parameters').output.value[0].container}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error_copying_dna_load",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Copy data dna load to adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "snowflake_load_to_adls: @{activity('Copy data dna load to adls').error?.errorCode} @{activity('Copy data dna load to adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "Copy data adls to sql 2",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy data dna load to adls",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "SqlServerSink",
													"writeBehavior": "insert",
													"sqlWriterUseTableLock": false
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sql_server_sink_soh_delim",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@{activity('read parameters').output.value[0].container}",
															"type": "Expression"
														},
														"path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
															"type": "Expression"
														},
														"file": {
															"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "SqlServerSink",
													"type": "DatasetReference",
													"parameters": {
														"schema": {
															"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[0]",
															"type": "Expression"
														},
														"table": {
															"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[1]",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Script Target Count post sync 2",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Execute Archival 2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "File_Archival",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"sequence_id": {
														"value": "@pipeline().parameters.sequence_id",
														"type": "Expression"
													},
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"isError": "No",
													"container": {
														"value": "@activity('read parameters').output.value[0].container",
														"type": "Expression"
													},
													"directory": {
														"value": "@{activity('read parameters').output.value[0].landing_file_path}",
														"type": "Expression"
													},
													"sourceFile": {
														"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
														"type": "Expression"
													},
													"sheetNames": {
														"value": "@variables('emptyArray')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error log - move adls to sql 2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Copy data adls to sql 2').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Copy data adls to sql 2').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mds_adls_to_sql 2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while copying data from adls to sql : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data adls to sql 2').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes",
													"container": {
														"value": "@{activity('read parameters').output.value[0].container}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "error_copying_adls_to_sql 2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "adls_to_sql: @{activity('Copy data adls to sql 2').error?.errorCode} @{activity('Copy data adls to sql 2').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "Execute Archival_error_2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data adls to sql 2",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "File_Archival",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"usecase_id": {
														"value": "@pipeline().parameters.usecase_id",
														"type": "Expression"
													},
													"sequence_id": {
														"value": "@pipeline().parameters.sequence_id",
														"type": "Expression"
													},
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"isError": "Yes",
													"container": {
														"value": "@activity('read parameters').output.value[0].container",
														"type": "Expression"
													},
													"directory": {
														"value": "@{activity('read parameters').output.value[0].landing_file_path}",
														"type": "Expression"
													},
													"sourceFile": {
														"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
														"type": "Expression"
													},
													"sheetNames": {
														"value": "@variables('emptyArray')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "noDataLoad",
									"activities": [
										{
											"name": "Wait1",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Script Target Count",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch source for truncate source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch Source",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail unknown source",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch_Source_get_source_count",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Truncate Target",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Script Target Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('read parameters').output.value[0].truncate_and_load,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Script Truncate Source",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Switch source for truncate source",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Switch Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(activity('read parameters').output.value[0].truncate_source,'Y'),activity('read parameters').output.value[0].decide_source,'no_truncate_source')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "dna_core",
									"activities": [
										{
											"name": "Script Truncate Source core",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].trunc_source_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										}
									]
								},
								{
									"value": "dna_load",
									"activities": [
										{
											"name": "Script Truncate Source load",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].trunc_source_schema_table}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										}
									]
								},
								{
									"value": "no_truncate_source",
									"activities": [
										{
											"name": "Wait no_truncate_source",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					}
				},
				"variables": {
					"errorResponse1": {
						"type": "String"
					},
					"sourceCount": {
						"type": "Integer",
						"defaultValue": 0
					},
					"emptyArray": {
						"type": "Array",
						"defaultValue": []
					},
					"sourceCount2": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Ingestion/Sources"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:47:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/DNA_CORE_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/csv_blob_sink')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/sql_server_sink_soh_delim')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerSink')]",
				"[concat(variables('factoryId'), '/pipelines/File_Archival')]",
				"[concat(variables('factoryId'), '/datasets/DNA_LOAD_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tableau')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger Tableau Refresh Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "REFRESH STARTED SEPARATELY",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger Tableau Refresh Status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fetch uid from Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set refreshType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"url": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-prod-uid?api-version=7.0",
							"connectVia": {
								"referenceName": "adfiradbplt002",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Sign In Tableau To Get Auth Token",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:05:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "<tsRequest><credentials name=\"@{activity('Fetch uid from Vault').output.value}\" password=\"@{activity('Fetch pwd from Vault').output.value}\"><site contentUrl=\"@{activity('read parameters').output.value[0].contentUrl}\"/></credentials></tsRequest>",
									"type": "Expression"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "auth/signin"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseSignIn.json"
								}
							}
						]
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'contentUrl'\" AS contentUrl,\n\"'tableauSourceName'\" AS tableauSourceName,\n\"'waitTime'\" AS waitTime,\n\"'refreshType'\" AS refreshType,\n\"'container'\" AS container,\nIFNULL(\"'isSuccessNotification'\",'N') AS isSuccessNotification\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'contentUrl',\n'tableauSourceName',\n'waitTime',\n'refreshType',\n'container',\n'isSuccessNotification'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Fetch id",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/xml",
									"x-tableau-auth": {
										"value": "@activity('Read token and siteId').output.value[0].credentials.token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "sites/@{activity('Read token and siteId').output.value[0].credentials.site.id}/@{variables('refreshType')}s?filter=name:eq:@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseDetails.json"
								}
							}
						]
					},
					{
						"name": "Read token and siteId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseSignIn.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Read Details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseDetails.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Hit Refresh",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "<tsRequest></tsRequest>",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/xml",
									"x-tableau-auth": {
										"value": "@activity('Read token and siteId').output.value[0].credentials.token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@if(equals(variables('refreshType'),'datasource'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].datasources.datasource[0].id,'/refresh'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].workbooks.workbook[0].id,'/refresh'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseRefreshInitial.json"
								}
							}
						]
					},
					{
						"name": "Read Refresh Initail Response",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Hit Refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseRefreshInitial.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "error Fetching uid from Vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch uid from Vault').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch uid from Vault').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Fetching Auth Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Sign In Tableau To Get Auth Token').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Sign In Tableau To Get Auth Token').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Reading Auth Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read token and siteId').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read token and siteId').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Fetching datasource id",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch id').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch id').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Reading Datasource details",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read Details').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read Details').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error triggering Refresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Hit Refresh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Hit Refresh').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Hit Refresh').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error reading refresh initial resp",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read Refresh Initail Response').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read Refresh Initail Response').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error triggering tab refresh status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Trigger Tableau Refresh Status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Trigger Tableau Refresh Status').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Trigger Tableau Refresh Status').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_7",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_6",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Hit Refresh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_5",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set refreshType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "refreshType",
							"value": {
								"value": "@{activity('read parameters').output.value[0].refreshType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger Tableau Refresh Status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Tableau Refresh Status",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"SiteId": {
									"value": "@{activity('Read token and siteId').output.value[0].credentials.site.id}",
									"type": "Expression"
								},
								"JobId": {
									"value": "@{activity('Read Refresh Initail Response').output.value[0].job.id}",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"waitTime": {
									"value": "@{activity('read parameters').output.value[0].waitTime}",
									"type": "Expression"
								},
								"tableauSourceName": {
									"value": "@{activity('read parameters').output.value[0].tableauSourceName}",
									"type": "Expression"
								},
								"parentFolder": {
									"value": "@variables('parentFolder')",
									"type": "Expression"
								},
								"container": {
									"value": "@{activity('read parameters').output.value[0].container}",
									"type": "Expression"
								},
								"token": {
									"value": "@activity('Read token and siteId').output.value[0].credentials.token",
									"type": "Expression"
								},
								"isSuccessNotification": {
									"value": "@{activity('read parameters').output.value[0].isSuccessNotification}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch pwd from Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set refreshType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"url": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-prod-pwd?api-version=7.0",
							"connectVia": {
								"referenceName": "adfiradbplt002",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "error Fetching pwd from Vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch pwd from Vault').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch pwd from Vault').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification pwd vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching tableau password from vault to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch pwd from Vault').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification uid vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching tableau uid from vault to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch uid from Vault').error?.message}_\n\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification signin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error signing-in to tableau to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Sign In Tableau To Get Auth Token').error?.message}_\n\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification fetching id",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching id for @{variables('refreshType')} (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch id').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification hitting refresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Hit Refresh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error triggering refresh for @{variables('refreshType')} (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Hit Refresh').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"output": {
						"type": "String"
					},
					"token": {
						"type": "String"
					},
					"run_status": {
						"type": "Integer",
						"defaultValue": 0
					},
					"refreshType": {
						"type": "String"
					},
					"parentFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
				"[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/Tableau Refresh Status')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tableau_View_Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign Out",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_8",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy data to windows shared",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fetch uid from Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"url": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-prod-uid?api-version=7.0",
							"connectVia": {
								"referenceName": "adfiradbplt002",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Sign In Tableau To Get Auth Token",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:05:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "<tsRequest><credentials name=\"@{activity('Fetch uid from Vault').output.value}\" password=\"@{activity('Fetch pwd from Vault').output.value}\"><site contentUrl=\"@{activity('read parameters').output.value[0].contentUrl}\"/></credentials></tsRequest>",
									"type": "Expression"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "auth/signin"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseSignIn.json"
								}
							}
						]
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'contentUrl'\" AS contentUrl,\n\"'tableauViewName'\" AS tableauViewName,\n\"'container'\" AS container,\nIFNULL(\"'isSuccessNotification'\",'N') AS isSuccessNotification\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'contentUrl',\n'tableauViewName',\n'container',\n'isSuccessNotification'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Fetch id",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/xml",
									"x-tableau-auth": {
										"value": "@activity('Read token and siteId').output.value[0].credentials.token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "sites/@{activity('Read token and siteId').output.value[0].credentials.site.id}/views?filter=name:eq:@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseDetails.json"
								}
							}
						]
					},
					{
						"name": "Read token and siteId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseSignIn.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Read Details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseDetails.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Query Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "<tsRequest></tsRequest>",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/xml",
									"x-tableau-auth": {
										"value": "@activity('Read token and siteId').output.value[0].credentials.token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/views/',activity('Read Details').output.value[0].views.view[0].id,'/data')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseRefreshInitial.json"
								}
							}
						]
					},
					{
						"name": "Read Refresh Initail Response",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Query Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": "tableauResponseRefreshInitial.json"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "error Fetching uid from Vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch uid from Vault').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch uid from Vault').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Fetching Auth Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Sign In Tableau To Get Auth Token').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Sign In Tableau To Get Auth Token').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Reading Auth Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read token and siteId').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read token and siteId').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Fetching id",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch id').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch id').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Reading details",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read Details').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read Details').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error querying data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Query Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Query Data').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Query Data').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error reading refresh initial resp",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Read Refresh Initail Response').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Read Refresh Initail Response').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error writing data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy data to windows shared",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('copy data to windows shared').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('copy data to windows shared').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_7",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_6",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Query Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_5",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read token and siteId",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch pwd from Vault",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"url": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-prod-pwd?api-version=7.0",
							"connectVia": {
								"referenceName": "adfiradbplt002",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "error Fetching pwd from Vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch pwd from Vault').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch pwd from Vault').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification pwd vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch pwd from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching tableau password from vault to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch pwd from Vault').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification uid vault",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch uid from Vault",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching tableau uid from vault to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch uid from Vault').error?.message}_\n\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification signin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sign In Tableau To Get Auth Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error signing-in to tableau to refresh the tableau source (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Sign In Tableau To Get Auth Token').error?.message}_\n\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification fetching id",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch id",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching id for @{variables('refreshType')} (@{activity('read parameters').output.value[0].tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch id').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Send Error notification querying data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Query Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching extract for view (@{activity('read parameters').output.value[0].tableauViewName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Query Data').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "copy data to windows shared",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Read Refresh Initail Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Send Error notification writing data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy data to windows shared",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error exporting extract for view (@{activity('read parameters').output.value[0].tableauViewName}) to Shared windows path : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Query Data').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Sign Out",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy data to windows shared",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:05:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"additionalHeaders": {
									"x-tableau-auth": {
										"value": "@activity('Read token and siteId').output.value[0].credentials.token",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "auth/signout"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@{activity('read parameters').output.value[0].container}",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauViewName}",
										"type": "Expression"
									},
									"tempFileName": {
										"value": "tableauResponseSignOut.json",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"output": {
						"type": "String"
					},
					"token": {
						"type": "String"
					},
					"run_status": {
						"type": "Integer",
						"defaultValue": 0
					},
					"refreshType": {
						"type": "String"
					},
					"parentFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems/Extras_NotInUse"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
				"[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Export')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch db source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'db_source'\" AS db_source,\n\"'target_folder_path'\" AS target_folder_path,\n\"'target_file_name'\" AS target_file_name,\n\"'target_file_extn'\" AS target_file_extn,\n\"'unloading_query'\" AS unloading_query,\n\"'container'\" AS container,\nIFNULL(\"'quotesEnclosed'\",'N') AS quotesEnclosed,\nIFNULL(\"'headerNeeded'\",'Y') AS headerNeeded,\nIFNULL(\"'source_update_query'\",'Select 1') AS source_update_query\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'db_source',\n'target_folder_path',\n'target_file_name',\n'target_file_extn',\n'unloading_query',\n'container',\n'quotesEnclosed',\n'headerNeeded',\n'source_update_query'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch db source",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@{activity('read parameters').output.value[0].db_source}",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "dna_core",
									"activities": [
										{
											"name": "error log - move dna_core_to_adls csv",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Export Dna Core Data into ADLS csv",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Export Dna Core Data into ADLS csv').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Export Dna Core Data into ADLS csv').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - Export Dna Core Data into ADLS csv",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Export Dna Core Data into ADLS csv",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**unloading_query**: @{activity('read parameters').output.value[0].unloading_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{activity('read parameters').output.value[0].target_file_name} \\n\n**ERROR**: _@{activity('Export Dna Core Data into ADLS csv').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "Export Dna Core Data into ADLS csv error",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Export Dna Core Data into ADLS csv",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "Error While Exporting Dna Core Data into ADLS: @{activity('Export Dna Core Data into ADLS csv').error?.errorCode} @{activity('Export Dna Core Data into ADLS csv').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										},
										{
											"name": "Export Dna Core Data into ADLS csv",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "@{activity('read parameters').output.value[0].unloading_query}",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand",
														"additionalCopyOptions": {
															"MAX_FILE_SIZE": "524288000",
															"OVERWRITE": "TRUE"
														},
														"additionalFormatOptions": {
															"NULL_IF": "()",
															"EMPTY_FIELD_AS_NULL": "FALSE"
														}
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DNA_CORE_Dataset",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "data_export_csv_tsv_blob_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@{activity('read parameters').output.value[0].container}",
															"type": "Expression"
														},
														"directory": {
															"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
															"type": "Expression"
														},
														"file": {
															"value": "@{activity('read parameters').output.value[0].target_file_name}.@{activity('read parameters').output.value[0].target_file_extn}",
															"type": "Expression"
														},
														"quotesEnclosed": {
															"value": "@activity('read parameters').output.value[0].quotesEnclosed",
															"type": "Expression"
														},
														"headerNeeded": {
															"value": "@activity('read parameters').output.value[0].headerNeeded",
															"type": "Expression"
														},
														"delimeter": {
															"value": "@if(equals(activity('read parameters').output.value[0].target_file_extn,'csv'),',','\\t')",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Script_on_source",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Export Dna Core Data into ADLS csv",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@{activity('read parameters').output.value[0].source_update_query}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Unknown source",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Unknown source type: @{activity('read parameters').output.value[0].db_source}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch db source",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"parentFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/DNA_CORE_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/data_export_csv_tsv_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mbox_File_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'prefix_flag'\" AS prefix_flag,\n\"'suffix_flag'\" AS suffix_flag,\n\"'split_file'\" AS split_file,\n\"'target_folder_path'\" AS target_folder_path,\n\"'target_file_name'\" AS target_file_name,\n\"'source_folder_path'\" AS source_folder_path,\n\"'source_file_name'\" AS source_file_name,\n\"'file_extn'\" AS file_extn,\n\"'container'\" AS container,\n\"'encoding'\" AS encoding,\nIFNULL(\"'source_update_query'\",'N') AS source_update_query\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'prefix_flag',\n'suffix_flag',\n'split_file',\n'target_folder_path',\n'target_file_name',\n'source_folder_path',\n'source_file_name',\n'file_extn',\n'container',\n'encoding',\n'source_update_query'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If prefix or suffix",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set dateCYYMMDD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('read parameters').output.value[0].prefix_flag,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set fileNameWithDateSuffix",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameWithDate",
										"value": {
											"value": "@{activity('read parameters').output.value[0].target_file_name}_@{variables('dateCCYYMMDD')}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set fileNameWithDatePrefix",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameWithDate",
										"value": {
											"value": "@{variables('dateCCYYMMDD')}_@{activity('read parameters').output.value[0].target_file_name}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set dateCYYMMDD",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "dateCCYYMMDD",
							"value": {
								"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddhhmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch For Encoding",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ifFileExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(not(activity('ifFileExists').output.exists),'do_nothing', if(equals(activity('read parameters').output.value[0].split_file,'Y'),'splitCase',activity('read parameters').output.value[0].encoding))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "splitCase",
									"activities": [
										{
											"name": "Move File Splitted",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Backup with new name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"maxRowsPerFile": 20000,
														"fileNamePrefix": "",
														"quoteAllText": true,
														"fileExtension": {
															"value": ".@{activity('read parameters').output.value[0].file_extn}",
															"type": "Expression"
														}
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "Mbox_File_Copy_adls",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@activity('read parameters').output.value[0].container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
															"type": "Expression"
														},
														"encoding": "UTF-8",
														"delimeter": {
															"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "Mbox_File_Copy_adls_split_file",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].container",
														"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
														"encoding": "@activity('read parameters').output.value[0].encoding",
														"delimeter": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')"
													}
												}
											]
										},
										{
											"name": "Backup with new name",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AdlsFileDataset",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@activity('read parameters').output.value[0].container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AdlsFileDataset",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].container",
														"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
														"fileName": {
															"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Delete old name file",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Backup with new name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "AdlsFileDataset",
													"type": "DatasetReference",
													"parameters": {
														"container": "@activity('read parameters').output.value[0].container",
														"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
														"fileName": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}"
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										},
										{
											"name": "error log - Move File Splitted",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Move File Splitted",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('Move File Splitted').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('Move File Splitted').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - Move File Splitted",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Move File Splitted",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while moving file from source folder in adls to target folder in adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move File Splitted').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "Move File Splitted error",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Move File Splitted",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "Issues while moving file from source folder in adls to target folder in adls : @{activity('Move File Splitted').error?.errorCode} @{activity('Move File Splitted').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "do_nothing",
									"activities": [
										{
											"name": "Wait1",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Move File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Mbox_File_Copy_adls",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												},
												"encoding": "UTF-8",
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Mbox_File_Copy_adls",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												},
												"encoding": "@activity('read parameters').output.value[0].encoding",
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - Move File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Move File').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Move File').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - Move File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while moving file from source folder in adls to target folder in adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move File').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "Move File error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Move File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Issues while moving file from source folder in adls to target folder in adls : @{activity('Move File').error?.errorCode} @{activity('Move File').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If source_update_needed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If source_update_needed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Fail_FileCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch For Encoding",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If source_update_needed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Archiving_Deleting",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(equals(activity('read parameters').output.value[0].source_update_query,'N')),activity('ifFileExists').output.exists)\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_Update_Source_Query",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@activity('read parameters').output.value[0].source_update_query",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "ifFileExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "If prefix or suffix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adls_src",
								"type": "DatasetReference",
								"parameters": {
									"src_path": {
										"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
										"type": "Expression"
									},
									"src_container": {
										"value": "@activity('read parameters').output.value[0].container",
										"type": "Expression"
									},
									"src_filename": {
										"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Archiving_Deleting",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch For Encoding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('ifFileExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Move to Achive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Mbox_File_Copy_adls",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
													"type": "Expression"
												},
												"encoding": "UTF-8",
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Mbox_File_Copy_adls",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}/archive/@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
													"type": "Expression"
												},
												"encoding": "UTF-8",
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete source",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move to Achive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AdlsFileDataset",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
												"fileName": {
													"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "error log - archive file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move to Achive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Move to Achive').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Move to Achive').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Audit_Fail_archiving",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move to Achive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - Move File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move to Achive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while archiving file : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path}/archive/@{variables('dateCCYYMMDD')} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move to Achive').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"parentFolder": {
						"type": "String"
					},
					"fileNameWithDate": {
						"type": "String"
					},
					"dateCCYYMMDD": {
						"type": "String"
					},
					"chno": {
						"type": "String"
					},
					"appendedList": {
						"type": "String"
					},
					"temp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/adls_src')]",
				"[concat(variables('factoryId'), '/datasets/Mbox_File_Copy_adls')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/AdlsFileDataset')]",
				"[concat(variables('factoryId'), '/datasets/Mbox_File_Copy_adls_split_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DCL_ContactHist_Unload_MBox')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'tableName'\" AS tableName,\n\"'schemaName'\" AS schemaName,\n\"'excludedColumns'\" AS excludedColumns,\n\"'target_folder_path'\" AS target_folder_path,\n\"'sftp_folder_path'\" AS sftp_folder_path,\n\"'fileExtn'\" AS fileExtn,\n\"'container'\" AS container,\n\"'zip_archive_path'\" AS zip_archive_path\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'tableName',\n'schemaName',\n'excludedColumns',\n'target_folder_path',\n'sftp_folder_path',\n'fileExtn',\n'container',\n'zip_archive_path'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch necessary columns",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select\n\tcase\n\t\twhen lower(column_name) = '顧客id' then 'JPDCLEDW_INTEGRATION.encryption(顧客ID)  as 顧客ID '\n\t\telse column_name \n\tend as column_name\nfrom\n\t(select\tcolumn_name, ordinal_position\tfrom  INFORMATION_SCHEMA.COLUMNS WHERE table_name = '@{activity('read parameters').output.value[0].tableName}' and lower(column_name) not in (@{activity('read parameters').output.value[0].excludedColumns}) order by\tordinal_position asc )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Fetch Distinct ChNo",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Append all column names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "SELECT distinct \"コンタクト履歴番号\" from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName}",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "For every chno",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Distinct ChNo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch Distinct ChNo').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set chno",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set date_yyyyMMddHHmmss",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chno",
										"value": {
											"value": "@item().コンタクト履歴番号",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Fetch Data for every chno",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set chno",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "select @{replace(variables('appendedList'),',,','')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where \"コンタクト履歴番号\" ='@{variables('chno')}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "create csv",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Fetch Data for every chno",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "select @{replace(variables('appendedList'),',,','')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where \"コンタクト履歴番号\" ='@{variables('chno')}'",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand",
												"additionalCopyOptions": {
													"MAX_FILE_SIZE": "524288000",
													"OVERWRITE": "TRUE"
												},
												"additionalFormatOptions": {
													"NULL_IF": "()",
													"EMPTY_FIELD_AS_NULL": "FALSE"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DNA_CORE_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "data_export_csv_tsv_blob_sink",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"file": "@{variables('date_yyyyMMddHHmmss')}.@{activity('read parameters').output.value[0].fileExtn}",
												"quotesEnclosed": "N",
												"headerNeeded": "Y",
												"delimeter": ","
											}
										}
									]
								},
								{
									"name": "Set date_yyyyMMddHHmmss",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "date_yyyyMMddHHmmss",
										"value": {
											"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddHHmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "error log - create csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "create csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('create csv').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('create csv').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error -create csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "create csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while writing csv file into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_yyyyMMddHHmmss')}.@{activity('read parameters').output.value[0].fileExtn} \\n\n**SOURCE_QUERY**: select \"コンタクト履歴番号\" as chno @{variables('appendedList')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where chno='@{variables('chno')}' \\n\n**ERROR**: _@{activity('create csv').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "create csv error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "create csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While writing csv into ADLS: @{activity('create csv').error?.errorCode} @{activity('create csv').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						}
					},
					{
						"name": "Append all column names",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch necessary columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch necessary columns').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set appendedList",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set temp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "appendedList",
										"value": {
											"value": "@if(contains(item().COLUMN_NAME,'JPDCLEDW_INTEGRATION.encryption(顧客ID)  as 顧客ID'),concat(variables('temp'),', \"顧客id\"'),concat(variables('temp'),', ' ,'\"',item().COLUMN_NAME,'\"'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set temp",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "temp",
										"value": {
											"value": "@variables('appendedList')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Files Generated",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For every chno",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Fetch Distinct ChNo').output.resultSets[0].rowCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "zip files",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set date for zip",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AdlsCsvForZippedSrc",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"folder": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AdlsCsvForZippedSink",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{variables('date_for_zip')}.zip",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "archive zip file",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "move to sftp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AdlsCsvForZippedSink",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{variables('date_for_zip')}.zip",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AdlsCsvForZippedSink",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].zip_archive_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{variables('date_for_zip')}.zip",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete csv files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "zip files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AdlsCsvForZippedSrc",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Set date for zip",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "date_for_zip",
										"value": {
											"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddHHmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete archived zip",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "archive zip file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AdlsCsvForZippedSrc",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{variables('date_for_zip')}.zip",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "error log - zip files",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "zip files",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('zip files').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('zip files').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - zip files",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "zip files",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while zipping csv files into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv \\n\n**ERROR**: _@{activity('zip files').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "zip files error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "zip files",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While zipping csv files into ADLS: @{activity('zip files').error?.errorCode} @{activity('zip files').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "error log - move to sftp",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "move to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('move to sftp').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('move to sftp').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - move to sftp",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "move to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while moving zip file from ADLS to SFTP : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**TARGET_FILE_PATH**: to be added \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**ERROR**: _@{activity('move to sftp').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "move to sftp error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "move to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While moving zip file into SFTP: @{activity('move to sftp').error?.errorCode} @{activity('move to sftp').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "error log - archive zip file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "archive zip file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('archive zip file').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('archive zip file').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - archive zip file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "archive zip file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while archiving zipped file into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].zip_archive_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**ERROR**: _@{activity('archive zip file').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "archive zip file error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "archive zip file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While archiving zip file into ADLS: @{activity('archive zip file').error?.errorCode} @{activity('archive zip file').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "move to sftp",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "zip files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
												"sourceFile": "@{variables('date_for_zip')}.zip"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JPDCL_Binary_SFTP_Sink",
											"type": "DatasetReference",
											"parameters": {
												"directory": "@{activity('read parameters').output.value[0].sftp_folder_path}",
												"filename": {
													"value": "@{variables('date_for_zip')}.zip",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete csv files error case",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "archive zip file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AdlsCsvForZippedSrc",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "move end file to sftp",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Delete archived zip",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
												"sourceFile": "do_not_delete.end"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JPDCL_Binary_SFTP_Sink",
											"type": "DatasetReference",
											"parameters": {
												"directory": "@{activity('read parameters').output.value[0].sftp_folder_path}",
												"filename": {
													"value": "@{variables('date_for_zip')}.end",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - move end file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "move end file to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('move end file to sftp').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('move end file to sftp').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error -move end file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "move end file to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while moving zero bytes file to SFTP : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**ZERO_BYTE_FILE_NAME**: @{variables('date_for_zip')}.end \\n\n**ERROR**: _@{activity('move end file to sftp').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "move end file error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "move end file to sftp",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While moving zero bytes file into ADLS: @{activity('move end file to sftp').error?.errorCode} @{activity('move end file to sftp').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Files Generated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Files Generated",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error Fetching necessary columns",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch necessary columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch necessary columns').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch necessary columns').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch necessary columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification Fetch necessary columns",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch necessary columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching reqired columns from contact_hist table: \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch necessary columns').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "error Fetchingdistinct chno",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Distinct ChNo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('Fetch Distinct ChNo').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('Fetch Distinct ChNo').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Distinct ChNo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error notification Fetch distinct chno",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fetch Distinct ChNo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Error fetching distinct chno from contact_hist table: \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch Distinct ChNo').error?.message}_\n",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "For every chno",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"parentFolder": {
						"type": "String"
					},
					"fileNameWithDate": {
						"type": "String"
					},
					"date_yyyyMMddHHmmss": {
						"type": "String"
					},
					"chno": {
						"type": "String"
					},
					"appendedList": {
						"type": "String",
						"defaultValue": ","
					},
					"temp": {
						"type": "String"
					},
					"date_for_zip": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/DNA_CORE_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/data_export_csv_tsv_blob_sink')]",
				"[concat(variables('factoryId'), '/datasets/AdlsCsvForZippedSrc')]",
				"[concat(variables('factoryId'), '/datasets/AdlsCsvForZippedSink')]",
				"[concat(variables('factoryId'), '/datasets/BinarySource')]",
				"[concat(variables('factoryId'), '/datasets/JPDCL_Binary_SFTP_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Export_SFMC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "create success file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "read parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set parentFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "Select \n\"'table_name'\" AS table_name,\n\"'target_folder_path'\" AS target_folder_path,\n\"'schema_name'\" AS schema_name,\n\"'archival_folder_path'\" AS archival_folder_path,\n\"'unloading_query'\" AS unloading_query,\n\"'specificDay'\" AS specificDay,\n\"'container'\" AS container,\n\"'isSFTP'\" AS isSFTP\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'table_name',\n'target_folder_path',\n'schema_name',\n'archival_folder_path',\n'unloading_query',\n'specificDay',\n'container',\n'isSFTP'\n));",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set parentFolder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "parentFolder",
							"value": {
								"value": "@if(equals(pipeline().globalParameters.environment, 'prod'), 'prd', if(equals(pipeline().globalParameters.environment, 'dev'), 'dev', pipeline().globalParameters.environment))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If export needed today",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "read parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(activity('read parameters').output.value[0].specificDay, 'none'), equals(activity('read parameters').output.value[0].specificDay, string(dayOfWeek(formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd')))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set runExportJob2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "runExportJob",
										"value": {
											"value": "@bool(equals(1,0))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set runExportJob1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "runExportJob",
										"value": {
											"value": "@bool(equals(1,1))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "export unload",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If export needed today",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('runExportJob')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Export Dna Core Data into ADLS csv",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "@{activity('read parameters').output.value[0].unloading_query}",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand",
												"additionalCopyOptions": {
													"OVERWRITE": "TRUE",
													"MAX_FILE_SIZE": "5368709120"
												},
												"additionalFormatOptions": {
													"NULL_IF": "()",
													"EMPTY_FIELD_AS_NULL": "FALSE",
													"ESCAPE_UNENCLOSED_FIELD": "NONE"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DNA_CORE_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "DataExportSFMC_gz",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_', formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - Export Dna Core Data into ADLS csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Export Dna Core Data into ADLS csv').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Export Dna Core Data into ADLS csv').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - Export Dna Core Data into ADLS csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**unloading_query**: @{activity('read parameters').output.value[0].unloading_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].TARGET_FOLDER_PATH} \\n\n**ERROR**: _@{activity('Export Dna Core Data into ADLS csv').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "Export Dna Core Data into ADLS csv error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While Exporting Dna Core Data into ADLS: @{activity('Export Dna Core Data into ADLS csv').error?.errorCode} @{activity('Export Dna Core Data into ADLS csv').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Audit_Finish_Fail",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ADLS_to_SFTP_move",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "if no data creat empty file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(\n    equals(variables('runExportJob'), true),\n    equals(activity('read parameters').output.value[0].ISSFTP, 'Y')\n) \n\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ADLS_TO_SFTP",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "sftp_adls_source_binary_sfmc_export",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": "@{activity('read parameters').output.value[0].container}",
												"adls_path": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
												"file_name": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_', formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySFTPmarketingcloudopsjpndcl_sfmc_sink",
											"type": "DatasetReference",
											"parameters": {
												"directory": "@{activity('read parameters').output.value[0].TARGET_FOLDER_PATH}",
												"filename": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_', formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - ADLS_TO_SFTP",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ADLS_TO_SFTP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('ADLS_TO_SFTP').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('ADLS_TO_SFTP').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - ADLS_TO_SFTP",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ADLS_TO_SFTP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('ADLS_TO_SFTP').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "ADLS_TO_SFTP error_",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "ADLS_TO_SFTP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While Exporting Dna Core Data into ADLS: @{activity('create empty file').error?.errorCode} @{activity('create empty file').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Audit_Finish_Fail_ADLS_TO_SFTP",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ADLS_TO_SFTP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "if no data creat empty file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "export unload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(\n    equals(variables('runExportJob'), true),\n    equals(activity('Export Dna Core Data into ADLS csv').output.dataRead, 0)\n) \n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create empty file",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataExportSFMC_gz",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{activity('read parameters').output.value[0].container}",
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
													"type": "Expression"
												},
												"fileName": "do_not_delete.csv.gz"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExportSFMC_gz",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_',formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - create empty file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "create empty file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('create empty file').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('create empty file').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - create empty file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "create empty file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('create empty file').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "create empty file error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "create empty file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While Exporting Dna Core Data into ADLS: @{activity('create empty file').error?.errorCode} @{activity('create empty file').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Audit_Finish_Fail_create empty file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "create empty file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "if isftp is N then mbox",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ADLS_to_SFTP_move",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(\n    equals(variables('runExportJob'), true),\n    equals(activity('read parameters').output.value[0].ISSFTP, 'N')\n) \n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "archive to mbox location",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataExportSFMC_gz",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{activity('read parameters').output.value[0].container}",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
												"fileName": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_', formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExportSFMC_gz",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{activity('read parameters').output.value[0].container}",
												"directory": {
													"value": "@{variables('parentFolder')}/DCL/jjrnki/SFCC_Unload",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{concat(activity('read parameters').output.value[0].TABLE_NAME, '_', formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv.gz')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - archive to mbox location",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "archive to mbox location",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('archive to mbox location').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('archive to mbox location').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - archive to mbox location",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "archive to mbox location",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('archive to mbox location').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "archive to mbox location error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "archive to mbox location",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While Exporting Dna Core Data into ADLS: @{activity('archive to mbox location').error?.errorCode} @{activity('archive to mbox location').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Audit_Finish_Fail_archive to mbox location",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "archive to mbox location",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_audit_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"status": "FAIL",
											"input_row_count": 0,
											"output_row_count": 0,
											"jobname": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
												"type": "Expression"
											},
											"runid": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipeline_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "create proces end file_adls",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "archive to mbox location",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "sftp_adls_source_binary_sfmc_export",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": "@{activity('read parameters').output.value[0].container}",
												"adls_path": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
													"type": "Expression"
												},
												"file_name": "do_not_delete.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/DCL/jjrnki/SFCC_Unload",
													"type": "Expression"
												},
												"fileName": "@{concat('process_end', '_',formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv')}"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Audit_Finish_Fail_if isftp is N then mbox",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "create success file",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "create success file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "if isftp is N then mbox",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('read parameters').output.value[0].TABLE_NAME,'dm_user_attr')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create proces end file",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "sftp_adls_source_binary_sfmc_export",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": "@{activity('read parameters').output.value[0].container}",
												"adls_path": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].ARCHIVAL_FOLDER_PATH}",
													"type": "Expression"
												},
												"file_name": "do_not_delete.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySFTPmarketingcloudopsjpndcl_sfmc_sink",
											"type": "DatasetReference",
											"parameters": {
												"directory": "@{activity('read parameters').output.value[0].TARGET_FOLDER_PATH}",
												"filename": "@{concat('process_end', '_',formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd'), '.csv')}"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					}
				},
				"variables": {
					"parentFolder": {
						"type": "String"
					},
					"runExportJob": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/datasets/DNA_CORE_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/DataExportSFMC_gz')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/sftp_adls_source_binary_sfmc_export')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPmarketingcloudopsjpndcl_sfmc_sink')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_path": {
						"type": "string"
					},
					"src_container": {
						"type": "string"
					},
					"src_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().src_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().src_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().src_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB_to_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DECIDE_SOURCE",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.source_name",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sql_server_awswfqsgpw",
									"activities": [
										{
											"name": "sql_server_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sql_server_awswfqsgpw",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move sql_server_to_alds",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('sql_server_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('sql_server_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - sql_server_to_alds",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('sql_server_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "sql_server_to_adls: @{activity('sql_server_to_adls').error?.errorCode} @{activity('sql_server_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "mysql_server_csngjnjreport",
									"activities": [
										{
											"name": "mysql_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 2,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "MySqlSource",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "mysql_server_csngjnjreport",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move mysql_to_alds",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mysql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('mysql_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('mysql_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mysql_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mysql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('mysql_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_mysql_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "mysql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "mysql_to_adls: @{activity('mysql_to_adls').error?.errorCode} @{activity('mysql_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "sql_server_mds",
									"activities": [
										{
											"name": "mds_sql_server_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sql_server_mds",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move mds_sql_server_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mds_sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('mds_sql_server_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('mds_sql_server_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - mds_sql_server_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mds_sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('mds_sql_server_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_mds_sql_server",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "mds_sql_server_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "sql_server_to_adls: @{activity('mds_sql_server_to_adls').error?.errorCode} @{activity('mds_sql_server_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "mysql_server_csngjnjreport_batchread",
									"activities": [
										{
											"name": "mysql_to_adls_multifiles",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Set landing_file_name_no_ext",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 4,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "MySqlSource",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"maxRowsPerFile": 20000,
														"fileNamePrefix": {
															"value": "@variables('landing_file_name')",
															"type": "Expression"
														},
														"quoteAllText": true,
														"fileExtension": ".csv"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "mysql_server_csngjnjreport",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "mysql_server_sink_multifile",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set landing_file_name_no_ext",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "landing_file_name",
												"value": {
													"value": "@replace(pipeline().parameters.landing_file_name, '.csv', '')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "mysql_server_csngjnjreport_dbload",
									"activities": [
										{
											"name": "mysql_to_adls_dbload",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "MySqlSource",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "SnowflakeV2Sink",
													"preCopyScript": {
														"value": "@if(equals(pipeline().parameters.truncate_and_load,'Y'),concat('TRUNCATE TABLE ',pipeline().parameters.target_schema,'.',pipeline().parameters.target_table),'')",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_blob')]",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@{pipeline().parameters.container}/@{pipeline().parameters.landing_file_path}",
														"type": "Expression"
													},
													"enableCompression": true
												}
											},
											"inputs": [
												{
													"referenceName": "mysql_server_csngjnjreport",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "snowflake_sink_target",
													"type": "DatasetReference",
													"parameters": {
														"tablename": "@pipeline().parameters.target_table",
														"schemaname": "@pipeline().parameters.target_schema"
													}
												}
											]
										}
									]
								},
								{
									"value": "oracle_db",
									"activities": [
										{
											"name": "oracle_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false,
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "OracleJapanDCL_kenvue",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move oracle_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('oracle_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('oracle_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - oracle_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from oracle to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('oracle_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_oracle_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "oracle_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "oracle_to_adls: @{activity('oracle_to_adls').error?.errorCode} @{activity('oracle_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "salesforce_db",
									"activities": [
										{
											"name": "salesforce_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SalesforceV2Source",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"includeDeletedObjects": false
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "Salesforce_Object_Veeva",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - salesforce_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "salesforce_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('salesforce_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('salesforce_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - salesforce_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "salesforce_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from salesforce to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('salesforce_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_salesforce_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "salesforce_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "salesforce_to_adls: @{activity('salesforce_to_adls').error?.errorCode} @{activity('salesforce_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "rs_server_cpivosyuhhmf",
									"activities": [
										{
											"name": "rs_cpivosyuhhmf_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AmazonRedshiftSource",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "redshift_ga360",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - rs_cpivosyuhhmf_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "rs_cpivosyuhhmf_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('rs_cpivosyuhhmf_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('rs_cpivosyuhhmf_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - rs_cpivosyuhhmf_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "rs_cpivosyuhhmf_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from redshift to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('rs_cpivosyuhhmf_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_rs_cpivosyuhhmf_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "rs_cpivosyuhhmf_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "oracle_to_adls: @{activity('rs_cpivosyuhhmf_to_adls').error?.errorCode} @{activity('rs_cpivosyuhhmf_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "lsvmcitsapl002fjx2com",
									"activities": [
										{
											"name": "oracle_pl002_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false,
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "OracleJapan_pl002",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move oracle_pl002_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_pl002_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('oracle_pl002_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('oracle_pl002_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - oracle_pl002_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_pl002_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from oracle to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('oracle_pl002_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_oracle_pl002_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "oracle_pl002_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "oracle_pl002_to_adls: @{activity('oracle_pl002_to_adls').error?.errorCode} @{activity('oracle_pl002_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "lsvawsbtcsgpl0005kenvuecom",
									"activities": [
										{
											"name": "oracle_pl005_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false,
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "OracleJapan_pl005",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move oracle_pl005_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_pl005_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('oracle_pl005_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('oracle_pl005_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - oracle_pl005_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_pl005_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from oracle to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('oracle_pl005_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_oracle_pl005_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "oracle_pl005_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "oracle_pl005_to_adls: @{activity('oracle_pl005_to_adls').error?.errorCode} @{activity('oracle_pl005_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "OTIF_Server",
									"activities": [
										{
											"name": "otif_server_to_adls_copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"queryTimeout": "24:00:00"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "Odbc_databricks",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move otif_server_to_alds_copy",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "otif_server_to_adls_copy",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('otif_server_to_adls_copy').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('otif_server_to_adls_copy').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - otif_server_to_alds_copy",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "otif_server_to_adls_copy",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('otif_server_to_adls_copy').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "otif_error_copy",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "otif_server_to_adls_copy",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "otif_server_to_adls_copy: @{activity('otif_server_to_adls_copy').error?.errorCode} @{activity('otif_server_to_adls_copy').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "emartkor",
									"activities": [
										{
											"name": "oracle_to_adls_emartkor",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AmazonRdsForOracleSource",
													"oracleReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false,
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AmazonRdsForOracleNA",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move oracle_to_adls_copy1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_to_adls_emartkor",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('oracle_to_adls_emartkor').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('oracle_to_adls_emartkor').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - oracle_to_adls_emartkor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "oracle_to_adls_emartkor",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue with extracting data from oracle to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('oracle_to_adls_emartkor').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_oracle_to_adls_emartkor",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "oracle_to_adls_emartkor",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "oracle_to_adls: @{activity('oracle_to_adls_emartkor').error?.errorCode} @{activity('oracle_to_adls_emartkor').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "awsbrasgpw0001",
									"activities": [
										{
											"name": "awsbrasgpw0001_sql_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sql_server_awsbrasgpw0001",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink_compressed",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move awsbrasgpw0001_sql_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "awsbrasgpw0001_sql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('awsbrasgpw0001_sql_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('awsbrasgpw0001_sql_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - awsbrasgpw0001_sql_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "awsbrasgpw0001_sql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while extracting data into adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('awsbrasgpw0001_sql_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_awsbrasgpw0001_sql_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "awsbrasgpw0001_sql_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "sql_server_to_adls: @{activity('awsbrasgpw0001_sql_to_adls').error?.errorCode} @{activity('awsbrasgpw0001_sql_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "capturesqlrds",
									"activities": [
										{
											"name": "capturesqlrds_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AmazonRdsForSqlServerSource",
													"sqlReaderQuery": {
														"value": "@pipeline().parameters.source_query",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AmazonRdsForCapturesqlrds",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": {
															"value": "@pipeline().parameters.landing_file_name",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "error log - move capturesqlrds_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "capturesqlrds_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('capturesqlrds_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('capturesqlrds_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - awsbrasgpw0001_sql_to_adls_copy1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "capturesqlrds_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while extracting data into adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('capturesqlrds_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_capturesqlrds_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "capturesqlrds_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "sql_server_to_adls: @{activity('capturesqlrds_to_adls').error?.errorCode} @{activity('capturesqlrds_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								},
								{
									"value": "rg_clavis",
									"activities": [
										{
											"name": "rgclavis_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AmazonRedshiftSource",
													"query": {
														"value": "@replace(pipeline().parameters.source_query,'<<extract_month>>',pipeline().parameters.extract_month)",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "rg_clavis_redshift_dataset",
													"type": "DatasetReference"
												}
											],
											"outputs": [
												{
													"referenceName": "sql_server_sink",
													"type": "DatasetReference",
													"parameters": {
														"container": "@pipeline().parameters.container",
														"path": {
															"value": "@pipeline().parameters.landing_file_path",
															"type": "Expression"
														},
														"file": "@pipeline().parameters.landing_file_name"
													}
												}
											]
										},
										{
											"name": "error log - move rgclavis_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "rgclavis_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "write_error_log",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"process_id": {
														"value": "@pipeline().parameters.process_id",
														"type": "Expression"
													},
													"job_name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"error_message": {
														"value": "@activity('rgclavis_to_adls').error?.message",
														"type": "Expression"
													},
													"run_id": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"category": {
														"value": "@pipeline().parameters.category",
														"type": "Expression"
													},
													"phase_id": {
														"value": "@pipeline().parameters.phase_id",
														"type": "Expression"
													},
													"error_code": {
														"value": "@activity('rgclavis_to_adls').error?.errorCode",
														"type": "Expression"
													},
													"job_id": {
														"value": "@pipeline()?.TriggeredByPipelineRunId",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Send error - rgclavis_to_adls",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "rgclavis_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "NotifiyTeamsChannelPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
														"type": "Expression"
													},
													"runId": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": "FAIL",
													"supportMessage": {
														"value": "There is some issue while extracting data into adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**MS_QUERY**: @{pipeline().parameters.source_query} \\n\n**CONTAINER**: @{pipeline().parameters.container} \\n\n**LANDING_FILE_PATH**: @{pipeline().parameters.landing_file_path} \\n\n**LANDING_FILE_NAME**: @{pipeline().parameters.landing_file_name} \\n\n**ERROR**: _@{activity('rgclavis_to_adls').error?.message}_",
														"type": "Expression"
													},
													"isBusinessNotification": "No",
													"isSupportNotification": "Yes",
													"isError": "Yes"
												}
											}
										},
										{
											"name": "error_rgclavis_to_adls",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "rgclavis_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "sql_server_to_adls: @{activity('rgclavis_to_adls').error?.errorCode} @{activity('rgclavis_to_adls').error?.message}",
													"type": "Expression"
												},
												"errorCode": "2000"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Unknown source",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Unknown source type: @{pipeline().parameters.source_name}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"source_name": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"landing_file_path": {
						"type": "string"
					},
					"landing_file_name": {
						"type": "string"
					},
					"source_query": {
						"type": "string"
					},
					"process_id": {
						"type": "int"
					},
					"category": {
						"type": "string"
					},
					"phase_id": {
						"type": "int"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"target_table": {
						"type": "string"
					},
					"target_schema": {
						"type": "string"
					},
					"truncate_and_load": {
						"type": "string"
					},
					"extract_month": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"landing_file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_server_awswfqsgpw')]",
				"[concat(variables('factoryId'), '/datasets/sql_server_sink')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/mysql_server_csngjnjreport')]",
				"[concat(variables('factoryId'), '/datasets/sql_server_mds')]",
				"[concat(variables('factoryId'), '/datasets/mysql_server_sink_multifile')]",
				"[concat(variables('factoryId'), '/datasets/snowflake_sink_target')]",
				"[concat(variables('factoryId'), '/datasets/OracleJapanDCL_kenvue')]",
				"[concat(variables('factoryId'), '/datasets/Salesforce_Object_Veeva')]",
				"[concat(variables('factoryId'), '/datasets/redshift_ga360')]",
				"[concat(variables('factoryId'), '/datasets/OracleJapan_pl002')]",
				"[concat(variables('factoryId'), '/datasets/OracleJapan_pl005')]",
				"[concat(variables('factoryId'), '/datasets/Odbc_databricks')]",
				"[concat(variables('factoryId'), '/datasets/AmazonRdsForOracleNA')]",
				"[concat(variables('factoryId'), '/datasets/sql_server_awsbrasgpw0001')]",
				"[concat(variables('factoryId'), '/datasets/sql_server_sink_compressed')]",
				"[concat(variables('factoryId'), '/datasets/AmazonRdsForCapturesqlrds')]",
				"[concat(variables('factoryId'), '/datasets/rg_clavis_redshift_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableauRestAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lspltbitabap')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/Tableau"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableauJsonResponse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tempContainer": {
						"type": "string"
					},
					"tempDirectory": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/Tableau"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tempFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().tempDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().tempContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tableau Refresh Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until Completion",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('progress'),'100')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@int(pipeline().parameters.waitTime)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Fetch Refresh Status Iteratively",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Wait",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/xml",
												"x-tableau-auth": {
													"value": "@pipeline().parameters.token",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "TableauRestAPI",
											"type": "DatasetReference",
											"parameters": {
												"relativeURL": {
													"value": "sites/@{pipeline().parameters.SiteId}/jobs/@{pipeline().parameters.JobId}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TableauJsonResponse",
											"type": "DatasetReference",
											"parameters": {
												"tempContainer": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"tempDirectory": {
													"value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
													"type": "Expression"
												},
												"tempFileName": "tableauResponseRefreshStatusCurrent.json"
											}
										}
									]
								},
								{
									"name": "Set progress Iteratively",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Read Refresh Status Iteratively",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "progress",
										"value": {
											"value": "@activity('Read Refresh Status Iteratively').output.value[0].job.progress",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Read Refresh Status Iteratively",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Fetch Refresh Status Iteratively",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "TableauJsonResponse",
											"type": "DatasetReference",
											"parameters": {
												"tempContainer": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"tempDirectory": {
													"value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
													"type": "Expression"
												},
												"tempFileName": "tableauResponseRefreshStatusCurrent.json"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Error Fetching Refresh Status Iteratively",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Fetch Refresh Status Iteratively",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Fetch Refresh Status Iteratively').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Fetch Refresh Status Iteratively').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Error Reading Refresh Status Iteratively",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Read Refresh Status Iteratively",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Read Refresh Status Iteratively').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Read Refresh Status Iteratively').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Refresh Successful",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Refresh Successful",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Refresh Successful",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Sign Out",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('finishCode'),'0')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "error response after refresh",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "Refresh Failed : @{activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes}",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@variables('finishCode')",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Fail tableau refresh",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error response after refresh",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Send Error notification hitting refresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Refresh Failed : @{activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes}",
											"type": "Expression"
										},
										"errorCode": {
											"value": "@variables('finishCode')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Error notification hitting refresh",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "Refresh failed for tableau source (@{pipeline().parameters.tableauSourceName}): \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes}_\n",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "Refresh failed for tableau source (@{pipeline().parameters.tableauSourceName})",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set finishCode",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Completion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "finishCode",
							"value": {
								"value": "@activity('Read Refresh Status Iteratively').output.value[0].job.finishCode",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Audit_Finish_Fail_3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Until Completion",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Sign Out",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set finishCode",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:05:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"additionalHeaders": {
									"x-tableau-auth": {
										"value": "@pipeline().parameters.token",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TableauRestAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "auth/signout"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableauJsonResponse",
								"type": "DatasetReference",
								"parameters": {
									"tempContainer": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"tempDirectory": {
										"value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
										"type": "Expression"
									},
									"tempFileName": {
										"value": "tableauResponseSignOut.json",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If success notification ON",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Refresh Successful",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.isSuccessNotification,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Success notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "SUCCESS",
											"isBusinessNotification": "Yes",
											"isSupportNotification": "No",
											"businessMessage": {
												"value": "Refresh Successful for tableau source (@{pipeline().parameters.tableauSourceName})\n",
												"type": "Expression"
											},
											"isError": "No",
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SiteId": {
						"type": "string"
					},
					"JobId": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "string"
					},
					"phase_id": {
						"type": "string"
					},
					"sequence_id": {
						"type": "string"
					},
					"process_id": {
						"type": "string"
					},
					"waitTime": {
						"type": "string"
					},
					"tableauSourceName": {
						"type": "string"
					},
					"parentFolder": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"token": {
						"type": "string"
					},
					"isSuccessNotification": {
						"type": "string"
					}
				},
				"variables": {
					"token": {
						"type": "String"
					},
					"progress": {
						"type": "String",
						"defaultValue": "0"
					},
					"finishCode": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Consumption/Consumption Systems/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
				"[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_To_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch SFTP",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FtpName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "iqviaaus",
									"activities": [
										{
											"name": "Copy iqviaaus file",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPiqviaaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive iqviaaus file",
											"type": "Copy",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Copy iqviaaus file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPiqviaaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPiqviaaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error iqviaaus copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy iqviaaus file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy iqviaaus file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error iqviaaus archive",
											"type": "SetVariable",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive iqviaaus file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive iqviaaus file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 1",
											"type": "Fail",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Set error iqviaaus archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_iqviaaus_delete",
											"type": "Delete",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive iqviaaus file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPiqviaaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "perensoaus",
									"activities": [
										{
											"name": "Copy perensoaus file",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPperensoaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive perensoaus file",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy perensoaus file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPperensoaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPperensoaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{split(pipeline().parameters.FtpDirectory,'/')[0]}/archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error perensoaus copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy perensoaus file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy perensoaus file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error perensoaus archive",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Archive perensoaus file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive perensoaus file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Set error perensoaus archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_perensoaus_delete",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Archive perensoaus file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPperensoaus",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "exacttargettha",
									"activities": [
										{
											"name": "Copy exacttargettha file",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPexacttargettha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive exacttargettha file",
											"type": "Copy",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Copy exacttargettha file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPexacttargettha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPexacttargettha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{split(pipeline().parameters.FtpDirectory,'/')[0]}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error exacttargettha copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy exacttargettha file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy exacttargettha file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error exacttargettha archive",
											"type": "SetVariable",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive exacttargettha file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive exacttargettha file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 5",
											"type": "Fail",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Set error exacttargettha archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_exacttargettha_delete",
											"type": "Delete",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive exacttargettha file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPexacttargettha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "marketingcloudopstha",
									"activities": [
										{
											"name": "Copy marketingclouadopstha file",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopstha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive marketingclouadopstha file",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy marketingclouadopstha file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopstha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopstha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{split(pipeline().parameters.FtpDirectory,'/')[0]}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error marketingcloudopstha copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy marketingclouadopstha file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy marketingclouadopstha file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error marketingcloudopstha archive",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Archive marketingclouadopstha file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive marketingclouadopstha file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 6",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Set error marketingcloudopstha archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_marketingcloudopstha_delete",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Archive marketingclouadopstha file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPmarketingcloudopstha",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "popcompany",
									"activities": [
										{
											"name": "Copy popcompany file",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive popcompany file",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy popcompany file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error popcompany copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy popcompany file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy popcompany file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error popcompany archive",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Archive popcompany file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive popcompany file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 7",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Set error popcompany archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_popcompany1_delete",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Archive popcompany file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "marketingcloudopsjpndcl",
									"activities": [
										{
											"name": "Copy marketingcloudopsjpndcl",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopsjpndcl",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error marketingcloudopsjpndcl copy",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy marketingcloudopsjpndcl",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy marketingcloudopsjpndcl').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archive marketingcloudopsjpndcl file",
											"type": "Copy",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Copy marketingcloudopsjpndcl",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopsjpndcl",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPmarketingcloudopsjpndcl",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error marketingcloudopsjpndcl archive",
											"type": "SetVariable",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive marketingcloudopsjpndcl file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive marketingcloudopsjpndcl file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 8",
											"type": "Fail",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Set error marketingcloudopsjpndcl archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_marketingcloudopsjpndcl_delete",
											"type": "Delete",
											"state": "Inactive",
											"onInactiveMarkAs": "Succeeded",
											"dependsOn": [
												{
													"activity": "Archive marketingcloudopsjpndcl file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPmarketingcloudopsjpndcl",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								},
								{
									"value": "popcompanytrans",
									"activities": [
										{
											"name": "Copy popcompanytrans",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "sftp_adls_sink_binary",
													"type": "DatasetReference",
													"parameters": {
														"adls_container": {
															"value": "@pipeline().parameters.AdlsContainer",
															"type": "Expression"
														},
														"adls_path": {
															"value": "@pipeline().parameters.AdlsPath",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Archive popcompanytrans file",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "Copy popcompanytrans",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "SftpReadSettings",
														"recursive": true,
														"disableChunking": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "SftpWriteSettings",
														"operationTimeout": "01:00:00",
														"useTempFileRename": true
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@pipeline().parameters.FtpDirectory",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": {
															"value": "@{pipeline().parameters.FtpDirectory}/Archive/ADF_Archive",
															"type": "Expression"
														},
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set error popcompanytrans",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy popcompanytrans",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Copy popcompanytrans').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set error popcompanytrans archive",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Archive popcompanytrans file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorResponse1",
												"value": {
													"value": "@activity('Archive popcompanytrans file').error?.message",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Archival fail 9",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Set error popcompanytrans archive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "SFTP File Archival Fail: @{variables('errorResponse1')}",
													"type": "Expression"
												},
												"errorCode": "002"
											}
										},
										{
											"name": "sftp_popcompany_delete",
											"type": "Delete",
											"dependsOn": [
												{
													"activity": "Archive popcompanytrans file",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySFTPpopcompany",
													"type": "DatasetReference",
													"parameters": {
														"directory": "@pipeline().parameters.FtpDirectory",
														"filename": {
															"value": "@pipeline().parameters.FtpFileName",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Unzip Needed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - file movement from sftp",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@variables('errorResponse1')",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": "001",
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - file movement from sftp",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue while copying file from SFTP location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**FTP_NAME**: @{pipeline().parameters.FtpName} \\n\n**FTP_DIRECTORY**: @{pipeline().parameters.FtpDirectory} \\n\n**FILE_NAME**: @{pipeline().parameters.FtpFileName} \\n\n**ERROR**: _@{variables('errorResponse1')}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "If Unzip Needed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.isUnzipNeeded,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Unzip File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings",
												"compressionProperties": {
													"type": "ZipDeflateReadSettings"
												}
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "sftp_adls_source_binary_zip",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@pipeline().parameters.AdlsPath",
													"type": "Expression"
												},
												"file_name": {
													"value": "@pipeline().parameters.FtpFileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "adls_sink_binary",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@{pipeline().parameters.AdlsPath}/@{pipeline().parameters.FtpFileName}_temp",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Unzip File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "sftp_adls_source_binary",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@{pipeline().parameters.AdlsPath}/@{pipeline().parameters.FtpFileName}_temp/@{pipeline().parameters.FtpFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sftp_adls_sink_binary",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@{pipeline().parameters.AdlsPath}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete temp location",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "sftp_adls_source_binary",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@{pipeline().parameters.AdlsPath}/@{pipeline().parameters.FtpFileName}_temp",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete adls zip",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "sftp_adls_source_binary",
											"type": "DatasetReference",
											"parameters": {
												"adls_container": {
													"value": "@pipeline().parameters.AdlsContainer",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@{pipeline().parameters.AdlsPath}/@{pipeline().parameters.FtpFileName}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "error log -unzipping file",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Unzip Needed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "There is some issue while unzipping file @{pipeline().parameters.FtpFileName} from location @{pipeline().parameters.AdlsContainer}/@{pipeline().parameters.AdlsPath}",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": "002",
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - unzipping file",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Unzip Needed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue while copying file from SFTP location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**FTP_NAME**: @{pipeline().parameters.FtpName} \\n\n**FTP_DIRECTORY**: @{pipeline().parameters.FtpDirectory} \\n\n**FILE_NAME**: @{pipeline().parameters.FtpFileName} \\n\n**ERROR**: _@{variables('errorResponse1')}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes"
							}
						}
					},
					{
						"name": "audit fail while unzipping",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Unzip Needed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"FtpDirectory": {
						"type": "string"
					},
					"FtpFileName": {
						"type": "string"
					},
					"FtpName": {
						"type": "string"
					},
					"AdlsContainer": {
						"type": "string"
					},
					"AdlsPath": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"isUnzipNeeded": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"variables": {
					"errorResponse1": {
						"type": "String"
					},
					"error": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/sftp_adls_source_binary_zip')]",
				"[concat(variables('factoryId'), '/datasets/adls_sink_binary')]",
				"[concat(variables('factoryId'), '/datasets/sftp_adls_source_binary')]",
				"[concat(variables('factoryId'), '/datasets/sftp_adls_sink_binary')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPiqviaaus')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPperensoaus')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPexacttargettha')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPmarketingcloudopstha')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPpopcompany')]",
				"[concat(variables('factoryId'), '/datasets/BinarySFTPmarketingcloudopsjpndcl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"sourceFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sourceFile",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDestination_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDestination_Archive_Batch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mbox_File_Copy_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"encoding": {
						"type": "string"
					},
					"delimeter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimeter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().encoding",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdlsFileDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Miscellaneous Pipelines"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DNA_CORE_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore002')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/DBT"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_export_csv_tsv_blob_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_blob')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"quotesEnclosed": {
						"type": "string"
					},
					"headerNeeded": {
						"type": "string"
					},
					"delimeter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimeter",
						"type": "Expression"
					},
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@if(equals(dataset().headerNeeded,'Y'),true,false)",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@if(equals(dataset().quotesEnclosed,'Y'),'\"','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdlsCsvForZippedSrc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdlsCsvForZippedSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JPDCL_Binary_SFTP_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsmftappvkenvuecomjpdcl')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataExportSFMC_gz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_blob')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"rowDelimiter": "\n",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sftp_adls_source_binary_sfmc_export')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_container": {
						"type": "string"
					},
					"adls_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().adls_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPmarketingcloudopsjpndcl_sfmc_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsmarketingcloudopsjpndcl')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPiqviaaus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsiqviaaus')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPperensoaus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsperensoaus')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPexacttargettha')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsexacttargettha')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPmarketingcloudopstha')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsmarketingcloudopstha')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPpopcompany')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsthepopcompanycom')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySFTPmarketingcloudopsjpndcl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsmarketingcloudopsjpndcl')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_system_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawswfgsgpw0002')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"File_Name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/FILE_SYSTEM"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().File_Name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_system_source_th')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawsbtasgpw0000')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"input_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/FILE_SYSTEM"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().input_folder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_system_dest_th')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_ir001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/FILE_SYSTEM"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_system_dest_th_zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_ir001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/FILE_SYSTEM"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_blob_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_blob')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": "\r\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_sink_soh_delim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": {
						"value": "\r\n",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_Archival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Audit_Start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSheetFromXlsxXls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Audit_Finish_Fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSheetFromXlsxXls",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move to Archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Is Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinarySource",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}",
										"type": "Expression"
									},
									"sourceFile": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDestination",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}/processed/archive/@{variables('tempPath')}",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.sourceFile,'.',concat('_',formatDateTime(convertTimeZone(utcnow(), 'UTC', 'Singapore Standard Time'),'yyyyMMdd_HHmmss'),'.'))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Is Error",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set temp path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.isError",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Yes",
									"activities": [
										{
											"name": "Move to Error",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@pipeline().parameters.sourceFile",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}/processed/error/@{variables('tempPath')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@replace(pipeline().parameters.sourceFile,'.',concat('_',formatDateTime(convertTimeZone(utcnow(), 'UTC', 'Singapore Standard Time'),'yyyyMMdd_HHmmss'),'.'))",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Is xlsx_xls or others",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Move to Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@substring(pipeline().parameters.sourceFile,add(lastindexof(pipeline().parameters.sourceFile,'.'),1),sub(length(pipeline().parameters.sourceFile),add(lastindexof(pipeline().parameters.sourceFile,'.'),1)))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "xlsx",
									"activities": [
										{
											"name": "Delete csv",
											"type": "Delete",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@replace(replace(replace(replace(replace(replace(pipeline().parameters.sourceFile,'(',''),')',''),' ','_'),'.xlsx','.csv'),'.xls','.csv'),',' ,'')",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										}
									]
								},
								{
									"value": "xls",
									"activities": [
										{
											"name": "Delete csv2",
											"type": "Delete",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": {
															"value": "@pipeline().parameters.container",
															"type": "Expression"
														},
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@replace(replace(replace(replace(replace(replace(pipeline().parameters.sourceFile,'(',''),')',''),' ','_'),'.xlsx','.csv'),'.xls','.csv'),',' ,'')",
															"type": "Expression"
														}
													}
												},
												"enableLogging": false,
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachSheetFromXlsxXls",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Is xlsx_xls or others",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.sheetNames",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delete csv one by one",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.directory}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{replace(item(),' ','_')}.csv",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Set temp path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Audit_Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempPath",
							"value": {
								"value": "@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string",
						"defaultValue": "test"
					},
					"usecase_id": {
						"type": "int",
						"defaultValue": 0
					},
					"sequence_id": {
						"type": "int",
						"defaultValue": 0
					},
					"process_id": {
						"type": "int",
						"defaultValue": 0
					},
					"phase_id": {
						"type": "int",
						"defaultValue": 0
					},
					"isError": {
						"type": "string",
						"defaultValue": "Yes"
					},
					"container": {
						"type": "string",
						"defaultValue": "asp"
					},
					"directory": {
						"type": "string",
						"defaultValue": "dev/transactional/CNSC"
					},
					"sourceFile": {
						"type": "string",
						"defaultValue": "CNSC DR.CILABO SALES REPORT 202001.xlsx"
					},
					"sheetNames": {
						"type": "array",
						"defaultValue": [
							"ZZ DT",
							"HZ DT",
							"BJ DT",
							"CQ DT",
							"DL DT",
							"SY DT"
						]
					}
				},
				"variables": {
					"output": {
						"type": "String"
					},
					"index1": {
						"type": "Integer"
					},
					"index2": {
						"type": "Integer"
					},
					"indexLast": {
						"type": "Integer"
					},
					"tempPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources/Utilities"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-23T12:47:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/BinarySource')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DNA_LOAD_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/DBT"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mbox_File_Copy_adls_split_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"encoding": {
						"type": "string"
					},
					"delimeter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/export"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimeter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().encoding",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "audit success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Archival Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FINISH",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check load method",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If Validation Passed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.parameters.value[0].load_method",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "copy",
									"activities": [
										{
											"name": "load from file",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "NonQuery",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message2",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file').error?.message}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "sp",
									"activities": [
										{
											"name": "Load with SP",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "Set paramFileName",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SnowflakeV2Source",
													"query": {
														"value": "CALL @{pipeline().parameters.parameters.value[0].sp_name} (['@{variables('paramfilename')}','@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}','@{pipeline().parameters.parameters.value[0].target_table}','@{pipeline().parameters.sheetNames}']);\n",
														"type": "Expression"
													},
													"exportSettings": {
														"type": "SnowflakeExportCopyCommand"
													}
												},
												"dataset": {
													"referenceName": "mtd_process",
													"type": "DatasetReference"
												},
												"firstRowOnly": false
											}
										},
										{
											"name": "Set Error Message",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Load with SP",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('Load with SP').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Error Message from SP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Load with SP",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "@string(activity('Load with SP').output.value[0])",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set paramFileName",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "paramfilename",
												"value": {
													"value": "@if(\n    equals(toupper(pipeline().parameters.parameters.value[0].is_direct_load), 'Y'),\n     pipeline().parameters.sourceFileName,\n     variables('fileName') )",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "JapanDCL",
									"activities": [
										{
											"name": "load from file 2",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message3",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file 2",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file 2').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set extracted date",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Set currentTimestamp",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "extractedDate",
												"value": {
													"value": "@if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'mykokya_param'),variables('currentTimestamp') ,if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'mykokya'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'ec_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'cc_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'acgel_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'vc100_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'cluster_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'affiliate_cancel_receive'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'rakutenorderdetail'), variables('currentTimestamp') , take(replace(replace(pipeline().parameters.sourceFileName, pipeline().parameters.parameters.value[0].FILE_SPEC,'' ),'_',''),8))))))))))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "update etl parameters",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "load from file 2",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set extracted date",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set isFileNameColumn",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(greater(int(activity('load from file 2').output.resultSets[0].rows[0].rows_loaded),0),if(variables('isFileNameColumn'),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''', FILE_NAME=''',variables('fileName'),''',INSERTED_DATE=CURRENT_TIMESTAMP(),INSERTED_BY=''ETL_Batch'',UPDATED_DATE=CURRENT_TIMESTAMP(),UPDATED_BY='''' where SOURCE_FILE_DATE is null;'),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''',INSERTED_DATE=CURRENT_TIMESTAMP(),INSERTED_BY=''ETL_Batch'',UPDATED_DATE=CURRENT_TIMESTAMP(),UPDATED_BY='''' where SOURCE_FILE_DATE is null;')),'Select ''no_update_needed'';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message4",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "update etl parameters",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Move dcl file to success",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "update etl parameters",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set isFileNameColumn",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "isFileNameColumn",
												"value": {
													"value": "@if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'SFCC_PRODUCT_CATEGORY'),true,if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'CONTACT_HIST'), true, if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'SFCC_PRODUCT_MST'), true, if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'CLUSTERMAPPING'), true, false))))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set currentTimestamp",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "currentTimestamp",
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Japan",
									"activities": [
										{
											"name": "load from file 2 japan",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message5",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file 2 japan",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file 2 japan').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set extracted date japan",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "extractedDate",
												"value": {
													"value": "@if(contains(pipeline().parameters.parameters.value[0].FILE_SPEC,'OTHERS'),split(pipeline().parameters.sourceFileName, '_')[2],split(pipeline().parameters.sourceFileName,'_')[1])",
													"type": "Expression"
												}
											}
										},
										{
											"name": "update etl parameters japan",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "load from file 2 japan",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set extracted date japan",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set upload_date tokyo",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set upload_time tokyo",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(greater(int(activity('load from file 2 japan').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''',upload_dt=''',variables('upload_date'),''',upload_time=''',variables('upload_time'),''' , FILE_NAME=''',variables('fileName'),''' where SOURCE_FILE_DATE is null;'),'Select ''no_update_needed'';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message6",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "update etl parameters japan",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters japan').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set upload_date tokyo",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "upload_date",
												"value": {
													"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'MM-dd-yyyy')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set upload_time tokyo",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "upload_time",
												"value": {
													"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'HH:mm:ss')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Move japan file to success",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "update etl parameters japan",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "PROX",
									"activities": [
										{
											"name": "load from file prox",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message9",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file prox",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file prox').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "update etl parameters prox",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "load from file prox",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(greater(int(activity('load from file prox').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Kolkata''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set FILENAME=''',pipeline().parameters.sourceFileName,''', RUN_ID= TO_CHAR(current_timestamp(), ''YYYYMMDDHHmmss'') ,CRT_DTTM=CURRENT_TIMESTAMP() where CRT_DTTM is null;'),'Select ''no_update_needed'';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message10",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "update etl parameters prox",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters prox').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Move prox file to success",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "update etl parameters prox",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "otcSellout",
									"activities": [
										{
											"name": "load from file chn_otcsellout",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(TYPE = 'PARQUET') MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message11",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file chn_otcsellout",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file chn_otcsellout').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "update etl parameters chn_otcsellout",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "load from file chn_otcsellout",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(greater(int(activity('load from file chn_otcsellout').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set FILE_NAME =''',pipeline().parameters.sourceFileName,''', CRTD_DTTM=CURRENT_TIMESTAMP() where CRTD_DTTM is null;'),'Select ''no_update_needed'';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message12",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "update etl parameters chn_otcsellout",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters chn_otcsellout').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Move chn_otcsellout file to success",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "update etl parameters chn_otcsellout",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "RG_Clavis",
									"activities": [
										{
											"name": "load from file rg_clavis",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message13",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "load from file rg_clavis",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Failed : @{activity('load from file rg_clavis').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "update etl parameters rg_clavis",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "load from file rg_clavis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(greater(int(activity('load from file rg_clavis').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Kolkata''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set RUN_ID= TO_CHAR(current_timestamp(), ''YYYYMMDDHHmmss'') where RUN_ID is null;'),'Select ''no_update_needed'';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Set Error Message14",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "update etl parameters rg_clavis",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters rg_clavis').error?.message}",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Move rg_clavis file to success",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "update etl parameters rg_clavis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"deleteFilesAfterCompletion": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "BinarySource",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
															"type": "Expression"
														},
														"sourceFile": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "BinaryDestination",
													"type": "DatasetReference",
													"parameters": {
														"container": "@{pipeline().parameters.parameters.value[0].container}",
														"directory": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
															"type": "Expression"
														},
														"fileName": {
															"value": "@{pipeline().parameters.sourceFileName}",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "FileStructureValidation SP Call",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachSheetInExcel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": {
									"value": "CALL ASPSDL_RAW.FILE_VALIDATION(['@{replace(pipeline().parameters.sourceFileName,' ','_')}','@{pipeline().parameters.parameters.value[0].INDEX}','@{pipeline().parameters.parameters.value[0].Validation\n}','@{pipeline().parameters.parameters.value[0].val_file_name\n}','@{pipeline().parameters.parameters.value[0].val_file_extn\n}','@{pipeline().parameters.parameters.value[0].val_file_header}',@{pipeline().parameters.parameters.value[0].file_header_row_num},'@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}','@{pipeline().parameters.parameters.value[0].header_regex}','@{pipeline().parameters.sheetNames}'\n]);",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "mtd_process",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set fileName csv",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "audit start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(pipeline().parameters.sourceFileName,'(',''),')',''),' ','_'),'.xlsx','.csv'),'.xls','.csv'),',' ,'')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check csv_excel_multiExcel",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set fileName csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(or(equals(tolower(pipeline().parameters.parameters.value[0].source_extn)\n          ,'xlsx'),and(equals(tolower(pipeline().parameters.parameters.value[0].source_extn)\n          ,'xls'), not(equals(toupper(pipeline().parameters.parameters.value[0].is_direct_load), 'Y')))),\n     if( empty(pipeline().parameters.sheetNames),'2',''),'1')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "Wait",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "converttocsv",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ExcelSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".csv"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "adls_srcexcel",
													"type": "DatasetReference",
													"parameters": {
														"src_path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
															"type": "Expression"
														},
														"src_filename": {
															"value": "@pipeline().parameters.sourceFileName",
															"type": "Expression"
														},
														"src_sheetindex": {
															"value": "@pipeline().parameters.Parameters.value[0].sheet_index",
															"type": "Expression"
														},
														"src_container": {
															"value": "@pipeline().parameters.Parameters.value[0].container",
															"type": "Expression"
														},
														"src_startRange": {
															"value": "@pipeline().parameters.Parameters.value[0].startRange",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "csv",
													"type": "DatasetReference",
													"parameters": {
														"target_path": {
															"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
															"type": "Expression"
														},
														"target_filename": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"target_container": {
															"value": "@pipeline().parameters.Parameters.value[0].container",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Error Singlesheet Excel Conversion",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "converttocsv",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
													"type": "Expression"
												},
												"errorCode": "100"
											}
										},
										{
											"name": "Set Error Message_convertToCsv",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "converttocsv",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "errorMessage",
												"value": {
													"value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachSheetInExcel",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Check csv_excel_multiExcel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.sheetNames",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "converttocsv sheetwise",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "adls_srcexcel_sheetname",
											"type": "DatasetReference",
											"parameters": {
												"src_path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
													"type": "Expression"
												},
												"src_filename": {
													"value": "@pipeline().parameters.sourceFileName",
													"type": "Expression"
												},
												"src_sheetname": {
													"value": "@item()",
													"type": "Expression"
												},
												"src_container": {
													"value": "@pipeline().parameters.parameters.value[0].container",
													"type": "Expression"
												},
												"src_startRange": {
													"value": "@pipeline().parameters.Parameters.value[0].startRange",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "csv",
											"type": "DatasetReference",
											"parameters": {
												"target_path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
													"type": "Expression"
												},
												"target_filename": {
													"value": "@{replace(item(),' ','_')}.csv",
													"type": "Expression"
												},
												"target_container": {
													"value": "@pipeline().parameters.parameters.value[0].container",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Error Multisheet Excel Conversion",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error log - CsvConversion2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
											"type": "Expression"
										},
										"errorCode": "100"
									}
								},
								{
									"name": "error log - CsvConversion2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "converttocsv sheetwise",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "100",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - csv conversionsheetwise",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "converttocsv sheetwise",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while converting multisheet excel into separate CSVs : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_NAME**: @{item()} \\n\n**ERROR**: _@{activity('converttocsv sheetwise').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "There is some issue with source file. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_NAME**: @{item()} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload._",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@pipeline().parameters.Parameters.value[0].container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit fail - CsvConversion2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSheetInExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Error Encountered during load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check load method",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(contains(variables('errorMessage'),'Success'),equals(variables('errorMessage'),'NO'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "error log - load",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "Data Load Failed : @{variables('errorMessage')}",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "102",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Data load fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error log - load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Data Load Failed : @{variables('errorMessage')}",
											"type": "Expression"
										},
										"errorCode": "102"
									}
								},
								{
									"name": "Send error - data load failed",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error log - load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "Data Loading Failed : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{variables('errorMessage')}_",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "There is some issue with the source file as Data Loading was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _Kindly fix the file and reupload. More details on error - @{variables('errorMessage')}_",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@{pipeline().parameters.Parameters.value[0].container}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If Validation Passed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileStructureValidation SP Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION,'SUCCESS: File validation passed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail Validation",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "error log - validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
											"type": "Expression"
										},
										"errorCode": "103"
									}
								},
								{
									"name": "error log - validation",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "103",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - validation failed",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error log - validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "File Validation Failure : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}_",
												"type": "Expression"
											},
											"isBusinessNotification": "Yes",
											"isSupportNotification": "Yes",
											"businessMessage": {
												"value": "There is some issue with the structure of source file as File Validation was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload. More details on error,  - @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}_",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@{pipeline().parameters.Parameters.value[0].container}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "audit fail - validation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Validation Passed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - CsvConversion1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check csv_excel_multiExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - CsvConversion1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check csv_excel_multiExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@variables('errorMessage')",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "100",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "START",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "No",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Error Encountered during load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error Validation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Validation Passed",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error MultiSheet",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachSheetInExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error SingleSheet",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check csv_excel_multiExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@pipeline().parameters.Parameters.value[0].folder_path",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - sp fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FileStructureValidation SP Call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - sp fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FileStructureValidation SP Call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "@activity('FileStructureValidation SP Call').error?.message",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "@activity('FileStructureValidation SP Call').error?.errorCode",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error Validation_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FileStructureValidation SP Call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - csv conversion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check csv_excel_multiExcel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "There is some issue while converting excel into csv : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_INDEX**: @{pipeline().parameters.Parameters.value[0].sheet_index} \\n\n**ERROR**: _@{variables('errorMessage')}_",
									"type": "Expression"
								},
								"isBusinessNotification": "Yes",
								"isSupportNotification": "Yes",
								"businessMessage": {
									"value": "There is some issue with source file. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload._",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "audit fail - load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check load method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_audit_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"status": "FAIL",
								"input_row_count": 0,
								"output_row_count": 0,
								"jobname": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"message": {
									"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
									"type": "Expression"
								},
								"runid": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Archival Error load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check load method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Archival",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"usecase_id": {
									"value": "@pipeline().parameters.usecase_id",
									"type": "Expression"
								},
								"sequence_id": {
									"value": "@pipeline().parameters.sequence_id",
									"type": "Expression"
								},
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"isError": "Yes",
								"container": {
									"value": "@pipeline().parameters.Parameters.value[0].container",
									"type": "Expression"
								},
								"directory": {
									"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
									"type": "Expression"
								},
								"sourceFile": {
									"value": "@pipeline().parameters.sourceFileName",
									"type": "Expression"
								},
								"sheetNames": {
									"value": "@pipeline().parameters.sheetNames",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error log - check load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check load method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "write_error_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"process_id": {
									"value": "@pipeline().parameters.process_id",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"error_message": {
									"value": "Data Load Failed :@{variables('errorMessage')}",
									"type": "Expression"
								},
								"run_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"category": {
									"value": "@pipeline().parameters.category",
									"type": "Expression"
								},
								"phase_id": {
									"value": "@pipeline().parameters.phase_id",
									"type": "Expression"
								},
								"error_code": {
									"value": "102",
									"type": "Expression"
								},
								"job_id": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send error - check load failed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check load method",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "NotifiyTeamsChannelPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
									"type": "Expression"
								},
								"runId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": "FAIL",
								"supportMessage": {
									"value": "Data Loading Failed : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{variables('errorMessage')}_",
									"type": "Expression"
								},
								"isBusinessNotification": "No",
								"isSupportNotification": "Yes",
								"isError": "Yes",
								"container": {
									"value": "@{pipeline().parameters.Parameters.value[0].container}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"category": {
						"type": "string"
					},
					"usecase_id": {
						"type": "int"
					},
					"sequence_id": {
						"type": "int"
					},
					"process_id": {
						"type": "int"
					},
					"phase_id": {
						"type": "int"
					},
					"sourceFileName": {
						"type": "string"
					},
					"parameters": {
						"type": "object"
					},
					"sheetNames": {
						"type": "array"
					}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String",
						"defaultValue": "NO"
					},
					"sheetNames": {
						"type": "Array"
					},
					"paramfilename": {
						"type": "String"
					},
					"errorResponse1": {
						"type": "String"
					},
					"extractedDate": {
						"type": "String"
					},
					"countDifference": {
						"type": "Integer"
					},
					"upload_date": {
						"type": "String"
					},
					"upload_time": {
						"type": "String"
					},
					"queryOnSource": {
						"type": "String"
					},
					"isFileNameColumn": {
						"type": "Boolean"
					},
					"currentTimestamp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion/Sources/Utilities"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-28T12:21:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
				"[concat(variables('factoryId'), '/datasets/mtd_process')]",
				"[concat(variables('factoryId'), '/pipelines/write_error_log')]",
				"[concat(variables('factoryId'), '/pipelines/File_Archival')]",
				"[concat(variables('factoryId'), '/pipelines/NotifiyTeamsChannelPipeline')]",
				"[concat(variables('factoryId'), '/datasets/adls_srcexcel_sheetname')]",
				"[concat(variables('factoryId'), '/datasets/csv')]",
				"[concat(variables('factoryId'), '/datasets/BinarySource')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDestination')]",
				"[concat(variables('factoryId'), '/datasets/adls_srcexcel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_awswfqsgpw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawswfqsgpw0003')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": {
						"value": "\r\n",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mysql_server_csngjnjreport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdmsindprd001')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_mds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawswdvsgpw0006')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mysql_server_sink_multifile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": {
						"value": "\r\n",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/snowflake_sink_target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload002')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schemaname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleJapanDCL_kenvue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsawsbmntkyl001y')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce_Object_Veeva')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lssfhcpveevaind002')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "SalesforceV2Object",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/redshift_ga360')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsarsprdcon360')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "AmazonRedshiftTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleJapan_pl002')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsvmcitsapl002fjx2com')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleJapan_pl005')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsvawsbtcsgpl0005kenvuecom')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Odbc_databricks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsazrwbudbxprod')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ODBC_Dataset"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonRdsForOracleNA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsemartkor')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "AmazonRdsForOracleTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_awsbrasgpw0001')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbdev001smssqltpm001')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_sink_compressed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": {
						"value": "\r\n",
						"type": "Expression"
					},
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonRdsForCapturesqlrds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbdev001lsardsbpanorama001')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "AmazonRdsForSqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rg_clavis_redshift_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsarsprdcon360002')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SQL"
				},
				"annotations": [],
				"type": "AmazonRedshiftTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sftp_adls_source_binary_zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_container": {
						"type": "string"
					},
					"adls_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().adls_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_sink_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_container": {
						"type": "string"
					},
					"adls_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Miscellaneous Pipelines"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().adls_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sftp_adls_source_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_container": {
						"type": "string"
					},
					"adls_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().adls_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sftp_adls_sink_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001_ir001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_container": {
						"type": "string"
					},
					"adls_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets/SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().adls_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_srcexcel_sheetname')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_path": {
						"type": "string"
					},
					"src_filename": {
						"type": "string"
					},
					"src_sheetname": {
						"type": "string",
						"defaultValue": "Sheet1"
					},
					"src_container": {
						"type": "string"
					},
					"src_startRange": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().src_sheetname",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().src_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().src_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().src_container",
							"type": "Expression"
						}
					},
					"range": {
						"value": "@dataset().src_startRange",
						"type": "Expression"
					},
					"firstRowAsHeader": false
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"target_path": {
						"type": "string"
					},
					"target_filename": {
						"type": "string"
					},
					"target_container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().target_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().target_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().target_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "NoOfPlants",
						"type": "String"
					},
					{
						"name": "Testcolumn",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_srcexcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsdlsadbplt001')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_path": {
						"type": "string"
					},
					"src_filename": {
						"type": "string"
					},
					"src_sheetindex": {
						"type": "int"
					},
					"src_container": {
						"type": "string"
					},
					"src_startRange": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Framework_Datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().src_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().src_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().src_container",
							"type": "Expression"
						}
					},
					"sheetIndex": {
						"value": "@dataset().src_sheetindex",
						"type": "Expression"
					},
					"range": {
						"value": "@dataset().src_startRange",
						"type": "Expression"
					},
					"firstRowAsHeader": false
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}