{
	"name": "dataflow aggregation profit",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Sales_Data_sample",
						"type": "DatasetReference"
					},
					"name": "Salesdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Asia_Data_Sales_sample",
						"type": "DatasetReference"
					},
					"name": "AsiaDataCsv"
				},
				{
					"dataset": {
						"referenceName": "Europe_Data_Sales_sample",
						"type": "DatasetReference"
					},
					"name": "EuropeDataCsv"
				}
			],
			"transformations": [
				{
					"name": "AsiaData"
				},
				{
					"name": "EuropeData"
				},
				{
					"name": "TotalProfitAsia"
				},
				{
					"name": "TotalProfitEurope"
				},
				{
					"name": "AggregateEuropedata"
				},
				{
					"name": "AggregateAsia"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Region as string,",
				"          Country as string,",
				"          {Item Type} as string,",
				"          {Sales Channel} as string,",
				"          {Order Priority} as string,",
				"          {Order Date} as string,",
				"          {Order ID} as string,",
				"          {Ship Date} as string,",
				"          {Units Sold} as string,",
				"          {Unit Price} as string,",
				"          {Unit Cost} as string,",
				"          {Total Revenue} as decimal(10,0),",
				"          {Total Cost} as decimal(10,0),",
				"          {Total Profit} as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> Salesdata",
				"Salesdata filter(Region == 'Asia',",
				"     partitionBy('hash', 1)) ~> AsiaData",
				"Salesdata filter(Region == 'Europe') ~> EuropeData",
				"AsiaData derive({Total Profit Calculated} = {Total Revenue}-{Total Cost},",
				"     partitionBy('hash', 1)) ~> TotalProfitAsia",
				"EuropeData derive({Total Profit Calculated} = {Total Revenue}-{Total Cost}) ~> TotalProfitEurope",
				"TotalProfitEurope aggregate(groupBy(Region),",
				"     {Total Profit} = sum({Total Profit}),",
				"          {Total Profit Calculated} = sum({Total Profit Calculated})) ~> AggregateEuropedata",
				"TotalProfitAsia aggregate(groupBy(Region),",
				"     {Total Profit} = sum({Total Profit}),",
				"          {Total Profit Calculated} = sum({Total Profit Calculated})) ~> AggregateAsia",
				"AggregateAsia sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Asia_Sales.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> AsiaDataCsv",
				"AggregateEuropedata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Europe_Sales.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> EuropeDataCsv"
			]
		}
	}
}