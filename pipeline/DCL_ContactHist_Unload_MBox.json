{
	"name": "DCL_ContactHist_Unload_MBox",
	"properties": {
		"activities": [
			{
				"name": "Audit_Start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set parentFolder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeV2Source",
						"query": {
							"value": "Select \n\"'tableName'\" AS tableName,\n\"'schemaName'\" AS schemaName,\n\"'excludedColumns'\" AS excludedColumns,\n\"'target_folder_path'\" AS target_folder_path,\n\"'sftp_folder_path'\" AS sftp_folder_path,\n\"'fileExtn'\" AS fileExtn,\n\"'container'\" AS container,\n\"'zip_archive_path'\" AS zip_archive_path\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'tableName',\n'schemaName',\n'excludedColumns',\n'target_folder_path',\n'sftp_folder_path',\n'fileExtn',\n'container',\n'zip_archive_path'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set parentFolder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Audit_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "parentFolder",
					"value": {
						"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Fetch necessary columns",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "adfadbplt001lssnfkpltdnacore002",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "select\n\tcase\n\t\twhen lower(column_name) = '顧客id' then 'JPDCLEDW_INTEGRATION.encryption(顧客ID)  as 顧客ID '\n\t\telse column_name \n\tend as column_name\nfrom\n\t(select\tcolumn_name, ordinal_position\tfrom  INFORMATION_SCHEMA.COLUMNS WHERE table_name = '@{activity('read parameters').output.value[0].tableName}' and lower(column_name) not in (@{activity('read parameters').output.value[0].excludedColumns}) order by\tordinal_position asc )",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Fetch Distinct ChNo",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Append all column names",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "adfadbplt001lssnfkpltdnacore002",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "SELECT distinct \"コンタクト履歴番号\" from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName}",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "For every chno",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Fetch Distinct ChNo",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Fetch Distinct ChNo').output.resultSets[0].rows",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Set chno",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set date_yyyyMMddHHmmss",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "chno",
								"value": {
									"value": "@item().コンタクト履歴番号",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Fetch Data for every chno",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Set chno",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnacore002",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "select @{replace(variables('appendedList'),',,','')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where \"コンタクト履歴番号\" ='@{variables('chno')}'",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "create csv",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Fetch Data for every chno",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SnowflakeV2Source",
									"query": {
										"value": "select @{replace(variables('appendedList'),',,','')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where \"コンタクト履歴番号\" ='@{variables('chno')}'",
										"type": "Expression"
									},
									"exportSettings": {
										"type": "SnowflakeExportCopyCommand",
										"additionalCopyOptions": {
											"MAX_FILE_SIZE": "524288000",
											"OVERWRITE": "TRUE"
										},
										"additionalFormatOptions": {
											"NULL_IF": "()",
											"EMPTY_FIELD_AS_NULL": "FALSE"
										}
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "DNA_CORE_Dataset",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "data_export_csv_tsv_blob_sink",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"file": "@{variables('date_yyyyMMddHHmmss')}.@{activity('read parameters').output.value[0].fileExtn}",
										"quotesEnclosed": "N",
										"headerNeeded": "Y",
										"delimeter": ","
									}
								}
							]
						},
						{
							"name": "Set date_yyyyMMddHHmmss",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "date_yyyyMMddHHmmss",
								"value": {
									"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddHHmmss')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "error log - create csv",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "create csv",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('create csv').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('create csv').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error -create csv",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "create csv",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while writing csv file into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_yyyyMMddHHmmss')}.@{activity('read parameters').output.value[0].fileExtn} \\n\n**SOURCE_QUERY**: select \"コンタクト履歴番号\" as chno @{variables('appendedList')} from @{activity('read parameters').output.value[0].schemaName}.@{activity('read parameters').output.value[0].tableName} where chno='@{variables('chno')}' \\n\n**ERROR**: _@{activity('create csv').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "create csv error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "create csv",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error While writing csv into ADLS: @{activity('create csv').error?.errorCode} @{activity('create csv').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						}
					]
				}
			},
			{
				"name": "Append all column names",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Fetch necessary columns",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Fetch necessary columns').output.resultSets[0].rows",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Set appendedList",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set temp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "appendedList",
								"value": {
									"value": "@if(contains(item().COLUMN_NAME,'JPDCLEDW_INTEGRATION.encryption(顧客ID)  as 顧客ID'),concat(variables('temp'),', \"顧客id\"'),concat(variables('temp'),', ' ,'\"',item().COLUMN_NAME,'\"'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set temp",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "temp",
								"value": {
									"value": "@variables('appendedList')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If Files Generated",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "For every chno",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Fetch Distinct ChNo').output.resultSets[0].rowCount,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "zip files",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set date for zip",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"wildcardFolderPath": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"wildcardFileName": {
											"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AdlsCsvForZippedSrc",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"folder": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "AdlsCsvForZippedSink",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{variables('date_for_zip')}.zip",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "archive zip file",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "move to sftp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"wildcardFolderPath": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"wildcardFileName": {
											"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings",
										"compressionProperties": {
											"type": "ZipDeflateReadSettings"
										}
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AdlsCsvForZippedSink",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{variables('date_for_zip')}.zip",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "AdlsCsvForZippedSink",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].zip_archive_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{variables('date_for_zip')}.zip",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Delete csv files",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "zip files",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "AdlsCsvForZippedSrc",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "Set date for zip",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "date_for_zip",
								"value": {
									"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddHHmmss')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Delete archived zip",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "archive zip file",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "AdlsCsvForZippedSrc",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{variables('date_for_zip')}.zip",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "error log - zip files",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "zip files",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('zip files').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('zip files').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - zip files",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "zip files",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while zipping csv files into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv \\n\n**ERROR**: _@{activity('zip files').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "zip files error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "zip files",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error While zipping csv files into ADLS: @{activity('zip files').error?.errorCode} @{activity('zip files').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						},
						{
							"name": "error log - move to sftp",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "move to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('move to sftp').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('move to sftp').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - move to sftp",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "move to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while moving zip file from ADLS to SFTP : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**TARGET_FILE_PATH**: to be added \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**ERROR**: _@{activity('move to sftp').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "move to sftp error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "move to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error While moving zip file into SFTP: @{activity('move to sftp').error?.errorCode} @{activity('move to sftp').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						},
						{
							"name": "error log - archive zip file",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "archive zip file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('archive zip file').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('archive zip file').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - archive zip file",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "archive zip file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while archiving zipped file into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].zip_archive_path} \\n\n**TARGET_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**SOURCE_FILE_PATH**: @{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path} \\n\n**SOURCE_FILE_NAME**: @{variables('date_for_zip')}.zip \\n\n**ERROR**: _@{activity('archive zip file').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "archive zip file error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "archive zip file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error While archiving zip file into ADLS: @{activity('archive zip file').error?.errorCode} @{activity('archive zip file').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						},
						{
							"name": "move to sftp",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "zip files",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"deleteFilesAfterCompletion": false
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "SftpWriteSettings",
										"operationTimeout": "01:00:00",
										"useTempFileRename": true
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "BinarySource",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
										"sourceFile": "@{variables('date_for_zip')}.zip"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "JPDCL_Binary_SFTP_Sink",
									"type": "DatasetReference",
									"parameters": {
										"directory": "@{activity('read parameters').output.value[0].sftp_folder_path}",
										"filename": {
											"value": "@{variables('date_for_zip')}.zip",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Delete csv files error case",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "archive zip file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "AdlsCsvForZippedSrc",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"folder": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}"
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}*.csv",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "move end file to sftp",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Delete archived zip",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"deleteFilesAfterCompletion": false
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "SftpWriteSettings",
										"operationTimeout": "01:00:00",
										"useTempFileRename": true
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "BinarySource",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
										"sourceFile": "do_not_delete.end"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "JPDCL_Binary_SFTP_Sink",
									"type": "DatasetReference",
									"parameters": {
										"directory": "@{activity('read parameters').output.value[0].sftp_folder_path}",
										"filename": {
											"value": "@{variables('date_for_zip')}.end",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "error log - move end file",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "move end file to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('move end file to sftp').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('move end file to sftp').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error -move end file",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "move end file to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while moving zero bytes file to SFTP : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**ZERO_BYTE_FILE_NAME**: @{variables('date_for_zip')}.end \\n\n**ERROR**: _@{activity('move end file to sftp').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "move end file error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "move end file to sftp",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error While moving zero bytes file into ADLS: @{activity('move end file to sftp').error?.errorCode} @{activity('move end file to sftp').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						}
					]
				}
			},
			{
				"name": "Audit_Finish_Success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Files Generated",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Files Generated",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error Fetching necessary columns",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch necessary columns",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@activity('Fetch necessary columns').error?.message",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": {
							"value": "@activity('Fetch necessary columns').error?.errorCode",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Fail_0",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch necessary columns",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send Error notification Fetch necessary columns",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch necessary columns",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "Error fetching reqired columns from contact_hist table: \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch necessary columns').error?.message}_\n",
							"type": "Expression"
						},
						"isBusinessNotification": "No",
						"isSupportNotification": "Yes",
						"isError": "Yes"
					}
				}
			},
			{
				"name": "error Fetchingdistinct chno",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch Distinct ChNo",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@activity('Fetch Distinct ChNo').error?.message",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": {
							"value": "@activity('Fetch Distinct ChNo').error?.errorCode",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Fail_1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch Distinct ChNo",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send Error notification Fetch distinct chno",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fetch Distinct ChNo",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "Error fetching distinct chno from contact_hist table: \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ERROR**: _@{activity('Fetch Distinct ChNo').error?.message}_\n",
							"type": "Expression"
						},
						"isBusinessNotification": "No",
						"isSupportNotification": "Yes",
						"isError": "Yes"
					}
				}
			},
			{
				"name": "Audit_Finish_Fail_2",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "For every chno",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			},
			"sequence_id": {
				"type": "int"
			},
			"process_id": {
				"type": "int"
			}
		},
		"variables": {
			"parentFolder": {
				"type": "String"
			},
			"fileNameWithDate": {
				"type": "String"
			},
			"date_yyyyMMddHHmmss": {
				"type": "String"
			},
			"chno": {
				"type": "String"
			},
			"appendedList": {
				"type": "String",
				"defaultValue": ","
			},
			"temp": {
				"type": "String"
			},
			"date_for_zip": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Consumption/Consumption Systems"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-23T12:26:48Z"
	}
}