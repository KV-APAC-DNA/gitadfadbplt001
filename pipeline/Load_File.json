{
	"name": "Load_File",
	"properties": {
		"activities": [
			{
				"name": "audit success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Execute Archival Success",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Check load method",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "If Validation Passed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.parameters.value[0].load_method",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "copy",
							"activities": [
								{
									"name": "load from file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file').error?.message}",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "sp",
							"activities": [
								{
									"name": "Load with SP",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set paramFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "CALL @{pipeline().parameters.parameters.value[0].sp_name} (['@{variables('paramfilename')}','@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}','@{pipeline().parameters.parameters.value[0].target_table}','@{pipeline().parameters.sheetNames}']);\n",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "mtd_process",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Set Error Message",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Load with SP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('Load with SP').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Error Message from SP",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Load with SP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "@string(activity('Load with SP').output.value[0])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set paramFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "paramfilename",
										"value": {
											"value": "@if(\n    equals(toupper(pipeline().parameters.parameters.value[0].is_direct_load), 'Y'),\n     pipeline().parameters.sourceFileName,\n     variables('fileName') )",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "JapanDCL",
							"activities": [
								{
									"name": "load from file 2",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message3",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file 2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file 2').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set extracted date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set currentTimestamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "extractedDate",
										"value": {
											"value": "@if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'mykokya_param'),variables('currentTimestamp') ,if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'mykokya'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'ec_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'cc_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'acgel_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'vc100_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'cluster_predictionresult'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'affiliate_cancel_receive'), variables('currentTimestamp') , if(equals(toLower(pipeline().parameters.parameters.value[0].target_table), 'rakutenorderdetail'), variables('currentTimestamp') , take(replace(replace(pipeline().parameters.sourceFileName, pipeline().parameters.parameters.value[0].FILE_SPEC,'' ),'_',''),8))))))))))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update etl parameters",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "load from file 2",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set extracted date",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set isFileNameColumn",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(greater(int(activity('load from file 2').output.resultSets[0].rows[0].rows_loaded),0),if(variables('isFileNameColumn'),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''', FILE_NAME=''',variables('fileName'),''',INSERTED_DATE=CURRENT_TIMESTAMP(),INSERTED_BY=''ETL_Batch'',UPDATED_DATE=CURRENT_TIMESTAMP(),UPDATED_BY='''' where SOURCE_FILE_DATE is null;'),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''',INSERTED_DATE=CURRENT_TIMESTAMP(),INSERTED_BY=''ETL_Batch'',UPDATED_DATE=CURRENT_TIMESTAMP(),UPDATED_BY='''' where SOURCE_FILE_DATE is null;')),'Select ''no_update_needed'';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message4",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update etl parameters",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move dcl file to success",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update etl parameters",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set isFileNameColumn",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "isFileNameColumn",
										"value": {
											"value": "@if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'SFCC_PRODUCT_CATEGORY'),true,if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'CONTACT_HIST'), true, if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'SFCC_PRODUCT_MST'), true, if(equals(toUpper(pipeline().parameters.parameters.value[0].target_table), 'CLUSTERMAPPING'), true, false))))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set currentTimestamp",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentTimestamp",
										"value": {
											"value": "@formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyyMMdd')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "Japan",
							"activities": [
								{
									"name": "load from file 2 japan",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message5",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file 2 japan",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file 2 japan').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set extracted date japan",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "extractedDate",
										"value": {
											"value": "@if(contains(pipeline().parameters.parameters.value[0].FILE_SPEC,'OTHERS'),split(pipeline().parameters.sourceFileName, '_')[2],split(pipeline().parameters.sourceFileName,'_')[1])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update etl parameters japan",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "load from file 2 japan",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set extracted date japan",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set upload_date tokyo",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set upload_time tokyo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(greater(int(activity('load from file 2 japan').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set SOURCE_FILE_DATE=''',variables('extractedDate'),''',upload_dt=''',variables('upload_date'),''',upload_time=''',variables('upload_time'),''' , FILE_NAME=''',variables('fileName'),''' where SOURCE_FILE_DATE is null;'),'Select ''no_update_needed'';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message6",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update etl parameters japan",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters japan').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set upload_date tokyo",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "upload_date",
										"value": {
											"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'MM-dd-yyyy')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set upload_time tokyo",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "upload_time",
										"value": {
											"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'HH:mm:ss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move japan file to success",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update etl parameters japan",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						},
						{
							"value": "PROX",
							"activities": [
								{
									"name": "load from file prox",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message9",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file prox",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file prox').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update etl parameters prox",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "load from file prox",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(greater(int(activity('load from file prox').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Kolkata''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set FILENAME=''',pipeline().parameters.sourceFileName,''', RUN_ID= TO_CHAR(current_timestamp(), ''YYYYMMDDHHmmss'') ,CRT_DTTM=CURRENT_TIMESTAMP() where CRT_DTTM is null;'),'Select ''no_update_needed'';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message10",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update etl parameters prox",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters prox').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move prox file to success",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update etl parameters prox",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						},
						{
							"value": "otcSellout",
							"activities": [
								{
									"name": "load from file chn_otcsellout",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(TYPE = 'PARQUET') MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message11",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file chn_otcsellout",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file chn_otcsellout').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update etl parameters chn_otcsellout",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "load from file chn_otcsellout",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(greater(int(activity('load from file chn_otcsellout').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Singapore''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set FILE_NAME =''',pipeline().parameters.sourceFileName,''', CRTD_DTTM=CURRENT_TIMESTAMP() where CRTD_DTTM is null;'),'Select ''no_update_needed'';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message12",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update etl parameters chn_otcsellout",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters chn_otcsellout').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move chn_otcsellout file to success",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update etl parameters chn_otcsellout",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						},
						{
							"value": "RG_Clavis",
							"activities": [
								{
									"name": "load from file rg_clavis",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage,'/',if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)\n, '/',pipeline().parameters.parameters.value[0].folder_path,'/',pipeline().parameters.sourceFileName\n,'''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message13",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "load from file rg_clavis",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Failed : @{activity('load from file rg_clavis').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "update etl parameters rg_clavis",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "load from file rg_clavis",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(greater(int(activity('load from file rg_clavis').output.resultSets[0].rows[0].rows_loaded),0),concat('alter session set  timezone =''Asia/Kolkata''; update ',pipeline().parameters.parameters.value[0].target_schema,'.',pipeline().parameters.parameters.value[0].target_table, ' set RUN_ID= TO_CHAR(current_timestamp(), ''YYYYMMDDHHmmss'') where RUN_ID is null;'),'Select ''no_update_needed'';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set Error Message14",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "update etl parameters rg_clavis",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Load Success but updating etl parameters failed : @{activity('update etl parameters rg_clavis').error?.message}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move rg_clavis file to success",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update etl parameters rg_clavis",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}",
													"type": "Expression"
												},
												"sourceFile": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": "@{pipeline().parameters.parameters.value[0].container}",
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.parameters.value[0].folder_path}/processed/success/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy')}/@{formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'MM')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{pipeline().parameters.sourceFileName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					]
				}
			},
			{
				"name": "FileStructureValidation SP Call",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ForEachSheetInExcel",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeV2Source",
						"query": {
							"value": "CALL ASPSDL_RAW.FILE_VALIDATION(['@{replace(pipeline().parameters.sourceFileName,' ','_')}','@{pipeline().parameters.parameters.value[0].INDEX}','@{pipeline().parameters.parameters.value[0].Validation\n}','@{pipeline().parameters.parameters.value[0].val_file_name\n}','@{pipeline().parameters.parameters.value[0].val_file_extn\n}','@{pipeline().parameters.parameters.value[0].val_file_header}',@{pipeline().parameters.parameters.value[0].file_header_row_num},'@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}','@{pipeline().parameters.parameters.value[0].header_regex}','@{pipeline().parameters.sheetNames}'\n]);",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set fileName csv",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "fileName",
					"value": {
						"value": "@replace(replace(replace(replace(replace(replace(pipeline().parameters.sourceFileName,'(',''),')',''),' ','_'),'.xlsx','.csv'),'.xls','.csv'),',' ,'')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Check csv_excel_multiExcel",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Set fileName csv",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(or(equals(tolower(pipeline().parameters.parameters.value[0].source_extn)\n          ,'xlsx'),and(equals(tolower(pipeline().parameters.parameters.value[0].source_extn)\n          ,'xls'), not(equals(toupper(pipeline().parameters.parameters.value[0].is_direct_load), 'Y')))),\n     if( empty(pipeline().parameters.sheetNames),'2',''),'1')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "1",
							"activities": [
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						},
						{
							"value": "2",
							"activities": [
								{
									"name": "converttocsv",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "adls_srcexcel",
											"type": "DatasetReference",
											"parameters": {
												"src_path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
													"type": "Expression"
												},
												"src_filename": {
													"value": "@pipeline().parameters.sourceFileName",
													"type": "Expression"
												},
												"src_sheetindex": {
													"value": "@pipeline().parameters.Parameters.value[0].sheet_index",
													"type": "Expression"
												},
												"src_container": {
													"value": "@pipeline().parameters.Parameters.value[0].container",
													"type": "Expression"
												},
												"src_startRange": {
													"value": "@pipeline().parameters.Parameters.value[0].startRange",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "csv",
											"type": "DatasetReference",
											"parameters": {
												"target_path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
													"type": "Expression"
												},
												"target_filename": {
													"value": "@variables('fileName')",
													"type": "Expression"
												},
												"target_container": {
													"value": "@pipeline().parameters.Parameters.value[0].container",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Error Singlesheet Excel Conversion",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "converttocsv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
											"type": "Expression"
										},
										"errorCode": "100"
									}
								},
								{
									"name": "Set Error Message_convertToCsv",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "converttocsv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "ForEachSheetInExcel",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Check csv_excel_multiExcel",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.sheetNames",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "converttocsv sheetwise",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ExcelSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "adls_srcexcel_sheetname",
									"type": "DatasetReference",
									"parameters": {
										"src_path": {
											"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
											"type": "Expression"
										},
										"src_filename": {
											"value": "@pipeline().parameters.sourceFileName",
											"type": "Expression"
										},
										"src_sheetname": {
											"value": "@item()",
											"type": "Expression"
										},
										"src_container": {
											"value": "@pipeline().parameters.parameters.value[0].container",
											"type": "Expression"
										},
										"src_startRange": {
											"value": "@pipeline().parameters.Parameters.value[0].startRange",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "csv",
									"type": "DatasetReference",
									"parameters": {
										"target_path": {
											"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
											"type": "Expression"
										},
										"target_filename": {
											"value": "@{replace(item(),' ','_')}.csv",
											"type": "Expression"
										},
										"target_container": {
											"value": "@pipeline().parameters.parameters.value[0].container",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Error Multisheet Excel Conversion",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "error log - CsvConversion2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
									"type": "Expression"
								},
								"errorCode": "100"
							}
						},
						{
							"name": "error log - CsvConversion2",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "converttocsv sheetwise",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "100",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - csv conversionsheetwise",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "converttocsv sheetwise",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while converting multisheet excel into separate CSVs : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_NAME**: @{item()} \\n\n**ERROR**: _@{activity('converttocsv sheetwise').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "Yes",
									"isSupportNotification": "Yes",
									"businessMessage": {
										"value": "There is some issue with source file. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_NAME**: @{item()} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload._",
										"type": "Expression"
									},
									"isError": "Yes",
									"container": {
										"value": "@pipeline().parameters.Parameters.value[0].container",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "audit fail - CsvConversion2",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEachSheetInExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If Error Encountered during load",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(contains(variables('errorMessage'),'Success'),equals(variables('errorMessage'),'NO'))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "error log - load",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "Data Load Failed : @{variables('errorMessage')}",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "102",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Data load fail",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "error log - load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Data Load Failed : @{variables('errorMessage')}",
									"type": "Expression"
								},
								"errorCode": "102"
							}
						},
						{
							"name": "Send error - data load failed",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "error log - load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "Data Loading Failed : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{variables('errorMessage')}_",
										"type": "Expression"
									},
									"isBusinessNotification": "Yes",
									"isSupportNotification": "Yes",
									"businessMessage": {
										"value": "There is some issue with the source file as Data Loading was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _Kindly fix the file and reupload. More details on error - @{variables('errorMessage')}_",
										"type": "Expression"
									},
									"isError": "Yes",
									"container": {
										"value": "@{pipeline().parameters.Parameters.value[0].container}",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If Validation Passed",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "FileStructureValidation SP Call",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION,'SUCCESS: File validation passed')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Fail Validation",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "error log - validation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
									"type": "Expression"
								},
								"errorCode": "103"
							}
						},
						{
							"name": "error log - validation",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "103",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - validation failed",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "error log - validation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "File Validation Failure : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}_",
										"type": "Expression"
									},
									"isBusinessNotification": "Yes",
									"isSupportNotification": "Yes",
									"businessMessage": {
										"value": "There is some issue with the structure of source file as File Validation was failed. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload. More details on error,  - @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}_",
										"type": "Expression"
									},
									"isError": "Yes",
									"container": {
										"value": "@{pipeline().parameters.Parameters.value[0].container}",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "audit fail - validation",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Validation Passed",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail - CsvConversion1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check csv_excel_multiExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error log - CsvConversion1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check csv_excel_multiExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@variables('errorMessage')",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": {
							"value": "100",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Error Encountered during load",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Error Encountered during load",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If  japan 002fjx2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "No",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Error Encountered during load",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error Validation",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Validation Passed",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error MultiSheet",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEachSheetInExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error SingleSheet",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check csv_excel_multiExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@pipeline().parameters.Parameters.value[0].folder_path",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail - sp fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "FileStructureValidation SP Call",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error log - sp fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "FileStructureValidation SP Call",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@activity('FileStructureValidation SP Call').error?.message",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": {
							"value": "@activity('FileStructureValidation SP Call').error?.errorCode",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error Validation_copy1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "FileStructureValidation SP Call",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send error - csv conversion",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check csv_excel_multiExcel",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "There is some issue while converting excel into csv : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**SHEET_INDEX**: @{pipeline().parameters.Parameters.value[0].sheet_index} \\n\n**ERROR**: _@{variables('errorMessage')}_",
							"type": "Expression"
						},
						"isBusinessNotification": "Yes",
						"isSupportNotification": "Yes",
						"businessMessage": {
							"value": "There is some issue with source file. Following are the details of the file: \\n\n**FOLDER_PATH**: @{pipeline().parameters.Parameters.value[0].container}/@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _An issue is reported with this source file which loads data into @{pipeline().parameters.parameters.value[0].target_table} table under @{pipeline().parameters.parameters.value[0].target_schema} schema. Kindly fix and reupload._",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail - load",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Archival Error load",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "File_Archival",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"sequence_id": {
							"value": "@pipeline().parameters.sequence_id",
							"type": "Expression"
						},
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"isError": "Yes",
						"container": {
							"value": "@pipeline().parameters.Parameters.value[0].container",
							"type": "Expression"
						},
						"directory": {
							"value": "@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')}",
							"type": "Expression"
						},
						"sourceFile": {
							"value": "@pipeline().parameters.sourceFileName",
							"type": "Expression"
						},
						"sheetNames": {
							"value": "@pipeline().parameters.sheetNames",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error log - check load",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "Data Load Failed :@{variables('errorMessage')}",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": {
							"value": "102",
							"type": "Expression"
						},
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send error - check load failed",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "Data Loading Failed : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{pipeline().parameters.Parameters.value[0].container} \\n\n**FOLDER_PATH**: @{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{pipeline().parameters.Parameters.value[0].FOLDER_PATH}@{if(equals(pipeline().parameters.Parameters.value[0].hasDateInPath,'Y'),formatDateTime(convertFromUtc(utcnow(),'Singapore Standard Time'),'yyyy-MM-dd'),'')} \\n\n**FILE_NAME**: @{pipeline().parameters.sourceFileName} \\n\n**ERROR**: _@{variables('errorMessage')}_",
							"type": "Expression"
						},
						"isBusinessNotification": "No",
						"isSupportNotification": "Yes",
						"isError": "Yes",
						"container": {
							"value": "@{pipeline().parameters.Parameters.value[0].container}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If  japan 002fjx2",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check load method",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals(pipeline().parameters.parameters.value[0].QueryOnSource, 'NA' ))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Script Run Query on Source",
							"type": "Script",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lsvmcitsapl002fjx2com",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@pipeline().parameters.parameters.value[0].QueryOnSource",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"sequence_id": {
				"type": "int"
			},
			"process_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			},
			"sourceFileName": {
				"type": "string"
			},
			"parameters": {
				"type": "object"
			},
			"sheetNames": {
				"type": "array"
			}
		},
		"variables": {
			"fileName": {
				"type": "String"
			},
			"errorMessage": {
				"type": "String",
				"defaultValue": "NO"
			},
			"sheetNames": {
				"type": "Array"
			},
			"paramfilename": {
				"type": "String"
			},
			"errorResponse1": {
				"type": "String"
			},
			"extractedDate": {
				"type": "String"
			},
			"countDifference": {
				"type": "Integer"
			},
			"upload_date": {
				"type": "String"
			},
			"upload_time": {
				"type": "String"
			},
			"queryOnSource": {
				"type": "String"
			},
			"isFileNameColumn": {
				"type": "Boolean"
			},
			"currentTimestamp": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Ingestion/Sources/Utilities"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T12:21:01Z"
	}
}