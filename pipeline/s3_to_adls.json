{
	"name": "s3_to_adls",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get_metadata').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "get file name",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "set last run time",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "s3_source_binary1",
									"type": "DatasetReference",
									"parameters": {
										"bucket": {
											"value": "@item().S3_BUCKET",
											"type": "Expression"
										},
										"path": {
											"value": "@item().S3_PATH",
											"type": "Expression"
										},
										"file": {
											"value": "@concat('*',item().S3_FILE,'*.*')",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"childItems"
								],
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@if(not(pipeline().parameters.re_run),\nvariables('last_modified'),'')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "Filter Only File",
							"type": "Filter",
							"dependsOn": [
								{
									"activity": "get file name",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get file name').output.childItems",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().type,'File')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set last run time",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set delete_source_file",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "last_modified",
								"value": {
									"value": "@item().last_modified",
									"type": "Expression"
								}
							}
						},
						{
							"name": "if file exists",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Filter Only File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(activity('Filter Only File').output.FilteredItemsCount,0)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "execute s3_adls_child",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "s3_adls_child",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"s3_bucket": {
													"value": "@item().S3_BUCKET",
													"type": "Expression"
												},
												"s3_path": {
													"value": "@item().S3_PATH",
													"type": "Expression"
												},
												"s3_file": {
													"value": "@activity('Filter Only File').output.value",
													"type": "Expression"
												},
												"adls_container": {
													"value": "@item().ADLS_CONTAINER",
													"type": "Expression"
												},
												"adls_path": {
													"value": "@item().ADLS_PATH",
													"type": "Expression"
												},
												"last_modified": {
													"value": "@if(not(pipeline().parameters.re_run),\nvariables('last_modified'),'')",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "log_successful_copy",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "execute s3_adls_child",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "adfadbplt001lssnfkpltdnaload",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "NonQuery",
													"text": {
														"value": "alter session set  timezone ='Asia/Singapore';\nINSERT INTO META_RAW.S3_TO_ADLS_AUDIT_LOG \n(S3_TO_ADLS_ID, GROUP_ID, S3_BUCKET, S3_PATH, S3_FILE, RUN_AT, STATUS)\nVALUES\n(@{item().id},\n@{pipeline().parameters.Group_id},\n'@{item().S3_BUCKET}',\n'@{item().S3_PATH}',\n'@{item().s3_file}',\nCURRENT_TIMESTAMP(),\n'SUCCESS'\n)",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									},
									{
										"name": "log_failed_copy",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "execute s3_adls_child",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "adfadbplt001lssnfkpltdnaload",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "NonQuery",
													"text": {
														"value": "alter session set  timezone ='Asia/Singapore';\nINSERT INTO META_RAW.S3_TO_ADLS_AUDIT_LOG \n(S3_TO_ADLS_ID, GROUP_ID, S3_BUCKET, S3_PATH, S3_FILE, RUN_AT, STATUS)\nVALUES\n(@{item().id},\n@{pipeline().parameters.Group_id},\n'@{item().S3_BUCKET}',\n'@{item().S3_PATH}',\n'@{item().s3_file}',\nCURRENT_TIMESTAMP(),\n'FAILED'\n)",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									}
								]
							}
						},
						{
							"name": "set delete_source_file",
							"type": "SetVariable",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "delete_source_file",
								"value": {
									"value": "@item().delete_source_file",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "get_metadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat('SELECT AD.*,IFNULL(ADL.RUN_AT,''2000-01-01 01:00:00'') AS LAST_MODIFIED from meta_raw.s3_to_adls  AD\nLEFT JOIN \n(\nSELECT \n    MAX(RUN_AT) RUN_AT,\n    S3_TO_ADLS_ID\nFROM META_RAW.S3_TO_ADLS_AUDIT_LOG\nWHERE\n    STATUS = ''SUCCESS''\nGROUP BY S3_TO_ADLS_ID\n) ADL\nON AD.ID = ADL.S3_TO_ADLS_ID where AD.GROUP_ID=',pipeline().parameters.Group_id)",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"Group_id": {
				"type": "string",
				"defaultValue": "23"
			},
			"re_run": {
				"type": "bool",
				"defaultValue": false
			}
		},
		"variables": {
			"list_of_file": {
				"type": "Array"
			},
			"s3_bucket": {
				"type": "String"
			},
			"s3_path": {
				"type": "String"
			},
			"adls_container": {
				"type": "String"
			},
			"adls_path": {
				"type": "String"
			},
			"last_modified": {
				"type": "String"
			},
			"delete_source_file": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Miscellaneous Pipelines/s3_to_adls"
		},
		"annotations": []
	}
}