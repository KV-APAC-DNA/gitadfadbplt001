{
	"name": "write_audit_log",
	"properties": {
		"activities": [
			{
				"name": "write to audit table",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "adfadbplt001lssnfkpltdnaload",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "processid",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "pipelineid",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "runid",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "jobname",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "message",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "status",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "incount",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "outcount",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "category",
									"type": "String",
									"value": {
										"value": "@if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "usecase_id",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "group_id",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.group_id, null),0,pipeline().parameters.group_id)",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "phase_id",
									"type": "Int32",
									"value": {
										"value": "@if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": {
								"value": "alter session set  timezone ='Asia/Singapore';\nSET DURATION =(\nSELECT DATEDIFF(s, MOMENT, CURRENT_TIMESTAMP())\nFROM META_RAW.PROCESS_AUDIT_LOG WHERE RUN_ID='@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}');\n\nINSERT INTO META_RAW.PROCESS_AUDIT_LOG\n(\nPROCESS_ID,\nPHASE_ID,\nMOMENT,\nDURATION,\nPIPELINE_ID,\nRUN_ID,\nJOB_NAME,\nMESSAGE,\nPROCESS_STATUS,\nINPUT_ROW_COUNT,\nOUTPUT_ROW_COUNT,\nCATEGORY,\nUSECASE_ID\n)\nVALUES\n(\n@{if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)},\n@{if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)},\nCURRENT_TIMESTAMP,\n$DURATION,\n'@{if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)}',\n'@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}',\n'@{if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)}',\n'@{if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)}',\nTRIM(UPPER('@{if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)}')),\n@{if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)},\n@{if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)},\n'@{if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)}',\n@{if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)}\n);\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"process_id": {
				"type": "int"
			},
			"status": {
				"type": "string"
			},
			"input_row_count": {
				"type": "int"
			},
			"output_row_count": {
				"type": "int"
			},
			"jobname": {
				"type": "string"
			},
			"message": {
				"type": "string"
			},
			"runid": {
				"type": "string"
			},
			"pipeline_id": {
				"type": "string"
			},
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"group_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			}
		},
		"variables": {
			"subscriptionid": {
				"type": "String"
			},
			"test_variable": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Logging"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-27T17:06:39Z"
	}
}