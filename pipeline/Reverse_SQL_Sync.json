{
	"name": "Reverse_SQL_Sync",
	"properties": {
		"activities": [
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeV2Source",
						"query": {
							"value": "Select SNOWFLAKE_STAGE,IS_INCREMENTAL,WATERMARK_VALUE,\n\"'container'\" AS container,\n\"'landing_file_path'\" AS landing_file_path,\n\"'landing_file_name'\" AS landing_file_name,\n\"'target_schema_table'\" AS target_schema_table,\n\"'source_schema_table'\" AS source_schema_table,\n\"'source_query'\" AS source_query,\n\"'truncate_and_load'\" AS truncate_and_load,\n\"'decide_source'\" AS decide_source,\nIFNULL(\"'truncate_source'\",'N') AS truncate_source,\n\"'trunc_source_schema_table'\" AS trunc_source_schema_table\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT, IS_INCREMENTAL,WATERMARK_VALUE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS P USING (PARAMETER_GROUP_ID)\nLEFT JOIN (SELECT PROCESS_ID,WATERMARK_VALUE FROM META_RAW.INCREMENTAL_WATERMARK\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND LOAD_STATUS = 'SUCCESS'\nQUALIFY ROW_NUMBER() OVER(PARTITION BY PROCESS_ID ORDER BY INSERT_TIMESTAMP DESC) = 1) I USING(PROCESS_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'container',\n'landing_file_path',\n'landing_file_name',\n'target_schema_table',\n'source_schema_table',\n'source_query',\n'truncate_and_load',\n'decide_source',\n'truncate_source',\n'trunc_source_schema_table'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Switch_Source_get_source_count",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "If Truncate Target",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@{activity('read parameters').output.value[0].decide_source}",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "dna_core",
							"activities": [
								{
									"name": "Script Source Count Core",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnacore002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "SELECT count(*) AS \"count\" FROM @{activity('read parameters').output.value[0].source_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set sourceCount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Source Count Core",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sourceCount",
										"value": {
											"value": "@int(activity('Script Source Count Core').output.resultSets[0].rows[0].count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get flagDataPresent",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set sourceCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnacore002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{activity('read parameters').output.value[0].source_query} LIMIT 2;",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set sourceCount2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get flagDataPresent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sourceCount2",
										"value": {
											"value": "@activity('Get flagDataPresent').output.resultSetCount",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "dna_load",
							"activities": [
								{
									"name": "Script Source Count Load",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "SELECT count(*) AS \"count\" FROM @{activity('read parameters').output.value[0].source_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set sourceCount load",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Source Count Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sourceCount",
										"value": {
											"value": "@int(activity('Script Source Count Load').output.resultSets[0].rows[0].count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get flagDataPresent load",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set sourceCount load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{activity('read parameters').output.value[0].source_query} LIMIT 2;",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set sourceCount2 load",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get flagDataPresent load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sourceCount2",
										"value": {
											"value": "@activity('Get flagDataPresent load').output.resultSetCount",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Fail - Unknown Source",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Set error unknown source",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@variables('errorResponse1')",
									"type": "Expression"
								},
								"errorCode": "404"
							}
						},
						{
							"name": "Set error unknown source",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorResponse1",
								"value": "Fail - Source Unknown"
							}
						}
					]
				}
			},
			{
				"name": "Switch Source",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Switch_Source_get_source_count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(and(greater(variables('sourceCount'),0),greater(variables('sourceCount2'),0)),activity('read parameters').output.value[0].decide_source,'noDataLoad')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "dna_core",
							"activities": [
								{
									"name": "Copy data dna core to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "@{activity('read parameters').output.value[0].source_query}",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand",
												"additionalCopyOptions": {
													"MAX_FILE_SIZE": "524288000"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DNA_CORE_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "csv_blob_sink",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
													"type": "Expression"
												},
												"file": {
													"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - move dna_core_to_adls",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data dna core to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Copy data dna core to adls').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Copy data dna core to adls').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - mds_sf_core_to_adls",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data dna core to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while copying data from snowflake core to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data dna core to adls').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes",
											"container": {
												"value": "@{activity('read parameters').output.value[0].container}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error_copying_dna_core",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Copy data dna core to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "snowflake_core_to_adls: @{activity('Copy data dna core to adls').error?.errorCode} @{activity('Copy data dna core to adls').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Copy data adls to sql",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data dna core to adls",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sql_server_sink_soh_delim",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
													"type": "Expression"
												},
												"file": {
													"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerSink",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[0]",
													"type": "Expression"
												},
												"table": {
													"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[1]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Script Target Count post sync",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lsawswdvsgpw0005",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Execute Archival",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "File_Archival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"isError": "No",
											"container": {
												"value": "@activity('read parameters').output.value[0].container",
												"type": "Expression"
											},
											"directory": {
												"value": "@{activity('read parameters').output.value[0].landing_file_path}",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
												"type": "Expression"
											},
											"sheetNames": {
												"value": "@variables('emptyArray')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error log - move adls to sql",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Copy data adls to sql').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Copy data adls to sql').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - mds_adls_to_sql",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while copying data from adls to sql : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data adls to sql').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes",
											"container": {
												"value": "@{activity('read parameters').output.value[0].container}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error_copying_adls_to_sql",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "adls_to_sql: @{activity('Copy data adls to sql').error?.errorCode} @{activity('Copy data adls to sql').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Execute Archival_error",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "File_Archival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@activity('read parameters').output.value[0].container",
												"type": "Expression"
											},
											"directory": {
												"value": "@{activity('read parameters').output.value[0].landing_file_path}",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
												"type": "Expression"
											},
											"sheetNames": {
												"value": "@variables('emptyArray')",
												"type": "Expression"
											}
										}
									}
								}
							]
						},
						{
							"value": "dna_load",
							"activities": [
								{
									"name": "Copy data dna load to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "@{activity('read parameters').output.value[0].source_query}",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand",
												"additionalCopyOptions": {
													"MAX_FILE_SIZE": "524288000"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DNA_LOAD_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "csv_blob_sink",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
													"type": "Expression"
												},
												"file": {
													"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error log - move dna_load_to_adls",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data dna load to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Copy data dna load to adls').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Copy data dna load to adls').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - mds_sf_load_to_adls",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data dna load to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while copying data from snowflake core to adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data dna load to adls').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes",
											"container": {
												"value": "@{activity('read parameters').output.value[0].container}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error_copying_dna_load",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Copy data dna load to adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "snowflake_load_to_adls: @{activity('Copy data dna load to adls').error?.errorCode} @{activity('Copy data dna load to adls').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Copy data adls to sql 2",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data dna load to adls",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sql_server_sink_soh_delim",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"path": {
													"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].landing_file_path}",
													"type": "Expression"
												},
												"file": {
													"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerSink",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[0]",
													"type": "Expression"
												},
												"table": {
													"value": "@split(activity('read parameters').output.value[0].target_schema_table,'.')[1]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Script Target Count post sync 2",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lsawswdvsgpw0006",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Execute Archival 2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "File_Archival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"isError": "No",
											"container": {
												"value": "@activity('read parameters').output.value[0].container",
												"type": "Expression"
											},
											"directory": {
												"value": "@{activity('read parameters').output.value[0].landing_file_path}",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
												"type": "Expression"
											},
											"sheetNames": {
												"value": "@variables('emptyArray')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error log - move adls to sql 2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Copy data adls to sql 2').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Copy data adls to sql 2').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - mds_adls_to_sql 2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while copying data from adls to sql : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**SOURCE_QUERY**: @{activity('read parameters').output.value[0].source_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].landing_file_path} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].landing_file_name} \\n\n**TARGET_SCHEMA_TABLE**: @{activity('read parameters').output.value[0].target_schema_table} \\n\n**ERROR**: _@{activity('Copy data adls to sql 2').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes",
											"container": {
												"value": "@{activity('read parameters').output.value[0].container}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "error_copying_adls_to_sql 2",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "adls_to_sql: @{activity('Copy data adls to sql 2').error?.errorCode} @{activity('Copy data adls to sql 2').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Execute Archival_error_2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data adls to sql 2",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "File_Archival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"usecase_id": {
												"value": "@pipeline().parameters.usecase_id",
												"type": "Expression"
											},
											"sequence_id": {
												"value": "@pipeline().parameters.sequence_id",
												"type": "Expression"
											},
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"isError": "Yes",
											"container": {
												"value": "@activity('read parameters').output.value[0].container",
												"type": "Expression"
											},
											"directory": {
												"value": "@{activity('read parameters').output.value[0].landing_file_path}",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@{activity('read parameters').output.value[0].landing_file_name}.csv",
												"type": "Expression"
											},
											"sheetNames": {
												"value": "@variables('emptyArray')",
												"type": "Expression"
											}
										}
									}
								}
							]
						},
						{
							"value": "noDataLoad",
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Script Target Count",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "adfadbplt001lsawswdvsgpw0005",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "SELECT count(*) AS count FROM @{activity('read parameters').output.value[0].target_schema_table}",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Audit_Finish_Success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch source for truncate source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch Source",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail unknown source",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch_Source_get_source_count",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If Truncate Target",
				"description": "",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Script Target Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('read parameters').output.value[0].truncate_and_load,'Y')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Script Truncate Source",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lsawswdvsgpw0005",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema_table}",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "Switch source for truncate source",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Switch Source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(equals(activity('read parameters').output.value[0].truncate_source,'Y'),activity('read parameters').output.value[0].decide_source,'no_truncate_source')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "dna_core",
							"activities": [
								{
									"name": "Script Truncate Source core",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnacore002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].trunc_source_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						},
						{
							"value": "dna_load",
							"activities": [
								{
									"name": "Script Truncate Source load",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload002",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].trunc_source_schema_table}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						},
						{
							"value": "no_truncate_source",
							"activities": [
								{
									"name": "Wait no_truncate_source",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"sequence_id": {
				"type": "int"
			},
			"process_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			}
		},
		"variables": {
			"errorResponse1": {
				"type": "String"
			},
			"sourceCount": {
				"type": "Integer",
				"defaultValue": 0
			},
			"emptyArray": {
				"type": "Array",
				"defaultValue": []
			},
			"sourceCount2": {
				"type": "Integer",
				"defaultValue": 0
			}
		},
		"folder": {
			"name": "Ingestion/Sources"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-23T12:47:58Z"
	}
}