{
	"name": "Mbox_File_Copy",
	"properties": {
		"activities": [
			{
				"name": "Audit_Start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set parentFolder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeV2Source",
						"query": {
							"value": "Select \n\"'prefix_flag'\" AS prefix_flag,\n\"'suffix_flag'\" AS suffix_flag,\n\"'split_file'\" AS split_file,\n\"'target_folder_path'\" AS target_folder_path,\n\"'target_file_name'\" AS target_file_name,\n\"'source_folder_path'\" AS source_folder_path,\n\"'source_file_name'\" AS source_file_name,\n\"'file_extn'\" AS file_extn,\n\"'container'\" AS container,\n\"'encoding'\" AS encoding,\nIFNULL(\"'source_update_query'\",'N') AS source_update_query\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'prefix_flag',\n'suffix_flag',\n'split_file',\n'target_folder_path',\n'target_file_name',\n'source_folder_path',\n'source_file_name',\n'file_extn',\n'container',\n'encoding',\n'source_update_query'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set parentFolder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Audit_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "parentFolder",
					"value": {
						"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If prefix or suffix",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set dateCYYMMDD",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('read parameters').output.value[0].prefix_flag,'Y')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set fileNameWithDateSuffix",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameWithDate",
								"value": {
									"value": "@{activity('read parameters').output.value[0].target_file_name}_@{variables('dateCCYYMMDD')}",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set fileNameWithDatePrefix",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameWithDate",
								"value": {
									"value": "@{variables('dateCCYYMMDD')}_@{activity('read parameters').output.value[0].target_file_name}",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Set dateCYYMMDD",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "dateCCYYMMDD",
					"value": {
						"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMddhhmmss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Switch For Encoding",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "ifFileExists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(not(activity('ifFileExists').output.exists),'do_nothing', if(equals(activity('read parameters').output.value[0].split_file,'Y'),'splitCase',activity('read parameters').output.value[0].encoding))",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "splitCase",
							"activities": [
								{
									"name": "Move File Splitted",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Backup with new name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"maxRowsPerFile": 20000,
												"fileNamePrefix": "",
												"quoteAllText": true,
												"fileExtension": {
													"value": ".@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Mbox_File_Copy_adls",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												},
												"encoding": "UTF-8",
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Mbox_File_Copy_adls_split_file",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
												"encoding": "@activity('read parameters').output.value[0].encoding",
												"delimeter": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')"
											}
										}
									]
								},
								{
									"name": "Backup with new name",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AdlsFileDataset",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].container",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
													"type": "Expression"
												},
												"fileName": {
													"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AdlsFileDataset",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
												"fileName": {
													"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete old name file",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup with new name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AdlsFileDataset",
											"type": "DatasetReference",
											"parameters": {
												"container": "@activity('read parameters').output.value[0].container",
												"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
												"fileName": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "error log - Move File Splitted",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move File Splitted",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Move File Splitted').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Move File Splitted').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - Move File Splitted",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Move File Splitted",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while moving file from source folder in adls to target folder in adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move File Splitted').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "Move File Splitted error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Move File Splitted",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Issues while moving file from source folder in adls to target folder in adls : @{activity('Move File Splitted').error?.errorCode} @{activity('Move File Splitted').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								}
							]
						},
						{
							"value": "do_nothing",
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Move File",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
											"type": "Expression"
										},
										"encoding": "UTF-8",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
											"type": "Expression"
										},
										"encoding": "@activity('read parameters').output.value[0].encoding",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "error log - Move File",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Move File",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('Move File').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('Move File').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - Move File",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Move File",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while moving file from source folder in adls to target folder in adls : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move File').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						},
						{
							"name": "Move File error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Move File",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Issues while moving file from source folder in adls to target folder in adls : @{activity('Move File').error?.errorCode} @{activity('Move File').error?.message}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						}
					]
				}
			},
			{
				"name": "Audit_Finish_Success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If source_update_needed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If source_update_needed",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Fail_FileCopy",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch For Encoding",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If source_update_needed",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Archiving_Deleting",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(not(equals(activity('read parameters').output.value[0].source_update_query,'N')),activity('ifFileExists').output.exists)\n",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute_Update_Source_Query",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnacore002",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@activity('read parameters').output.value[0].source_update_query",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "ifFileExists",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "If prefix or suffix",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "adls_src",
						"type": "DatasetReference",
						"parameters": {
							"src_path": {
								"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
								"type": "Expression"
							},
							"src_container": {
								"value": "@activity('read parameters').output.value[0].container",
								"type": "Expression"
							},
							"src_filename": {
								"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Archiving_Deleting",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Switch For Encoding",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('ifFileExists').output.exists",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Move to Achive",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
											"type": "Expression"
										},
										"encoding": "UTF-8",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}/archive/@{formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyyMMdd')}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
											"type": "Expression"
										},
										"encoding": "UTF-8",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Delete source",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "Move to Achive",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "AdlsFileDataset",
									"type": "DatasetReference",
									"parameters": {
										"container": "@activity('read parameters').output.value[0].container",
										"directory": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
										"fileName": {
											"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),concat(variables('fileNameWithDate'),'.',activity('read parameters').output.value[0].file_extn),concat(activity('read parameters').output.value[0].source_file_name,'.',activity('read parameters').output.value[0].file_extn))",
											"type": "Expression"
										}
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "error log - archive file",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Move to Achive",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('Move to Achive').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('Move to Achive').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Audit_Fail_archiving",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Move to Achive",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_audit_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"status": "FAIL",
									"input_row_count": 0,
									"output_row_count": 0,
									"jobname": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"message": {
										"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
										"type": "Expression"
									},
									"runid": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipeline_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send error - Move File_copy1",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Move to Achive",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "NotifiyTeamsChannelPipeline",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
										"type": "Expression"
									},
									"runId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": "FAIL",
									"supportMessage": {
										"value": "There is some issue while archiving file : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**ENCODING**: @{activity('read parameters').output.value[0].encoding} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path}/archive/@{variables('dateCCYYMMDD')} \\n\n**TARGET_FILE_NAME**: @{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn} \\n\n**SOURCE_FILE_PATH**: @{activity('read parameters').output.value[0].source_folder_path} \\n\n**SOURCE_FILE_NAME**: @{activity('read parameters').output.value[0].source_file_name} \\n\n**ERROR**: _@{activity('Move to Achive').error?.message}_",
										"type": "Expression"
									},
									"isBusinessNotification": "No",
									"isSupportNotification": "Yes",
									"isError": "Yes"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			},
			"sequence_id": {
				"type": "int"
			},
			"process_id": {
				"type": "int"
			}
		},
		"variables": {
			"parentFolder": {
				"type": "String"
			},
			"fileNameWithDate": {
				"type": "String"
			},
			"dateCCYYMMDD": {
				"type": "String"
			},
			"chno": {
				"type": "String"
			},
			"appendedList": {
				"type": "String"
			},
			"temp": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Consumption/Consumption Systems"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-23T12:26:48Z"
	}
}