{
	"name": "Tableau Refresh Status",
	"properties": {
		"activities": [
			{
				"name": "Until Completion",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Audit_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('progress'),'100')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Wait",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": {
									"value": "@int(pipeline().parameters.waitTime)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Fetch Refresh Status Iteratively",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Read token latest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"additionalHeaders": {
										"Content-Type": "application/xml",
										"x-tableau-auth": {
											"value": "@activity('Read token latest').output.value[0].credentials.token",
											"type": "Expression"
										}
									},
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "TableauRestAPI",
									"type": "DatasetReference",
									"parameters": {
										"relativeURL": {
											"value": "sites/@{pipeline().parameters.SiteId}/jobs/@{pipeline().parameters.JobId}",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "TableauJsonResponse",
									"type": "DatasetReference",
									"parameters": {
										"tempContainer": "asp",
										"tempDirectory": {
											"value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
											"type": "Expression"
										},
										"tempFileName": "tableauResponseRefreshStatusCurrent.json"
									}
								}
							]
						},
						{
							"name": "Set progress Iteratively",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Read Refresh Status Iteratively",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "progress",
								"value": {
									"value": "@activity('Read Refresh Status Iteratively').output.value[0].job.progress",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Read Refresh Status Iteratively",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Fetch Refresh Status Iteratively",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"dataset": {
									"referenceName": "TableauJsonResponse",
									"type": "DatasetReference",
									"parameters": {
										"tempContainer": "asp",
										"tempDirectory": {
											"value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
											"type": "Expression"
										},
										"tempFileName": "tableauResponseRefreshStatusCurrent.json"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Error Fetching Refresh Status Iteratively",
							"type": "ExecutePipeline",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "Fetch Refresh Status Iteratively",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('Fetch Refresh Status Iteratively').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('Fetch Refresh Status Iteratively').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Error Reading Refresh Status Iteratively",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Read Refresh Status Iteratively",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('Read Refresh Status Iteratively').error?.message",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@activity('Read Refresh Status Iteratively').error?.errorCode",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Read token latest",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Wait",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"dataset": {
									"referenceName": "TableauJsonResponse",
									"type": "DatasetReference",
									"parameters": {
										"tempContainer": "asp",
										"tempDirectory": {
											"value": "@{pipeline().parameters.parentFolder}/tableau",
											"type": "Expression"
										},
										"tempFileName": {
											"value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": false
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "Audit_Start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Refresh Successful",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "If Refresh Successful",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If Refresh Successful",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set finishCode",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('finishCode'),'0')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "error response after refresh",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "write_error_log",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"job_name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"error_message": {
										"value": "@activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"error_code": {
										"value": "@variables('finishCode')",
										"type": "Expression"
									},
									"job_id": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Set finishCode",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Until Completion",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "finishCode",
					"value": {
						"value": "@activity('Read Refresh Status Iteratively').output.value[0].job.finishCode",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Audit_Finish_Fail_3",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Until Completion",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"SiteId": {
				"type": "string"
			},
			"JobId": {
				"type": "string"
			},
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "string"
			},
			"phase_id": {
				"type": "string"
			},
			"sequence_id": {
				"type": "string"
			},
			"process_id": {
				"type": "string"
			},
			"waitTime": {
				"type": "string"
			},
			"tableauSourceName": {
				"type": "string"
			},
			"parentFolder": {
				"type": "string"
			}
		},
		"variables": {
			"token": {
				"type": "String"
			},
			"progress": {
				"type": "String",
				"defaultValue": "0"
			},
			"finishCode": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Consumption/Consumption Systems/Utilities"
		},
		"annotations": []
	}
}