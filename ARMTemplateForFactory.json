{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "adfadbdev001"
        },
        "adfadbplt001lsakvadbplt001_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://akvadbplt001.vault.azure.net/"
        },
        "adfadbplt001lsarsadpprd001_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "conap-dna-prod.c1opccqxcdw2.ap-southeast-1.redshift.amazonaws.com"
        },
        "adfadbplt001lsarsadpprd001_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "conapdna"
        },
        "adfadbplt001lsarsadpprd001_properties_typeProperties_username": {
            "type": "string",
            "defaultValue": "sa-jnj-kdp-local"
        },
        "adfadbplt001lsas3adpprd001_properties_typeProperties_accessKeyId": {
            "type": "object",
            "defaultValue": {
                "type": "AzureKeyVaultSecret",
                "store": {
                    "referenceName": "adfadbplt001lsakvadbplt001",
                    "type": "LinkedServiceReference"
                },
                "secretName": "adfadbplt001lsas3adpprd001-AccessID"
            }
        },
        "adfadbplt001lsawswdvsgpw0006_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "adfadbplt001lsawswdvsgpw0006"
        },
        "adfadbplt001lsdbtclouddnacore_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://au.dbt.com/"
        },
        "adfadbplt001lsdlsadbplt001_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://dlsadbplt001.dfs.core.windows.net/"
        },
        "adfadbplt001lspltbitabap_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://devbitabap.kenvue.com/api/3.17/"
        },
        "adfadbplt001lssnfkpltdnacore_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "adfadbplt001lssnfkdevdnacore"
        },
        "adfadbplt001lssnfkpltdnaload_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "adfadbplt001lssnfkdevdnaload"
        },
        "adfadbsbx001lsazrweksgpw0003_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://azrweksgpw0003.kenvue.com/api.rsc/"
        },
        "adfadbsbx001lsazrweksgpw0003_properties_typeProperties_authHeaders_x-cdata-authtoken_secretName": {
            "type": "string",
            "defaultValue": "adfadbsbx001lsazrweksgpw0003"
        },
        "Customer360_Tab_Refresh_Trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "CUSTOMER360_refresh"
        },
        "Customer360_Tab_Refresh_Trigger_properties_master_parameters_force_rerun": {
            "type": "bool",
            "defaultValue": false
        },
        "GCH_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "GCH"
        },
        "Historical_Trigger_Customer360_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_Environment": {
            "type": "string",
            "defaultValue": "PROD"
        },
        "Historical_Trigger_Customer360_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_process_id": {
            "type": "string",
            "defaultValue": "553"
        },
        "Historical_Trigger_PerfectStore_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_Environment": {
            "type": "string",
            "defaultValue": "PROD"
        },
        "Historical_Trigger_PerfectStore_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_process_id": {
            "type": "string",
            "defaultValue": "552"
        },
        "J_RG_SELL_IN_COPA_TAB_REFRESH_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL REFRESH"
        },
        "MALAYSIA_POS_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_POS"
        },
        "MALAYSIA_WATSONS_INV_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_WATSONS_INV"
        },
        "MY_JOINT_MONTHLY_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_JOINT_MONTHLY"
        },
        "MY_MDS_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_MDS"
        },
        "MY_POS_SIPOS_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_POS_SIPOS"
        },
        "MY_SELLIN_ANALYSIS_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_SELLIN_ANALYSIS"
        },
        "MY_SELLIN_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_SELLIN"
        },
        "MY_SELLOUT_SISO_evening_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_SELLOUT_SISO"
        },
        "MY_SELLOUT_SISO_morning_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_SELLOUT_SISO"
        },
        "MY_SELLOUT_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "MY_SELLOUT"
        },
        "POP6_refresh_Trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "POP6_refresh"
        },
        "S3_To_ADLS_MY_JOINT_MONTHLY_trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "7"
        },
        "S3_To_ADLS_MY_SELLIN_SELLOUT_POS_trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "3"
        },
        "S3_To_ADLS_MY_WATSONS_INV_trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "5"
        },
        "S3_To_ADLS_Regional_Trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "1"
        },
        "S3_To_ADLS_SGP_Scan_Trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "2"
        },
        "S3_To_ADLS_SGP_Sellout_Trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "2"
        },
        "S3_To_ADLS_my_sellout_sales_inv_trigger_properties_s3_to_adls_parameters_Group_id": {
            "type": "string",
            "defaultValue": "6"
        },
        "SAP_BW_BILLING_COND_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_BILLING_COND"
        },
        "SAP_BW_BILLING_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_BILLING"
        },
        "SAP_BW_COPA10_SUN_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_COPA10"
        },
        "SAP_BW_COPA10_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_COPA10"
        },
        "SAP_BW_DELIVERY_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_DELIVERY"
        },
        "SAP_BW_INVENTORY_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_INVENTORY"
        },
        "SAP_BW_INVOICE_SUN_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_INVOICE"
        },
        "SAP_BW_INVOICE_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_INVOICE"
        },
        "SAP_BW_LISTPRICE_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_LISTPRICE"
        },
        "SAP_BW_MASTER_AND_ACCT_ATTR_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_MASTER_AND_ACCT_ATTR"
        },
        "SAP_BW_MATERIAL_UOM_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_MATERIAL_UOM"
        },
        "SAP_BW_SALES_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_SALES"
        },
        "SAP_ECC_MASTER_SUN_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_ECC_MASTER"
        },
        "SAP_ECC_MASTER_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_ECC_MASTER"
        },
        "UAT_J_RG_SELL_IN_COPA_TAB_REFRESH_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL REFRESH"
        },
        "UAT_SAP_BW_BILLING_COND_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_BILLING_COND"
        },
        "UAT_SAP_BW_BILLING_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_BILLING"
        },
        "UAT_SAP_BW_COPA10_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_COPA10"
        },
        "UAT_SAP_BW_DELIVERY_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_DELIVERY"
        },
        "UAT_SAP_BW_INVENTORY_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_INVENTORY"
        },
        "UAT_SAP_BW_INVOICE_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_INVOICE"
        },
        "UAT_SAP_BW_LISTPRICE_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_LISTPRICE"
        },
        "UAT_SAP_BW_MASTER_AND_ACCT_ATTR_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_MASTER_AND_ACCT_ATTR"
        },
        "UAT_SAP_BW_MATERIAL_UOM_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_MATERIAL_UOM"
        },
        "UAT_SAP_BW_SALES_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_BW_SALES"
        },
        "UAT_SAP_ECC_MASTER_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SAP_ECC_MASTER"
        },
        "UAT_pka_tableau_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL PKA"
        },
        "UAT_rg_mds_to_dna_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL_MDS"
        },
        "my_gt_sales_dna_to_mds_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "my_gt_sales_dna_to_mds"
        },
        "my_sellout_inv_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "my_sellout_inv"
        },
        "my_sellout_sales_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "my_sellout_sales"
        },
        "pka_tableau_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL PKA"
        },
        "rg_mds_to_dna_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL_MDS"
        },
        "rg_travel_retail_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "REGIONAL"
        },
        "sg_scan_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SINGAPORE_TRANSACTIONAL"
        },
        "sg_sellout_refresh_trigger_properties_master_parameters_category": {
            "type": "string",
            "defaultValue": "SINGAPORE_SELLOUT"
        },
        "adfiradbplt002_properties_typeProperties_linkedInfo_resourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/00ab5361-0cd5-44b3-b4df-8f24e00fe1df/resourcegroups/AZR-WEK-rg-adf-adb-001/providers/Microsoft.DataFactory/factories/adfadbplt001/integrationruntimes/adfiradbplt002"
        },
        "adfadbplt001mpepdlsadbplt001_properties_privateLinkResourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/00ab5361-0cd5-44b3-b4df-8f24e00fe1df/resourceGroups/AZR-WEK-rg-dls-adb-001/providers/Microsoft.Storage/storageAccounts/dlsadbplt001"
        },
        "adfadbplt001mpepdlsadbplt001_properties_groupId": {
            "type": "string",
            "defaultValue": "dfs"
        },
        "adfadbplt001mpepdlsadbplt001_properties_fqdns": {
            "type": "array",
            "defaultValue": [
                "dlsadbplt001.dfs.core.windows.net"
            ]
        },
        "adfadbplt001mpepdlsadbplt002_properties_privateLinkResourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/00ab5361-0cd5-44b3-b4df-8f24e00fe1df/resourceGroups/AZR-WEK-rg-dls-adb-001/providers/Microsoft.Storage/storageAccounts/dlsadbplt002"
        },
        "adfadbplt001mpepdlsadbplt002_properties_groupId": {
            "type": "string",
            "defaultValue": "dfs"
        },
        "adfadbplt001mpepdlsadbplt002_properties_fqdns": {
            "type": "array",
            "defaultValue": [
                "dlsadbplt002.dfs.core.windows.net"
            ]
        },
        "default_properties_environment_value": {
            "type": "string",
            "defaultValue": "prod"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/ADLS')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEveryFile",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'val_file_header'\" AS val_file_header,\n\"'file_spec'\" AS file_spec,\n\"'val_file_name'\" AS val_file_name,\n\"'val_file_extn'\" AS val_file_extn,\n\"'load_method'\" AS load_method,\n\"'sp_name'\" AS sp_name,\n\"'sheet_index'\" AS sheet_index,\n\"'folder_path'\" AS folder_path,\n\"'target_table'\" AS target_table,\n\"'container'\" AS container,\n\"'target_schema'\" AS target_schema,\n\"'validation'\" AS validation,\n\"'index'\" AS index,\n\"'source_extn'\" AS source_extn,\n\"'sheet_names'\" AS sheet_names,\n\"'file_header_row_num'\" AS file_header_row_num,\n\"'is_truncate'\" AS is_truncate,\n\"'startRange'\" AS startRange,\n\"'is_sg_tp'\" AS is_sg_tp,\n\"'extract_sp'\" AS extract_sp\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'val_file_header',\n'file_spec',\n'val_file_name',\n'val_file_extn',\n'load_method',\n'sp_name',\n'sheet_index',\n'folder_path',\n'target_table',\n'container',\n'target_schema',\n'validation',\n'index',\n'source_extn',\n'sheet_names',\n'file_header_row_num',\n'is_truncate',\n'startRange',\n'is_sg_tp',\n'extract_sp'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Filter Only File",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get file name').output.childItems",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().type,'File')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "get file name",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "adls_src",
                                "type": "DatasetReference",
                                "parameters": {
                                    "src_path": {
                                        "value": "@activity('read parameters').output.value[0].FOLDER_PATH",
                                        "type": "Expression"
                                    },
                                    "src_container": {
                                        "value": "@activity('read parameters').output.value[0].CONTAINER",
                                        "type": "Expression"
                                    },
                                    "src_filename": {
                                        "value": "@concat('*',activity('read parameters').output.value[0].FILE_SPEC,'*.',activity('read parameters').output.value[0].SOURCE_EXTN)\n",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Set sheet_names array",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "If No file is present",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "sheet_names",
                            "value": {
                                "value": "@if(equals(coalesce(activity('read parameters').output.value[0].sheet_names, variables('emptyArray')),variables('emptyArray')),variables('emptyArray'),split(activity('read parameters').output.value[0].sheet_names,','))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit fail - file not present",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - file not present",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('get file name').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('get file name').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEveryFile",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "ForEveryFile",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If is_truncate Y",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Filter Only File').output.Value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Execute Load_File",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Load_File",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "sequence_id": {
                                                "value": "@pipeline().parameters.sequence_id",
                                                "type": "Expression"
                                            },
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "sourceFileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "parameters": {
                                                "value": "@activity('read parameters').output",
                                                "type": "Expression"
                                            },
                                            "sheetNames": {
                                                "value": "@variables('sheet_names')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If No file is present",
                        "type": "IfCondition",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Filter Only File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('Filter Only File').output.FilteredItemsCount,0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "error log - no file",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "No file present at the location",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "404",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "No file Present",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error log - no file",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "No file present at the location",
                                            "type": "Expression"
                                        },
                                        "errorCode": "404"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "error log - file not present2",
                        "type": "ExecutePipeline",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "If No file is present",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('No file Present').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('No file Present').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - file not present2",
                        "type": "ExecutePipeline",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "If No file is present",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If is_truncate Y",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set sheet_names array",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(activity('read parameters').output.value[0].is_truncate,'Y'),greater(activity('Filter Only File').output.FilteredItemsCount,0))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "truncate table",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "adfadbplt001lssnfkpltdnaload",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "NonQuery",
                                                "text": {
                                                    "value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema}.@{activity('read parameters').output.value[0].target_table};",
                                                    "type": "Expression"
                                                }
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 1
                    }
                },
                "variables": {
                    "fileName": {
                        "type": "String"
                    },
                    "sheet_names": {
                        "type": "Array"
                    },
                    "emptyArray": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "errorMessage": {
                        "type": "String",
                        "defaultValue": "NO"
                    },
                    "sheetNames": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:21:01Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/adls_src')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/Load_File')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ADLS_backup_old')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'val_file_header'\" AS val_file_header,\n\"'file_spec'\" AS file_spec,\n\"'val_file_name'\" AS val_file_name,\n\"'val_file_extn'\" AS val_file_extn,\n\"'load_method'\" AS load_method,\n\"'sp_name'\" AS sp_name,\n\"'sheet_index'\" AS sheet_index,\n\"'folder_path'\" AS folder_path,\n\"'target_table'\" AS target_table,\n\"'container'\" AS container,\n\"'target_schema'\" AS target_schema,\n\"'validation'\" AS validation,\n\"'index'\" AS index,\n\"'source_extn'\" AS source_extn,\n\"'sheet_names'\" AS sheet_names,\n\"'file_header_row_num'\" AS file_header_row_num\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'val_file_header',\n'file_spec',\n'val_file_name',\n'val_file_extn',\n'load_method',\n'sp_name',\n'sheet_index',\n'folder_path',\n'target_table',\n'container',\n'target_schema',\n'validation',\n'index',\n'source_extn',\n'sheet_names',\n'file_header_row_num'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Check load method",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@activity('read parameters').output.value[0].load_method",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "copy",
                                    "activities": [
                                        {
                                            "name": "load from file",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "NonQuery",
                                                        "text": {
                                                            "value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema\n}.@{activity('read parameters').output.value[0].target_table\n};\nCOPY INTO \n    @{activity('read parameters').output.value[0].target_schema\n}.@{activity('read parameters').output.value[0].target_table\n}\n     FROM @{concat('''@', activity('read parameters').output.value[0].snowflake_stage\n, '/',activity('read parameters').output.value[0].folder_path\n,'/''')}\n     FILE_FORMAT =(FORMAT_NAME = @{activity('read parameters').output.value[0].snowflake_file_format});",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "error log - load failed_2",
                                            "type": "ExecutePipeline",
                                            "state": "Inactive",
                                            "onInactiveMarkAs": "Succeeded",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "pipeline": {
                                                    "referenceName": "write_error_log",
                                                    "type": "PipelineReference"
                                                },
                                                "waitOnCompletion": true,
                                                "parameters": {
                                                    "process_id": {
                                                        "value": "@pipeline().parameters.process_id",
                                                        "type": "Expression"
                                                    },
                                                    "job_name": {
                                                        "value": "@pipeline().Pipeline",
                                                        "type": "Expression"
                                                    },
                                                    "error_message": {
                                                        "value": "Load from File Failed: @{activity('load from file').error?.message}",
                                                        "type": "Expression"
                                                    },
                                                    "run_id": {
                                                        "value": "@pipeline().RunId",
                                                        "type": "Expression"
                                                    },
                                                    "category": {
                                                        "value": "@pipeline().parameters.category",
                                                        "type": "Expression"
                                                    },
                                                    "phase_id": {
                                                        "value": "@pipeline().parameters.phase_id",
                                                        "type": "Expression"
                                                    },
                                                    "error_code": {
                                                        "value": "@activity('load from file').error?.errorCode",
                                                        "type": "Expression"
                                                    },
                                                    "job_id": {
                                                        "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "name": "Load Failed1",
                                            "type": "Fail",
                                            "state": "Inactive",
                                            "onInactiveMarkAs": "Succeeded",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "message": {
                                                    "value": "Load Failed : @{activity('load from file').error?.message}",
                                                    "type": "Expression"
                                                },
                                                "errorCode": "101"
                                            }
                                        },
                                        {
                                            "name": "Set Error Message2",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "load from file",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Load Failed : @{activity('load from file').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "sp",
                                    "activities": [
                                        {
                                            "name": "Load with SP",
                                            "type": "Lookup",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "SnowflakeSource",
                                                    "query": {
                                                        "value": "CALL @{activity('read parameters').output.value[0].sp_name} (['@{variables('fileName')}','@{activity('read parameters').output.value[0].snowflake_stage\n}','@{activity('read parameters').output.value[0].folder_path\n}','@{activity('read parameters').output.value[0].target_table\n}']);\n",
                                                        "type": "Expression"
                                                    },
                                                    "exportSettings": {
                                                        "type": "SnowflakeExportCopyCommand"
                                                    }
                                                },
                                                "dataset": {
                                                    "referenceName": "mtd_process",
                                                    "type": "DatasetReference",
                                                    "parameters": {}
                                                },
                                                "firstRowOnly": false
                                            }
                                        },
                                        {
                                            "name": "Set Error Message",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load with SP",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Load Failed : @{activity('Load with SP').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "Set Error Message from SP",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load with SP",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "@string(activity('Load with SP').output.value[0])",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Filter Only File",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get file name').output.childItems",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().type,'File')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "FileStructureValidation SP Call",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "CALL ASPSDL_RAW.FILE_VALIDATION(['@{replace(activity('Filter Only File').output.Value[0].name,' ','_')}','@{activity('read parameters').output.value[0].INDEX}','@{activity('read parameters').output.value[0].Validation\n}','@{activity('read parameters').output.value[0].val_file_name\n}','@{activity('read parameters').output.value[0].val_file_extn\n}','@{activity('read parameters').output.value[0].val_file_header}',@{activity('read parameters').output.value[0].file_header_row_num},'@{activity('read parameters').output.value[0].snowflake_stage\n}','@{activity('read parameters').output.value[0].folder_path\n}']);",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set fileName csv",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Filter Only File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "fileName",
                            "value": {
                                "value": "@replace(replace(activity('Filter Only File').output.Value[0].name,' ' , '_'),'.xlsx' ,'.csv' )",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Check csv_excel_multiExcel",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Set fileName csv",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set sheet_names array",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@if(equals(activity('read parameters').output.value[0].source_extn,'csv'),'1', if( empty(variables('sheet_names')),'2',''))\n\n",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "1",
                                    "activities": [
                                        {
                                            "name": "Wait",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "2",
                                    "activities": [
                                        {
                                            "name": "converttocsv",
                                            "type": "Copy",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "ExcelSource",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    }
                                                },
                                                "sink": {
                                                    "type": "DelimitedTextSink",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSWriteSettings"
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextWriteSettings",
                                                        "quoteAllText": true,
                                                        "fileExtension": ".csv"
                                                    }
                                                },
                                                "enableStaging": false,
                                                "translator": {
                                                    "type": "TabularTranslator",
                                                    "typeConversion": true,
                                                    "typeConversionSettings": {
                                                        "allowDataTruncation": true,
                                                        "treatBooleanAsNumber": false
                                                    }
                                                }
                                            },
                                            "inputs": [
                                                {
                                                    "referenceName": "adls_srcexcel",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "src_path": {
                                                            "value": "@activity('read parameters').output.value[0].folder_path",
                                                            "type": "Expression"
                                                        },
                                                        "src_filename": {
                                                            "value": "@activity('Filter Only File').output.Value[0].name",
                                                            "type": "Expression"
                                                        },
                                                        "src_sheetindex": {
                                                            "value": "@activity('read parameters').output.value[0].sheet_index",
                                                            "type": "Expression"
                                                        },
                                                        "src_container": {
                                                            "value": "@activity('read parameters').output.value[0].container",
                                                            "type": "Expression"
                                                        },
                                                        "src_startRange": "testRange"
                                                    }
                                                }
                                            ],
                                            "outputs": [
                                                {
                                                    "referenceName": "csv",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "target_path": {
                                                            "value": "@activity('read parameters').output.value[0].folder_path",
                                                            "type": "Expression"
                                                        },
                                                        "target_filename": {
                                                            "value": "@variables('fileName')",
                                                            "type": "Expression"
                                                        },
                                                        "target_container": {
                                                            "value": "@activity('read parameters').output.value[0].container",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Error Singlesheet Excel Conversion",
                                            "type": "Fail",
                                            "dependsOn": [
                                                {
                                                    "activity": "converttocsv",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "message": {
                                                    "value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
                                                    "type": "Expression"
                                                },
                                                "errorCode": "100"
                                            }
                                        },
                                        {
                                            "name": "Set Error Message_convertToCsv",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "converttocsv",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "get file name",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "adls_src",
                                "type": "DatasetReference",
                                "parameters": {
                                    "src_path": {
                                        "value": "@activity('read parameters').output.value[0].FOLDER_PATH",
                                        "type": "Expression"
                                    },
                                    "src_container": {
                                        "value": "@activity('read parameters').output.value[0].CONTAINER",
                                        "type": "Expression"
                                    },
                                    "src_filename": {
                                        "value": "@concat('*',activity('read parameters').output.value[0].FILE_SPEC,'*.',activity('read parameters').output.value[0].SOURCE_EXTN)\n",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Set sheet_names array",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Filter Only File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "sheet_names",
                            "value": {
                                "value": "@if(equals(coalesce(activity('read parameters').output.value[0].sheet_names, variables('emptyArray')),variables('emptyArray')),variables('emptyArray'),split(activity('read parameters').output.value[0].sheet_names,','))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEachSheetInExcel",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('sheet_names')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "converttocsv sheetwise",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "adls_srcexcel_sheetname",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "src_path": {
                                                    "value": "@activity('read parameters').output.value[0].folder_path",
                                                    "type": "Expression"
                                                },
                                                "src_filename": {
                                                    "value": "@activity('Filter Only File').output.Value[0].name",
                                                    "type": "Expression"
                                                },
                                                "src_sheetname": {
                                                    "value": "@item()",
                                                    "type": "Expression"
                                                },
                                                "src_container": {
                                                    "value": "@activity('read parameters').output.value[0].container",
                                                    "type": "Expression"
                                                },
                                                "src_startRange": "testRange"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "csv",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "target_path": {
                                                    "value": "@activity('read parameters').output.value[0].folder_path",
                                                    "type": "Expression"
                                                },
                                                "target_filename": {
                                                    "value": "@{replace(item(),' ','_')}.csv",
                                                    "type": "Expression"
                                                },
                                                "target_container": {
                                                    "value": "@activity('read parameters').output.value[0].container",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Error Multisheet Excel Conversion",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "converttocsv sheetwise",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "100"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail - file not present",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - file not present",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get file name",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('get file name').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('get file name').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - CsvConversion2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - CsvConversion2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "CSV Conversion Mutiple Excel Sheets Failed: @{activity('Error Multisheet Excel Conversion')[0].Error.message}\n\n",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@{activity('Error Multisheet Excel Conversion')[0].Error.errorCode}",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Error Encountered during load",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Check load method",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(contains(variables('errorMessage'),'Success'),equals(variables('errorMessage'),'NO'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "error log - load",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "Data Load Failed : @{variables('errorMessage')}",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "102",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Data load fail",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error log - load",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Data Load Failed : @{variables('errorMessage')}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "102"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Validation Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "FileStructureValidation SP Call",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION,'SUCCESS: File validation passed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Fail Validation",
                                    "type": "Fail",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "103"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail - validation",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - validation",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@{activity('Fail Validation')[0].Error.message}\n\n",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@{activity('Fail Validation')[0].Error.errorCode}",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - CsvConversion1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - CsvConversion1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@variables('errorMessage')",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "100",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 6
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 6
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 1
                    }
                },
                "variables": {
                    "fileName": {
                        "type": "String"
                    },
                    "sheet_names": {
                        "type": "Array"
                    },
                    "truncateQuery": {
                        "type": "String"
                    },
                    "emptyArray": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "errorMessage": {
                        "type": "String",
                        "defaultValue": "NO"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:21:01Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/adls_src')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel_sheetname')]",
                "[concat(variables('factoryId'), '/datasets/csv')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/File_Archival')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetFromXlsx",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetFromXlsx",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Move to Archive",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Is Error",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "deleteFilesAfterCompletion": true
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "BinarySource",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.directory",
                                        "type": "Expression"
                                    },
                                    "sourceFile": {
                                        "value": "@pipeline().parameters.sourceFile",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "BinaryDestination",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@{variables('tempPath')}/processed/archive@{split(pipeline().parameters.directory, variables('tempPath'))[1]}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Is Error",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Set temp path",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@pipeline().parameters.isError",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "Yes",
                                    "activities": [
                                        {
                                            "name": "Move to Error",
                                            "type": "Copy",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "BinarySource",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSReadSettings",
                                                        "recursive": true,
                                                        "deleteFilesAfterCompletion": false
                                                    },
                                                    "formatSettings": {
                                                        "type": "BinaryReadSettings"
                                                    }
                                                },
                                                "sink": {
                                                    "type": "BinarySink",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSWriteSettings"
                                                    }
                                                },
                                                "enableStaging": false
                                            },
                                            "inputs": [
                                                {
                                                    "referenceName": "BinarySource",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "container": {
                                                            "value": "@pipeline().parameters.container",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.directory",
                                                            "type": "Expression"
                                                        },
                                                        "sourceFile": {
                                                            "value": "@pipeline().parameters.sourceFile",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ],
                                            "outputs": [
                                                {
                                                    "referenceName": "BinaryDestination",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "container": {
                                                            "value": "@pipeline().parameters.container",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@{variables('tempPath')}/processed/error@{split(pipeline().parameters.directory, variables('tempPath'))[1]}",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Is xlsx",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Move to Archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@split(pipeline().parameters.sourceFile, '.')[1]",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "xlsx",
                                    "activities": [
                                        {
                                            "name": "Delete csv",
                                            "type": "Delete",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "dataset": {
                                                    "referenceName": "BinarySource",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "container": {
                                                            "value": "@pipeline().parameters.container",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.directory",
                                                            "type": "Expression"
                                                        },
                                                        "sourceFile": {
                                                            "value": "@replace(replace(pipeline().parameters.sourceFile,'.xlsx','.csv'),' ', '_')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "enableLogging": false,
                                                "storeSettings": {
                                                    "type": "AzureBlobFSReadSettings",
                                                    "recursive": true,
                                                    "enablePartitionDiscovery": false
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "ForEachSheetFromXlsx",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Is xlsx",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.sheetNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Delete csv one by one",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BinarySource",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "container": {
                                                    "value": "@pipeline().parameters.container",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.directory",
                                                    "type": "Expression"
                                                },
                                                "sourceFile": {
                                                    "value": "@{replace(item(),' ','_')}.csv",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set temp path",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "tempPath",
                            "value": {
                                "value": "@{split(pipeline().parameters.directory, '/')[0]}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "test"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "isError": {
                        "type": "string",
                        "defaultValue": "Yes"
                    },
                    "container": {
                        "type": "string",
                        "defaultValue": "asp"
                    },
                    "directory": {
                        "type": "string",
                        "defaultValue": "dev/transactional/CNSC"
                    },
                    "sourceFile": {
                        "type": "string",
                        "defaultValue": "CNSC DR.CILABO SALES REPORT 202001.xlsx"
                    },
                    "sheetNames": {
                        "type": "array",
                        "defaultValue": [
                            "ZZ DT",
                            "HZ DT",
                            "BJ DT",
                            "CQ DT",
                            "DL DT",
                            "SY DT"
                        ]
                    }
                },
                "variables": {
                    "output": {
                        "type": "String"
                    },
                    "index1": {
                        "type": "Integer"
                    },
                    "index2": {
                        "type": "Integer"
                    },
                    "indexLast": {
                        "type": "Integer"
                    },
                    "tempPath": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources/Utilities"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:47:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/BinarySource')]",
                "[concat(variables('factoryId'), '/datasets/BinaryDestination')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GIT_SQL_Deployment_Utility')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "read_parameters",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "WITH ranked_data AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY DB ORDER BY version DESC) AS row_num\n  FROM\n    META_RAW.prod_run_metadata\n)\nSELECT\n  DB,VERSION\nFROM\n  ranked_data\nWHERE\n  row_num = 1;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachDataFromMetaData",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "read_parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('read_parameters').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "fetch version",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "version",
                                        "value": {
                                            "value": "@item().VERSION",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Fetch DB",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "fetch version",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "db",
                                        "value": {
                                            "value": "@item().DB",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Fetch SQL File",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Merge version with file name",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "@concat('https://github.com/KV-APAC-DNA/',pipeline().parameters.RepoName,'/blob/',pipeline().parameters.BranchName,'/',pipeline().parameters.FolderName,'/', variables('db'), '/', variables('version_merge'),'?raw=true')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Switch for Load or Core",
                                    "type": "Switch",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch SQL File",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@if(equals(variables('db'),'load'),'1', if(equals(variables('db'),'core'),'2',''))",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "1",
                                                "activities": [
                                                    {
                                                        "name": "Execute Load scripts",
                                                        "type": "Script",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@activity('Fetch SQL File').output.Response",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    },
                                                    {
                                                        "name": "Success_load",
                                                        "type": "Script",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute Load scripts",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@concat('INSERT INTO META_RAW.PROD_RUN_METADATA (DB, version,file_name, status, timestamp) values(''',variables('db'),''',',variables('version_update'),',''',variables('version_merge'),''',''Success''',',''',formatDateTime(utcNow(),'yyyy-MM-dd HH:MM:ss'),''');')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    },
                                                    {
                                                        "name": "Failure_load",
                                                        "type": "Script",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute Load scripts",
                                                                "dependencyConditions": [
                                                                    "Failed"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@concat('INSERT INTO META_RAW.PROD_RUN_METADATA (DB, version,file_name, status, timestamp) values(''',variables('db'),''',',variables('version_update'),',''',variables('version_merge'),''',''Failed''',',''',formatDateTime(utcNow(),'yyyy-MM-dd HH:MM:ss'),''');')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "2",
                                                "activities": [
                                                    {
                                                        "name": "Execute Core Scripts",
                                                        "type": "Script",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@activity('Fetch SQL File').output.Response",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    },
                                                    {
                                                        "name": "Success_core",
                                                        "type": "Script",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute Core Scripts",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@concat('INSERT INTO META_RAW.PROD_RUN_METADATA (DB, version,file_name, status, timestamp) values(''',variables('db'),''',',variables('version_update'),',''',variables('version_merge'),''',''Success''',',''',formatDateTime(utcNow(),'yyyy-MM-dd HH:MM:ss'),''');')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    },
                                                    {
                                                        "name": "Failure_core",
                                                        "type": "Script",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Execute Core Scripts",
                                                                "dependencyConditions": [
                                                                    "Failed"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "linkedServiceName": {
                                                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "typeProperties": {
                                                            "scripts": [
                                                                {
                                                                    "type": "Query",
                                                                    "text": {
                                                                        "value": "@concat('INSERT INTO META_RAW.PROD_RUN_METADATA (DB, version,file_name, status, timestamp) values(''',variables('db'),''',',variables('version_update'),',''',variables('version_merge'),''',''Failed''',',''',formatDateTime(utcNow(),'yyyy-MM-dd HH:MM:ss'),''');')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            ],
                                                            "scriptBlockExecutionTimeout": "02:00:00"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Set new version",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch DB",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "version_update",
                                        "value": {
                                            "value": "@string(add(int(variables('version')),1))",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Merge version with file name",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Set new version",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "version_merge",
                                        "value": {
                                            "value": "@concat(variables('version_update'),'.sql')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Fail1",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch SQL File",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "@concat(variables('version_merge'),' file not found in ',variables('db'),' folder')",
                                            "type": "Expression"
                                        },
                                        "errorCode": "404:File not found"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "RepoName": {
                        "type": "string",
                        "defaultValue": "gitadfadbplt001"
                    },
                    "BranchName": {
                        "type": "string",
                        "defaultValue": "DDL_DML_Scripts"
                    },
                    "FolderName": {
                        "type": "string",
                        "defaultValue": "prod_release_scripts"
                    }
                },
                "variables": {
                    "db": {
                        "type": "String"
                    },
                    "version": {
                        "type": "String"
                    },
                    "version_update": {
                        "type": "String"
                    },
                    "version_merge": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Load_File')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Check load method",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@pipeline().parameters.parameters.value[0].load_method",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "copy",
                                    "activities": [
                                        {
                                            "name": "load from file",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "NonQuery",
                                                        "text": {
                                                            "value": "COPY INTO \n    @{pipeline().parameters.parameters.value[0].target_schema\n}.@{pipeline().parameters.parameters.value[0].target_table\n}\n     FROM @{concat('''@', pipeline().parameters.parameters.value[0].snowflake_stage\n, '/',pipeline().parameters.parameters.value[0].folder_path\n,'/''')}\n     FILE_FORMAT =(FORMAT_NAME = @{pipeline().parameters.parameters.value[0].snowflake_file_format});",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Set Error Message2",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "load from file",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Load Failed : @{activity('load from file').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "sp",
                                    "activities": [
                                        {
                                            "name": "Load with SP",
                                            "type": "Lookup",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "SnowflakeSource",
                                                    "query": {
                                                        "value": "CALL @{pipeline().parameters.parameters.value[0].sp_name} (['@{variables('fileName')}','@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{pipeline().parameters.parameters.value[0].folder_path\n}','@{pipeline().parameters.parameters.value[0].target_table\n}']);\n",
                                                        "type": "Expression"
                                                    },
                                                    "exportSettings": {
                                                        "type": "SnowflakeExportCopyCommand"
                                                    }
                                                },
                                                "dataset": {
                                                    "referenceName": "mtd_process",
                                                    "type": "DatasetReference",
                                                    "parameters": {}
                                                },
                                                "firstRowOnly": false
                                            }
                                        },
                                        {
                                            "name": "Set Error Message",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load with SP",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Load Failed : @{activity('Load with SP').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "Set Error Message from SP",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load with SP",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "@string(activity('Load with SP').output.value[0])",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "FileStructureValidation SP Call",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "CALL ASPSDL_RAW.FILE_VALIDATION(['@{replace(pipeline().parameters.sourceFileName,' ','_')}','@{pipeline().parameters.parameters.value[0].INDEX}','@{pipeline().parameters.parameters.value[0].Validation\n}','@{pipeline().parameters.parameters.value[0].val_file_name\n}','@{pipeline().parameters.parameters.value[0].val_file_extn\n}','@{pipeline().parameters.parameters.value[0].val_file_header}',@{pipeline().parameters.parameters.value[0].file_header_row_num},'@{pipeline().parameters.parameters.value[0].snowflake_stage\n}','@{pipeline().parameters.parameters.value[0].folder_path\n}']);",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Set fileName csv",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "fileName",
                            "value": {
                                "value": "@replace(replace(pipeline().parameters.sourceFileName,' ' , '_'),'.xlsx' ,'.csv' )",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Check csv_excel_multiExcel",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Set fileName csv",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@if(equals(tolower(pipeline().parameters.parameters.value[0].source_extn)\n          ,'xlsx'),\n     if( empty(pipeline().parameters.sheetNames),'2',''),'1')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "1",
                                    "activities": [
                                        {
                                            "name": "Wait",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "2",
                                    "activities": [
                                        {
                                            "name": "converttocsv",
                                            "type": "Copy",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "ExcelSource",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    }
                                                },
                                                "sink": {
                                                    "type": "DelimitedTextSink",
                                                    "storeSettings": {
                                                        "type": "AzureBlobFSWriteSettings"
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextWriteSettings",
                                                        "quoteAllText": true,
                                                        "fileExtension": ".csv"
                                                    }
                                                },
                                                "enableStaging": false,
                                                "translator": {
                                                    "type": "TabularTranslator",
                                                    "typeConversion": true,
                                                    "typeConversionSettings": {
                                                        "allowDataTruncation": true,
                                                        "treatBooleanAsNumber": false
                                                    }
                                                }
                                            },
                                            "inputs": [
                                                {
                                                    "referenceName": "adls_srcexcel",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "src_path": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                                            "type": "Expression"
                                                        },
                                                        "src_filename": {
                                                            "value": "@pipeline().parameters.sourceFileName",
                                                            "type": "Expression"
                                                        },
                                                        "src_sheetindex": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].sheet_index",
                                                            "type": "Expression"
                                                        },
                                                        "src_container": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].container",
                                                            "type": "Expression"
                                                        },
                                                        "src_startRange": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].startRange",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ],
                                            "outputs": [
                                                {
                                                    "referenceName": "csv",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "target_path": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                                            "type": "Expression"
                                                        },
                                                        "target_filename": {
                                                            "value": "@variables('fileName')",
                                                            "type": "Expression"
                                                        },
                                                        "target_container": {
                                                            "value": "@pipeline().parameters.Parameters.value[0].container",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Error Singlesheet Excel Conversion",
                                            "type": "Fail",
                                            "dependsOn": [
                                                {
                                                    "activity": "converttocsv",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "message": {
                                                    "value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
                                                    "type": "Expression"
                                                },
                                                "errorCode": "100"
                                            }
                                        },
                                        {
                                            "name": "Set Error Message_convertToCsv",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "converttocsv",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "errorMessage",
                                                "value": {
                                                    "value": "Error Singlesheet Excel Conversion : @{activity('converttocsv').error?.message}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "ForEachSheetInExcel",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.sheetNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "converttocsv sheetwise",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "adls_srcexcel_sheetname",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "src_path": {
                                                    "value": "@pipeline().parameters.parameters.value[0].folder_path",
                                                    "type": "Expression"
                                                },
                                                "src_filename": {
                                                    "value": "@pipeline().parameters.sourceFileName",
                                                    "type": "Expression"
                                                },
                                                "src_sheetname": {
                                                    "value": "@item()",
                                                    "type": "Expression"
                                                },
                                                "src_container": {
                                                    "value": "@pipeline().parameters.parameters.value[0].container",
                                                    "type": "Expression"
                                                },
                                                "src_startRange": {
                                                    "value": "@pipeline().parameters.Parameters.value[0].startRange",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "csv",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "target_path": {
                                                    "value": "@pipeline().parameters.parameters.value[0].folder_path",
                                                    "type": "Expression"
                                                },
                                                "target_filename": {
                                                    "value": "@{replace(item(),' ','_')}.csv",
                                                    "type": "Expression"
                                                },
                                                "target_container": {
                                                    "value": "@pipeline().parameters.parameters.value[0].container",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Error Multisheet Excel Conversion",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error log - CsvConversion2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "100"
                                    }
                                },
                                {
                                    "name": "error log - CsvConversion2",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "converttocsv sheetwise",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "Error Multisheet Excel Conversion : @{activity('converttocsv sheetwise').error?.message}",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "100",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail - CsvConversion2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Error Encountered during load",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Check load method",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(contains(variables('errorMessage'),'Success'),equals(variables('errorMessage'),'NO'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "error log - load",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "Data Load Failed : @{variables('errorMessage')}",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "102",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Data load fail",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error log - load",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Data Load Failed : @{variables('errorMessage')}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "102"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Validation Passed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "FileStructureValidation SP Call",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION,'SUCCESS: File validation passed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Fail Validation",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error log - validation",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "103"
                                    }
                                },
                                {
                                    "name": "error log - validation",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "Validation Failed: @{activity('FileStructureValidation SP Call').output.value[0].FILE_VALIDATION}",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "103",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail - validation",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - CsvConversion1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - CsvConversion1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@variables('errorMessage')",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "100",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "No",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Error",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Error Encountered during load",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "Yes",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Error Validation",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Validation Passed",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "Yes",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Error MultiSheet",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEachSheetInExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "Yes",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Error SingleSheet",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Check csv_excel_multiExcel",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "Yes",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - sp fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "FileStructureValidation SP Call",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - sp fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "FileStructureValidation SP Call",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('FileStructureValidation SP Call').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('FileStructureValidation SP Call').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Execute Archival Error Validation_copy1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "FileStructureValidation SP Call",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "File_Archival",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "isError": "Yes",
                                "container": {
                                    "value": "@pipeline().parameters.Parameters.value[0].container",
                                    "type": "Expression"
                                },
                                "directory": {
                                    "value": "@pipeline().parameters.Parameters.value[0].folder_path",
                                    "type": "Expression"
                                },
                                "sourceFile": {
                                    "value": "@pipeline().parameters.sourceFileName",
                                    "type": "Expression"
                                },
                                "sheetNames": {
                                    "value": "@pipeline().parameters.sheetNames",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 6
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 6
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "sourceFileName": {
                        "type": "string",
                        "defaultValue": "test"
                    },
                    "parameters": {
                        "type": "object"
                    },
                    "sheetNames": {
                        "type": "array",
                        "defaultValue": [
                            "test"
                        ]
                    }
                },
                "variables": {
                    "fileName": {
                        "type": "String"
                    },
                    "errorMessage": {
                        "type": "String",
                        "defaultValue": "NO"
                    },
                    "sheetNames": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources/Utilities"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:21:01Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/File_Archival')]",
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel_sheetname')]",
                "[concat(variables('factoryId'), '/datasets/csv')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MDS')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get_the_status",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['RunStartDate']"
                                        },
                                        "sink": {
                                            "name": "RunStartDate",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Query']"
                                        },
                                        "sink": {
                                            "name": "Query",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['JobName']"
                                        },
                                        "sink": {
                                            "name": "JobName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Status']"
                                        },
                                        "sink": {
                                            "name": "Status",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Detail']"
                                        },
                                        "sink": {
                                            "name": "Detail",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Result']"
                                        },
                                        "sink": {
                                            "name": "Result",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['value']",
                                "mapComplexValuesToString": false
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "log_json",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "@concat(variables('GET_STATUS_FILE'),'.json')",
                                    "container": {
                                        "value": "@variables('container')",
                                        "type": "Expression"
                                    },
                                    "file_path": {
                                        "value": "@variables('file_path')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "Sink_csv",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.csv')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "read_status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "get_status",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.csv')",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "set status_file_name",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "GET_STATUS_FILE",
                            "value": {
                                "value": "@concat(activity('read parameters').output.value[0].JOBNAME,'_',string(pipeline().RunId))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "execute_job",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "set status_file_name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set job_name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set container",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set file_path",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:30:00",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "@concat ('{ \"JobName\": \"', string(variables('JOBNAME')), '\"}')",
                                    "type": "Expression"
                                },
                                "additionalHeaders": {
                                    "Content-Type": "application/json"
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "executejob",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "log_json",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.json')",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@variables('container')",
                                        "type": "Expression"
                                    },
                                    "file_path": {
                                        "value": "@variables('file_path')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set job_name",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "JOBNAME",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].JOBNAME",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select \n\"'jobname'\" AS jobname,\n\"'container'\" as container,\n\"'file_path'\" as file_path\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'jobname',\n'container',\n'file_path'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "error log - Cdata",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "ForEach1_1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Filter1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('filter1').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "error log",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@item().Result",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@item().Status",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If job fail then update error for each task",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(equals(activity('read_status').output.value[0].Status, 'FAILED'),contains(activity('read_status').output.value[0].Result ,'Failure'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Audit_Finish_Success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail - file not present_copy1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Filter1",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('read_status').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(equals(item().Status, 'FAILED'),not(contains(item().Result ,'Records affected')))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - reading json",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - Getting Status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "set container",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "container",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].container",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set file_path",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "file_path",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].file_path",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit fail - get_the_status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - read_status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL_MDS"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 8
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 22
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 1
                    }
                },
                "variables": {
                    "GET_STATUS_FILE": {
                        "type": "String"
                    },
                    "JOBNAME": {
                        "type": "String"
                    },
                    "container": {
                        "type": "String"
                    },
                    "file_path": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:47:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/log_json')]",
                "[concat(variables('factoryId'), '/datasets/Sink_csv')]",
                "[concat(variables('factoryId'), '/datasets/get_status')]",
                "[concat(variables('factoryId'), '/datasets/executejob')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MDS_Reverse_Sync')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get_the_status",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "[['RunStartDate']"
                                        },
                                        "sink": {
                                            "name": "RunStartDate",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Query']"
                                        },
                                        "sink": {
                                            "name": "Query",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['JobName']"
                                        },
                                        "sink": {
                                            "name": "JobName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Status']"
                                        },
                                        "sink": {
                                            "name": "Status",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Detail']"
                                        },
                                        "sink": {
                                            "name": "Detail",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "[['Result']"
                                        },
                                        "sink": {
                                            "name": "Result",
                                            "type": "String"
                                        }
                                    }
                                ],
                                "collectionReference": "$['value']",
                                "mapComplexValuesToString": false
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "log_json",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "@concat(variables('GET_STATUS_FILE'),'.json')",
                                    "container": {
                                        "value": "@variables('container')",
                                        "type": "Expression"
                                    },
                                    "file_path": {
                                        "value": "@variables('file_path')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "Sink_csv",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.csv')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "read_status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "get_status",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.csv')",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "set status_file_name",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "GET_STATUS_FILE",
                            "value": {
                                "value": "@concat(activity('read parameters').output.value[0].JOBNAME,'_',string(pipeline().RunId))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "execute_job",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "set status_file_name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set job_name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set container",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set file_path",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set is_truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set list_of_sdl_table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:30:00",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "@concat ('{ \"JobName\": \"', string(variables('JOBNAME')), '\"}')",
                                    "type": "Expression"
                                },
                                "additionalHeaders": {
                                    "Content-Type": "application/json"
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "executejob",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "log_json",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": {
                                        "value": "@concat(variables('GET_STATUS_FILE'),'.json')",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@variables('container')",
                                        "type": "Expression"
                                    },
                                    "file_path": {
                                        "value": "@variables('file_path')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set job_name",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "JOBNAME",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].JOBNAME",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select \n\"'jobname'\" AS jobname,\n\"'container'\" as container,\n\"'file_path'\" as file_path,\n\"'is_truncate'\" as is_truncate,\n\"'list_of_sdl_table'\" as list_of_sdl_table\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'jobname',\n'container',\n'file_path',\n'is_truncate',\n'list_of_sdl_table'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "error log - Cdata",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "ForEach1_1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Filter1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('filter1').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "error log",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@item().Result",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@item().Status",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If job fail then update error for each task",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(equals(activity('read_status').output.value[0].Status, 'FAILED'),contains(activity('read_status').output.value[0].Result ,'Failure'))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Audit_Finish_Success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail - file not present_copy1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Filter1",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('read_status').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(equals(item().Status, 'FAILED'),not(contains(item().Result ,'Records affected')))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "execute_job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - reading json",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log - Getting Status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Execute_job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('execute_job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "set container",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "container",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].container",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set file_path",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "file_path",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].file_path",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit fail - get_the_status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Get_the_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail - read_status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "set is_truncate",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "is_truncate",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].is_truncate",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set list_of_sdl_table",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "list_of_sdl_table",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].list_of_sdl_table",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set list_of_sdl_table_copy1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read_status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "iterator",
                            "value": {
                                "value": "@if(and(\n        equals(variables('is_truncate'), 'Y'),\n        not(\n            or(\n                equals(activity('read_status').output.value[0].Status, 'FAILED'),\n                contains(activity('read_status').output.value[0].Result, 'Failure')\n            )\n        )\n    ), split(variables('list_of_sdl_table'),'|'),variables('emptyArray'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "set list_of_sdl_table_copy1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('iterator')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Script1",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "adfadbplt001lssnfkpltdnacore",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@concat('Truncate table ',item())",
                                                    "type": "Expression"
                                                }
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "my_gt_sales_dna_to_mds"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 43
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 116
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 1
                    }
                },
                "variables": {
                    "GET_STATUS_FILE": {
                        "type": "String"
                    },
                    "JOBNAME": {
                        "type": "String"
                    },
                    "container": {
                        "type": "String"
                    },
                    "file_path": {
                        "type": "String"
                    },
                    "is_truncate": {
                        "type": "String"
                    },
                    "list_of_sdl_table": {
                        "type": "String"
                    },
                    "emptyArray": {
                        "type": "Array"
                    },
                    "iterator": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:47:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/log_json')]",
                "[concat(variables('factoryId'), '/datasets/Sink_csv')]",
                "[concat(variables('factoryId'), '/datasets/get_status')]",
                "[concat(variables('factoryId'), '/datasets/executejob')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PIPE_hist_data_migration_redshift_snowflake_child')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If table is transactional or full refresh",
                        "type": "Switch",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@pipeline().parameters.type_of_load",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "TRANSACTIONAL",
                                    "activities": [
                                        {
                                            "name": "Unload_Redshift To S3_Transactional_Query",
                                            "type": "SetVariable",
                                            "dependsOn": [],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "redshift_unload_query",
                                                "value": {
                                                    "value": "@concat('set autocommit=on; unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/',pipeline().parameters.Target_DB,'/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''\\001'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 256 MB REGION as ''ap-southeast-1'' ;')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "Snowflake_Transactional_Query",
                                            "description": "",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "truncate query transactional",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "snowflakeQuery",
                                                "value": {
                                                    "value": "@concat('COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''', pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_STAGE_S3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '/''',\n' FILE_FORMAT = ''',pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_CSV_FILEFORMAT'' ',\n';')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "truncate query transactional",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Unload_Redshift To S3_Transactional_Query",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "truncateQuery",
                                                "value": {
                                                    "value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')\n",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            "defaultActivities": [
                                {
                                    "name": "Unload_Redshift To S3_Full_Refresh_Query",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "redshift_unload_query",
                                        "value": {
                                            "value": "@concat('set autocommit=on; unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/',pipeline().parameters.Target_DB,'/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''\\001'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 256 MB REGION as ''ap-southeast-1'' ;')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Snowflake_Full_Refresh_Query",
                                    "description": "",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "truncate query full refresh",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "snowflakeQuery",
                                        "value": {
                                            "value": "@concat('COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''@', pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_STAGE_S3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '/''',\n' FILE_FORMAT = ''',pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_CSV_FILEFORMAT'' ',\n';')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "truncate query full refresh",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Unload_Redshift To S3_Full_Refresh_Query",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "truncateQuery",
                                        "value": {
                                            "value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')\n",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If target is DNA_LOAD or DNA_CORE",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Select count from redshift",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@if(contains(pipeline().parameters.Target_DB,'DNA_LOAD'),'DNA_LOAD','DNA_CORE')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "DNA_LOAD",
                                    "activities": [
                                        {
                                            "name": "Load to Snowflake Dna Load",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Truncate Snowflake Dna Load",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "USE WAREHOUSE @{pipeline().parameters.Environment}_DNA_LOAD_APP2_WH; @{variables('snowflakeQuery')}",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "Select count from snowflake dna load",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load to Snowflake Dna Load",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Completed DNA LOAD",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Select count from snowflake dna load",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna load').output.resultSets[0].rows[0].count,'); ')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Error_Sf_copy1",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load to Snowflake Dna Load",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Load')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Truncate Snowflake Dna Load",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@variables('truncateQuery')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Error_SfTruncate",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Truncate Snowflake Dna Load",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Truncate Snowflake Dna Load')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Fail Pipeline 1",
                                            "type": "Fail",
                                            "dependsOn": [
                                                {
                                                    "activity": "Insert Status in Metadata as Error_Sf_copy1",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "message": "Error while loading data",
                                                "errorCode": "1001"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "DNA_CORE",
                                    "activities": [
                                        {
                                            "name": "Load to Snowflake Dna Core",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Truncate Snowflake Dna Core",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "USE WAREHOUSE @{pipeline().parameters.Environment}_DNA_CORE_APP2_WH;\n@{variables('snowflakeQuery')}",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Select count from snowflake dna Core",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load to Snowflake Dna Core",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Completed DNA CORE",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Select count from snowflake dna Core",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna Core').output.resultSets[0].rows[0].count,'); ')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Error SF DNA CORE",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Load to Snowflake Dna Core",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Core')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Truncate Snowflake Dna Core",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@variables('truncateQuery')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "Insert Status in Metadata as Error SF_Truncate",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Truncate Snowflake Dna Core",
                                                    "dependencyConditions": [
                                                        "Failed"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnaload",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Truncate Snowflake Dna Core')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Fail Pipeline 2",
                                            "type": "Fail",
                                            "dependsOn": [
                                                {
                                                    "activity": "Insert Status in Metadata as Error SF DNA CORE",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "message": "Error while loading data",
                                                "errorCode": "1001"
                                            }
                                        }
                                    ]
                                }
                            ],
                            "defaultActivities": [
                                {
                                    "name": "Fail Invalid Database Name",
                                    "type": "Fail",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": "Fail Invalid Database Name",
                                        "errorCode": "0000"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Unload from Redshift",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "If table is transactional or full refresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AmazonRedshiftSource",
                                "query": {
                                    "value": "@variables('redshift_unload_query')",
                                    "type": "Expression"
                                },
                                "redshiftUnloadSettings": {
                                    "s3LinkedServiceName": {
                                        "referenceName": "adfadbplt001lsas3adpprd001",
                                        "type": "LinkedServiceReference"
                                    },
                                    "bucketName": "itx-arm-snowflake-external-stage"
                                }
                            },
                            "dataset": {
                                "referenceName": "AmazonRedshiftTable1",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Select count from redshift",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Unload from Redshift",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AmazonRedshiftSource",
                                "query": {
                                    "value": "@concat('Select count(*) from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table)",
                                    "type": "Expression"
                                }
                            },
                            "dataset": {
                                "referenceName": "AmazonRedshiftTable1",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Insert Status in Metadata as Error_Rd",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "Unload from Redshift",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error RD'',''',replace(activity('Unload from Redshift')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Source_Schema": {
                        "type": "string",
                        "defaultValue": "RG_SDL"
                    },
                    "Source_Table": {
                        "type": "string",
                        "defaultValue": "SDL_SAP_ECC_SALES_ORG"
                    },
                    "Target_Schema": {
                        "type": "string",
                        "defaultValue": "SNAPASPSDL_RAW"
                    },
                    "Target_Table": {
                        "type": "string",
                        "defaultValue": "SDL_SAP_ECC_SALES_ORG"
                    },
                    "IsActive": {
                        "type": "bool",
                        "defaultValue": true
                    },
                    "Market": {
                        "type": "string",
                        "defaultValue": "Regional"
                    },
                    "type_of_load": {
                        "type": "string",
                        "defaultValue": "FULL_REFRESH"
                    },
                    "Id": {
                        "type": "int",
                        "defaultValue": 34
                    },
                    "Target_DB": {
                        "type": "string",
                        "defaultValue": "DEV_DNA_LOAD"
                    },
                    "Stage_Schema": {
                        "type": "string",
                        "defaultValue": "SNAPASPSDL_RAW"
                    },
                    "Environment": {
                        "type": "string",
                        "defaultValue": "DEV"
                    }
                },
                "variables": {
                    "redshift_unload_query": {
                        "type": "String"
                    },
                    "snowflakeQuery": {
                        "type": "String"
                    },
                    "countQueryRedshift": {
                        "type": "String"
                    },
                    "countQuerySnowflake": {
                        "type": "String"
                    },
                    "target_count": {
                        "type": "Integer"
                    },
                    "test": {
                        "type": "String"
                    },
                    "truncateQuery": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Historical_Data_migration_redshift_snowflake"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/AmazonRedshiftTable1')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PIPE_hist_data_migration_redshift_snowflake_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Fetch Metadata",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "select * from META_RAW.HISTORICAL_OBJ_METADATA where ISACTIVE='TRUE' @{if(equals(pipeline().parameters.process_id,'ALL' ), '', concat(' and id in (',pipeline().parameters.process_id,')'))} Order By PRIORITY DESC;",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    },
                    {
                        "name": "ForEachTable",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Fetch Metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Fetch Metadata').output.resultSets[0].rows",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Execute Child Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "PIPE_hist_data_migration_redshift_snowflake_child",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": false,
                                        "parameters": {
                                            "Source_Schema": {
                                                "value": "@item().SOURCE_SCHEMA",
                                                "type": "Expression"
                                            },
                                            "Source_Table": {
                                                "value": "@item().SOURCE_TABLE",
                                                "type": "Expression"
                                            },
                                            "Target_Schema": {
                                                "value": "@item().TARGET_SCHEMA",
                                                "type": "Expression"
                                            },
                                            "Target_Table": {
                                                "value": "@item().TARGET_TABLE",
                                                "type": "Expression"
                                            },
                                            "IsActive": {
                                                "value": "@item().ISACTIVE",
                                                "type": "Expression"
                                            },
                                            "Market": {
                                                "value": "@item().MARKET",
                                                "type": "Expression"
                                            },
                                            "type_of_load": {
                                                "value": "@item().TYPE_OF_LOAD",
                                                "type": "Expression"
                                            },
                                            "Id": {
                                                "value": "@item().ID",
                                                "type": "Expression"
                                            },
                                            "Target_DB": {
                                                "value": "@item().TARGET_DB",
                                                "type": "Expression"
                                            },
                                            "Stage_Schema": {
                                                "value": "@item().STAGE_SCHEMA",
                                                "type": "Expression"
                                            },
                                            "Environment": {
                                                "value": "@pipeline().parameters.Environment",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Environment": {
                        "type": "string",
                        "defaultValue": "DEV"
                    },
                    "process_id": {
                        "type": "string",
                        "defaultValue": "ALL"
                    }
                },
                "variables": {
                    "redshift_unload_query": {
                        "type": "String"
                    },
                    "snowflakeQuery": {
                        "type": "String"
                    },
                    "test": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Historical_Data_migration_redshift_snowflake"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/pipelines/PIPE_hist_data_migration_redshift_snowflake_child')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Power BI')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "output",
                            "value": "The Power BI refresh was executed"
                        }
                    },
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "sequence_id": {
                        "type": "int"
                    },
                    "process_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "output": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Consumption/Consumption Systems"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:26:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_Adls_temp_testing')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "s3_to_adls_copy_activity_copy1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AmazonS3ReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "PreserveHierarchy"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "S3FileDatasetExcel",
                                "type": "DatasetReference",
                                "parameters": {
                                    "s3Bucket": {
                                        "value": "@pipeline().parameters.S3Bucket",
                                        "type": "Expression"
                                    },
                                    "s3Directory": {
                                        "value": "@pipeline().parameters.S3Directory",
                                        "type": "Expression"
                                    },
                                    "s3FileName": {
                                        "value": "@pipeline().parameters.S3FileName",
                                        "type": "Expression"
                                    },
                                    "s3FileSheet": {
                                        "value": "@pipeline().parameters.FileSheetIndex",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AdlsFileDataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.AdlsContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.AdlsDirectory",
                                        "type": "Expression"
                                    },
                                    "fileName": {
                                        "value": "@{pipeline().parameters.AdlsFiieName}.csv",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "s3_to_adls_copy_activity_copy1_copy1",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AmazonS3ReadSettings",
                                    "recursive": true,
                                    "modifiedDatetimeEnd": null,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "PreserveHierarchy"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ""
                                }
                            },
                            "enableStaging": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "S3Bucket": {
                        "type": "string",
                        "defaultValue": "itx-arm-conapdna-aspac-qa"
                    },
                    "S3Directory": {
                        "type": "string",
                        "defaultValue": "raw-data-lake/travel_retail/transaction_files/archive"
                    },
                    "S3FileName": {
                        "type": "string",
                        "defaultValue": "Dufry Hainan 122022.xlsx"
                    },
                    "AdlsContainer": {
                        "type": "string",
                        "defaultValue": "asp"
                    },
                    "AdlsDirectory": {
                        "type": "string",
                        "defaultValue": "dev/transactional/Dufry"
                    },
                    "AdlsFiieName": {
                        "type": "string",
                        "defaultValue": "Dufry Hainan 122022"
                    },
                    "FileSheetIndex": {
                        "type": "int",
                        "defaultValue": 0
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/S3FileDatasetExcel')]",
                "[concat(variables('factoryId'), '/datasets/AdlsFileDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_Adls_temp_testing_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.FileSheetNames",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "s3_to_adls_copy_activity_copy1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AmazonS3ReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "PreserveHierarchy"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "S3FileDatasetExcelSheetName",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "s3Bucket": {
                                                    "value": "@pipeline().parameters.S3Bucket",
                                                    "type": "Expression"
                                                },
                                                "s3Directory": {
                                                    "value": "@pipeline().parameters.S3Directory",
                                                    "type": "Expression"
                                                },
                                                "s3FileName": {
                                                    "value": "@pipeline().parameters.S3FileName",
                                                    "type": "Expression"
                                                },
                                                "s3FileSheetName": {
                                                    "value": "@item()",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "AdlsFileDataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "container": {
                                                    "value": "@pipeline().parameters.AdlsContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.AdlsDirectory",
                                                    "type": "Expression"
                                                },
                                                "fileName": {
                                                    "value": "@{replace(item(),' ','_')}.csv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "converttocsv sheetwise",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".csv"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "adls_srcexcel_sheetname",
                                "type": "DatasetReference",
                                "parameters": {
                                    "src_path": "dev/transactional/DFS",
                                    "src_filename": "Hainan Vendor Sales Report for Asian.xlsx",
                                    "src_sheetname": "Hainan Vendor Sales Report for ",
                                    "src_container": "asp"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "csv",
                                "type": "DatasetReference",
                                "parameters": {
                                    "target_path": "dev/transactional/DFS",
                                    "target_filename": "Hainan Vendor Sales Report for Asian.xlsx",
                                    "target_container": "asp"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "S3Bucket": {
                        "type": "string",
                        "defaultValue": "itx-arm-conapdna-aspac-qa"
                    },
                    "S3Directory": {
                        "type": "string",
                        "defaultValue": "raw-data-lake/travel_retail/transaction_files/archive"
                    },
                    "S3FileName": {
                        "type": "string",
                        "defaultValue": "CNSC DR.CILABO SALES REPORT 202301.xlsx"
                    },
                    "AdlsContainer": {
                        "type": "string",
                        "defaultValue": "asp"
                    },
                    "AdlsDirectory": {
                        "type": "string",
                        "defaultValue": "dev/transactional/CNSC"
                    },
                    "FileSheetNames": {
                        "type": "array",
                        "defaultValue": [
                            "ZZ DT",
                            "HZ DT",
                            "BJ DT",
                            "CQ DT",
                            "DL DT",
                            "SY DT"
                        ]
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel_sheetname')]",
                "[concat(variables('factoryId'), '/datasets/csv')]",
                "[concat(variables('factoryId'), '/datasets/S3FileDatasetExcelSheetName')]",
                "[concat(variables('factoryId'), '/datasets/AdlsFileDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_to_ADLS_csv_to_csv')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get S3 Folder Details",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "S3FolderDataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "s3bucket": {
                                        "value": "@pipeline().parameters.S3Bucket",
                                        "type": "Expression"
                                    },
                                    "s3directory": {
                                        "value": "@pipeline().parameters.S3Directory",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AmazonS3ReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEveryFileInsideFolder",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get S3 Folder Details",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get S3 Folder Details').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "s3_to_adls_copy_activity",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AmazonS3ReadSettings",
                                                "recursive": true,
                                                "modifiedDatetimeEnd": null,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "PreserveHierarchy"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "S3FileDataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "s3Bucket": {
                                                    "value": "@pipeline().parameters.S3Bucket",
                                                    "type": "Expression"
                                                },
                                                "s3Directory": {
                                                    "value": "@pipeline().parameters.S3Directory",
                                                    "type": "Expression"
                                                },
                                                "s3fileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "AdlsFileDataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "container": {
                                                    "value": "@pipeline().parameters.AdlsContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.AdlsDirectory",
                                                    "type": "Expression"
                                                },
                                                "fileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "S3Bucket": {
                        "type": "string"
                    },
                    "S3Directory": {
                        "type": "string"
                    },
                    "AdlsContainer": {
                        "type": "string"
                    },
                    "AdlsDirectory": {
                        "type": "string"
                    }
                },
                "variables": {
                    "test": {
                        "type": "String"
                    },
                    "S3BucketName": {
                        "type": "String"
                    },
                    "S3DirectoryName": {
                        "type": "String"
                    },
                    "AdlsContainer": {
                        "type": "String"
                    },
                    "AdlsDirectory": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/S3FolderDataset')]",
                "[concat(variables('factoryId'), '/datasets/S3FileDataset')]",
                "[concat(variables('factoryId'), '/datasets/AdlsFileDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_to_ADLS_xlsx_to_xlsx')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get S3 Folder Details",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "S3FolderDataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "s3bucket": {
                                        "value": "@pipeline().parameters.S3Bucket",
                                        "type": "Expression"
                                    },
                                    "s3directory": {
                                        "value": "@pipeline().parameters.S3Directory",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AmazonS3ReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEveryFileInsideFolder",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get S3 Folder Details",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get S3 Folder Details').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "s3_to_adls_copy_activity",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AmazonS3ReadSettings",
                                                "recursive": true,
                                                "modifiedDatetimeEnd": null,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "PreserveHierarchy"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".xlsx"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "S3FileDatasetExcel",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "s3Bucket": {
                                                    "value": "@pipeline().parameters.S3Bucket",
                                                    "type": "Expression"
                                                },
                                                "s3Directory": {
                                                    "value": "@pipeline().parameters.S3Directory",
                                                    "type": "Expression"
                                                },
                                                "s3FileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "s3FileSheet": 1
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "AdlsFileDataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "container": {
                                                    "value": "@pipeline().parameters.AdlsContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.AdlsDirectory",
                                                    "type": "Expression"
                                                },
                                                "fileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "S3Bucket": {
                        "type": "string"
                    },
                    "S3Directory": {
                        "type": "string"
                    },
                    "AdlsContainer": {
                        "type": "string"
                    },
                    "AdlsDirectory": {
                        "type": "string"
                    }
                },
                "variables": {
                    "test": {
                        "type": "String"
                    },
                    "S3BucketName": {
                        "type": "String"
                    },
                    "S3DirectoryName": {
                        "type": "String"
                    },
                    "AdlsContainer": {
                        "type": "String"
                    },
                    "AdlsDirectory": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/S3FolderDataset')]",
                "[concat(variables('factoryId'), '/datasets/S3FileDatasetExcel')]",
                "[concat(variables('factoryId'), '/datasets/AdlsFileDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SFTP')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "set path",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ftp_path",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].ftp_path",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set file filter",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "filespec",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].file_spec",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set table",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "target_table",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].target_table",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set schema",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "target_schema",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].target_schema",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set stage",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "stage",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].snowflake_stage",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "set file format",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "format",
                            "value": {
                                "value": "@activity('read parameters').output.value[0].snowflake_file_format",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "get file names",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "set path",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set file filter",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "adls_srcexcel_sheetname",
                                "type": "DatasetReference",
                                "parameters": {
                                    "src_path": {
                                        "value": "@variables('ftp_path')",
                                        "type": "Expression"
                                    },
                                    "src_filename": {
                                        "value": "@concat('*',variables('filespec'),'*')",
                                        "type": "Expression"
                                    },
                                    "src_sheetname": "Sheet1",
                                    "src_container": {
                                        "value": "@variables('adls_container')",
                                        "type": "Expression"
                                    },
                                    "src_startRange": "test"
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    },
                    {
                        "name": "convertxlstocsv",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get file names",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get file names').output.childItems",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "converttocsv",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "adls_srcexcel_sheetname",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "src_path": {
                                                    "value": "@variables('ftp_path')",
                                                    "type": "Expression"
                                                },
                                                "src_filename": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "src_sheetname": "Sheet1",
                                                "src_container": {
                                                    "value": "@variables('adls_container')",
                                                    "type": "Expression"
                                                },
                                                "src_startRange": "testRange"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "csv",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "target_path": {
                                                    "value": "@variables('ftp_path')",
                                                    "type": "Expression"
                                                },
                                                "target_filename": {
                                                    "value": "@replace(item().name,'.xlsx','.csv')",
                                                    "type": "Expression"
                                                },
                                                "target_container": {
                                                    "value": "@variables('adls_container')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "truncate target table",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "set schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "NonQuery",
                                    "text": {
                                        "value": "TRUNCATE TABLE @{variables('target_schema')}.@{variables('target_table')}",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    },
                    {
                        "name": "load from file",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "truncate target table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "convertxlstocsv",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set stage",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "set file format",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "NonQuery",
                                    "text": {
                                        "value": "COPY INTO \r\n    @{variables('target_schema')}.@{variables('target_table')}\r\n     FROM @{concat('''@', variables('stage'), '/',variables('ftp_path'),'/''')}\r\n     FILE_FORMAT =(FORMAT_NAME = @{variables('format')})",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "load from file",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for process ', string(pipeline().parameters.process_id))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": 0,
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit fail on snowflake load",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "load from file",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed to load to snowflake for process ', string(pipeline().parameters.process_id))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": 0,
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "audit fail on snowflake load",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('load from file').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('load from file').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on truncate",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "truncate target table",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed to load to snowflake for process ', string(pipeline().parameters.process_id))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": 0,
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "truncate target table",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('truncate target table').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('truncate target table').error?.errorcode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "sequence_id": {
                        "type": "int"
                    },
                    "process_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "output": {
                        "type": "Array"
                    },
                    "output2": {
                        "type": "String"
                    },
                    "ftp_path": {
                        "type": "String"
                    },
                    "country_code": {
                        "type": "String"
                    },
                    "target_table": {
                        "type": "String"
                    },
                    "target_schema": {
                        "type": "String"
                    },
                    "filespec": {
                        "type": "String"
                    },
                    "stage": {
                        "type": "String"
                    },
                    "format": {
                        "type": "String"
                    },
                    "Isunknown": {
                        "type": "Boolean"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "folder_path": {
                        "type": "String"
                    },
                    "file_spec": {
                        "type": "String"
                    },
                    "file_format": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:20:59Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/adls_srcexcel_sheetname')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/datasets/csv')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SQL Server')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "output",
                            "value": "SQL Server Ingestion Executed"
                        }
                    },
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "sequence_id": {
                        "type": "int"
                    },
                    "process_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "output": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Ingestion/Sources"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:47:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Tableau Refresh Status')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Until Completion",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('progress'),'100')",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Wait",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": {
                                            "value": "@int(pipeline().parameters.waitTime)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Fetch Refresh Status Iteratively",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Read token latest",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Content-Type": "application/xml",
                                                "x-tableau-auth": {
                                                    "value": "@activity('Read token latest').output.value[0].credentials.token",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "TableauRestAPI",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeURL": {
                                                    "value": "sites/@{pipeline().parameters.SiteId}/jobs/@{pipeline().parameters.JobId}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "TableauJsonResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": {
                                                    "value": "@pipeline().parameters.container",
                                                    "type": "Expression"
                                                },
                                                "tempDirectory": {
                                                    "value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": "tableauResponseRefreshStatusCurrent.json"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Set progress Iteratively",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Read Refresh Status Iteratively",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "progress",
                                        "value": {
                                            "value": "@activity('Read Refresh Status Iteratively').output.value[0].job.progress",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Read Refresh Status Iteratively",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Refresh Status Iteratively",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "JsonSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "JsonReadSettings"
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "TableauJsonResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": {
                                                    "value": "@pipeline().parameters.container",
                                                    "type": "Expression"
                                                },
                                                "tempDirectory": {
                                                    "value": "@{pipeline().parameters.parentFolder}/tableau/@{pipeline().parameters.tableauSourceName}",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": "tableauResponseRefreshStatusCurrent.json"
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Error Fetching Refresh Status Iteratively",
                                    "type": "ExecutePipeline",
                                    "state": "Inactive",
                                    "onInactiveMarkAs": "Succeeded",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Refresh Status Iteratively",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('Fetch Refresh Status Iteratively').error?.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@activity('Fetch Refresh Status Iteratively').error?.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Error Reading Refresh Status Iteratively",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Read Refresh Status Iteratively",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('Read Refresh Status Iteratively').error?.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@activity('Read Refresh Status Iteratively').error?.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Read token latest",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "JsonSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "JsonReadSettings"
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "TableauJsonResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": "asp",
                                                "tempDirectory": {
                                                    "value": "@{pipeline().parameters.parentFolder}/tableau",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": {
                                                    "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    },
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Refresh Successful",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "If Refresh Successful",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Refresh Successful",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set finishCode",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('finishCode'),'0')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "error response after refresh",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "Refresh Failed : @{activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes}",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@variables('finishCode')",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Fail tableau refresh",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "error response after refresh",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Refresh Failed : @{activity('Read Refresh Status Iteratively').output.value[0].job.extractRefreshJob.notes}",
                                            "type": "Expression"
                                        },
                                        "errorCode": {
                                            "value": "@variables('finishCode')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set finishCode",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Until Completion",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "finishCode",
                            "value": {
                                "value": "@activity('Read Refresh Status Iteratively').output.value[0].job.finishCode",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Until Completion",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "SiteId": {
                        "type": "string"
                    },
                    "JobId": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "string"
                    },
                    "phase_id": {
                        "type": "string"
                    },
                    "sequence_id": {
                        "type": "string"
                    },
                    "process_id": {
                        "type": "string"
                    },
                    "waitTime": {
                        "type": "string"
                    },
                    "tableauSourceName": {
                        "type": "string"
                    },
                    "parentFolder": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "variables": {
                    "token": {
                        "type": "String"
                    },
                    "progress": {
                        "type": "String",
                        "defaultValue": "0"
                    },
                    "finishCode": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Consumption/Consumption Systems/Utilities"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
                "[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Tableau')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "REFRESH STARTED SEPARATELY",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Fetch Credential from Vault",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Set refreshType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-@{pipeline().globalParameters.environment}-pat?api-version=7.0",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "adfiradbplt002",
                                "type": "IntegrationRuntimeReference"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Sign In Tableau To Get Auth Token",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:05:00",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "<tsRequest><credentials personalAccessTokenName=\"kv-tableau-pat\" personalAccessTokenSecret=\"@{activity('Fetch Credential from Vault').output.value}\"><site contentUrl=\"@{activity('read parameters').output.value[0].contentUrl}\"/></credentials></tsRequest>",
                                    "type": "Expression"
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "TableauRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeURL": "auth/signin"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set parentFolder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select \n\"'contentUrl'\" AS contentUrl,\n\"'tableauSourceName'\" AS tableauSourceName,\n\"'waitTime'\" AS waitTime,\n\"'refreshType'\" AS refreshType,\n\"'container'\" AS container\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'contentUrl',\n'tableauSourceName',\n'waitTime',\n'refreshType',\n'container'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Fetch id",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Content-Type": "application/xml",
                                    "x-tableau-auth": {
                                        "value": "@activity('Read token and siteId').output.value[0].credentials.token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "TableauRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeURL": {
                                        "value": "sites/@{activity('Read token and siteId').output.value[0].credentials.site.id}/@{variables('refreshType')}s?filter=name:eq:@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseDetails.json"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Read token and siteId",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Sign In Tableau To Get Auth Token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Read Details",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseDetails.json"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Hit Refresh",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId again",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "<tsRequest></tsRequest>",
                                    "type": "Expression"
                                },
                                "additionalHeaders": {
                                    "Content-Type": "application/xml",
                                    "x-tableau-auth": {
                                        "value": "@activity('Read token and siteId again').output.value[0].credentials.token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "TableauRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeURL": {
                                        "value": "@if(equals(variables('refreshType'),'datasource'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].datasources.datasource[0].id,'/refresh'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].workbooks.workbook[0].id,'/refresh'))",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseRefreshInitial.json"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Read Refresh Initail Response",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseRefreshInitial.json"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "error Fetching PAT from Vault",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Fetch Credential from Vault').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Fetch Credential from Vault').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Fetching Auth Token",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Sign In Tableau To Get Auth Token",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Sign In Tableau To Get Auth Token').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Sign In Tableau To Get Auth Token').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Reading Auth Token",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read token and siteId').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read token and siteId').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Fetching datasource id",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Fetch id').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Fetch id').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Reading Datasource details",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read Details').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read Details').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error triggering Refresh",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Hit Refresh').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Hit Refresh').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error reading refresh initial resp",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read Refresh Initail Response').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read Refresh Initail Response').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error triggering tab refresh status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Trigger Tableau Refresh Status').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Trigger Tableau Refresh Status').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_7",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_6",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_5",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_4",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Sign In Tableau To Get Auth Token",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set refreshType",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "refreshType",
                            "value": {
                                "value": "@{activity('read parameters').output.value[0].refreshType}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Trigger Tableau Refresh Status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Tableau Refresh Status",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {
                                "SiteId": {
                                    "value": "@{activity('Read token and siteId').output.value[0].credentials.site.id}",
                                    "type": "Expression"
                                },
                                "JobId": {
                                    "value": "@{activity('Read Refresh Initail Response').output.value[0].job.id}",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "waitTime": {
                                    "value": "@{activity('read parameters').output.value[0].waitTime}",
                                    "type": "Expression"
                                },
                                "tableauSourceName": {
                                    "value": "@{activity('read parameters').output.value[0].tableauSourceName}",
                                    "type": "Expression"
                                },
                                "parentFolder": {
                                    "value": "@variables('parentFolder')",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@{activity('read parameters').output.value[0].container}",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set parentFolder",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "parentFolder",
                            "value": {
                                "value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Read token and siteId again",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL REFRESH"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 16
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 3
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 5
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 39
                    }
                },
                "variables": {
                    "output": {
                        "type": "String"
                    },
                    "token": {
                        "type": "String"
                    },
                    "run_status": {
                        "type": "Integer",
                        "defaultValue": 0
                    },
                    "refreshType": {
                        "type": "String"
                    },
                    "parentFolder": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Consumption/Consumption Systems"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:26:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
                "[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/Tableau Refresh Status')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Tableau_Latest')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Audit_Start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "REFRESH STARTED SEPARATELY",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set parentFolder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select \n\"'contentUrl'\" AS contentUrl,\n\"'tableauSourceName'\" AS tableauSourceName,\n\"'waitTime'\" AS waitTime,\n\"'refreshType'\" AS refreshType,\n\"'container'\" AS container\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'contentUrl',\n'tableauSourceName',\n'waitTime',\n'refreshType',\n'container'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Fetch id",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "additionalHeaders": {
                                    "Content-Type": "application/xml",
                                    "x-tableau-auth": {
                                        "value": "@activity('Read token and siteId').output.value[0].credentials.token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "TableauRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeURL": {
                                        "value": "sites/@{activity('Read token and siteId').output.value[0].credentials.site.id}/@{variables('refreshType')}s?filter=name:eq:@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseDetails.json"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Read token and siteId",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "If Token Generation Needed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Read Details",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseDetails.json"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Hit Refresh",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId again",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "<tsRequest></tsRequest>",
                                    "type": "Expression"
                                },
                                "additionalHeaders": {
                                    "Content-Type": "application/xml",
                                    "x-tableau-auth": {
                                        "value": "@activity('Read token and siteId again').output.value[0].credentials.token",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "TableauRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeURL": {
                                        "value": "@if(equals(variables('refreshType'),'datasource'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].datasources.datasource[0].id,'/refresh'),concat('sites/',activity('Read token and siteId').output.value[0].credentials.site.id,'/',variables('refreshType'),'s/',activity('Read Details').output.value[0].workbooks.workbook[0].id,'/refresh'))",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseRefreshInitial.json"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Read Refresh Initail Response",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": {
                                        "value": "@{activity('read parameters').output.value[0].container}",
                                        "type": "Expression"
                                    },
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau/@{activity('read parameters').output.value[0].tableauSourceName}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "tableauResponseRefreshInitial.json"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "error Reading Auth Token",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read token and siteId').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read token and siteId').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Fetching datasource id",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Fetch id').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Fetch id').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Reading Datasource details",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read Details').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read Details').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error triggering Refresh",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Hit Refresh').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Hit Refresh').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error reading refresh initial resp",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read Refresh Initail Response').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read Refresh Initail Response').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error triggering tab refresh status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger Tableau Refresh Status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Trigger Tableau Refresh Status').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Trigger Tableau Refresh Status').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_7",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_6",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Hit Refresh",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_5",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_4",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch id",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read token and siteId",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set refreshType",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "refreshType",
                            "value": {
                                "value": "@{activity('read parameters').output.value[0].refreshType}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Trigger Tableau Refresh Status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read Refresh Initail Response",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Tableau Refresh Status",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {
                                "SiteId": {
                                    "value": "@{activity('Read token and siteId').output.value[0].credentials.site.id}",
                                    "type": "Expression"
                                },
                                "JobId": {
                                    "value": "@{activity('Read Refresh Initail Response').output.value[0].job.id}",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "sequence_id": {
                                    "value": "@pipeline().parameters.sequence_id",
                                    "type": "Expression"
                                },
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "waitTime": {
                                    "value": "@{activity('read parameters').output.value[0].waitTime}",
                                    "type": "Expression"
                                },
                                "tableauSourceName": {
                                    "value": "@{activity('read parameters').output.value[0].tableauSourceName}",
                                    "type": "Expression"
                                },
                                "parentFolder": {
                                    "value": "@variables('parentFolder')",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@{activity('read parameters').output.value[0].container}",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set parentFolder",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Audit_Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "parentFolder",
                            "value": {
                                "value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Read token and siteId again",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Read Details",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "If Token Generation Needed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set generateToken bool",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('generateToken')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Fetch Credential from Vault",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "https://akvadbplt001.vault.azure.net/secrets/kv-tableau-@{pipeline().globalParameters.environment}-pat?api-version=7.0",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "adfiradbplt002",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://vault.azure.net"
                                        }
                                    }
                                },
                                {
                                    "name": "Sign In Tableau To Get Auth Token",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Credential from Vault",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:05:00",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "POST",
                                            "requestBody": {
                                                "value": "<tsRequest><credentials personalAccessTokenName=\"kv-tableau-pat\" personalAccessTokenSecret=\"@{activity('Fetch Credential from Vault').output.value}\"><site contentUrl=\"@{activity('read parameters').output.value[0].contentUrl}\"/></credentials></tsRequest>",
                                                "type": "Expression"
                                            },
                                            "paginationRules": {
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "TableauRestAPI",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeURL": "auth/signin"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "TableauJsonResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": "asp",
                                                "tempDirectory": {
                                                    "value": "@{variables('parentFolder')}/tableau",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": {
                                                    "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "error Fetching PAT from Vault",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Credential from Vault",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('Fetch Credential from Vault').error?.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@activity('Fetch Credential from Vault').error?.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "error Fetching Auth Token",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Sign In Tableau To Get Auth Token",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('Sign In Tableau To Get Auth Token').error?.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            },
                                            "error_code": {
                                                "value": "@activity('Sign In Tableau To Get Auth Token').error?.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Audit_Finish_Fail_2",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Sign In Tableau To Get Auth Token",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Audit_Finish_Fail_1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Credential from Vault",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": {
                                                "value": "@pipeline().parameters.process_id",
                                                "type": "Expression"
                                            },
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get LastModifiedTokenTime",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Set refreshType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "TableauJsonResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/tableau",
                                        "type": "Expression"
                                    },
                                    "tempFileName": {
                                        "value": "@{pipeline().globalParameters.environment}_tableauResponseSignIn.json",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "lastModified"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "JsonReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Set 4hoursBuffer",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Get LastModifiedTokenTime",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "lastModTimePlus4Hours",
                            "value": {
                                "value": "@addhours(activity('Get LastModifiedTokenTime').output.lastModified,4)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set generateToken bool",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Set 4hoursBuffer",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "generateToken",
                            "value": {
                                "value": "@if(greaterOrEquals(utcnow(),variables('lastModTimePlus4Hours')),true,false)",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "REGIONAL REFRESH"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 49
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 3
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 39
                    }
                },
                "variables": {
                    "output": {
                        "type": "String"
                    },
                    "token": {
                        "type": "String"
                    },
                    "run_status": {
                        "type": "Integer",
                        "defaultValue": 0
                    },
                    "refreshType": {
                        "type": "String"
                    },
                    "parentFolder": {
                        "type": "String"
                    },
                    "generateToken": {
                        "type": "Boolean",
                        "defaultValue": true
                    },
                    "lastModTimePlus4Hours": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Consumption/Consumption Systems"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:26:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/TableauRestAPI')]",
                "[concat(variables('factoryId'), '/datasets/TableauJsonResponse')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/Tableau Refresh Status')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/consumption_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get sequences",
                        "description": "Retrieve the sequence configuration in the current use case",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each sequence",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get sequences",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Sequences').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "check sequence status",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('issequencefailed')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "run consumption sequence",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "consumption_sequence",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "category": {
                                                            "value": "@pipeline().parameters.category",
                                                            "type": "Expression"
                                                        },
                                                        "usecase_id": {
                                                            "value": "@pipeline().parameters.usecase_id",
                                                            "type": "Expression"
                                                        },
                                                        "phase_id": {
                                                            "value": "@pipeline().parameters.phase_id",
                                                            "type": "Expression"
                                                        },
                                                        "sequence_id": {
                                                            "value": "@item().sequence_id",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "set",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "run consumption sequence",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "issequencefailed",
                                                    "value": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get sequences",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each sequence",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "check loop status",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "for each sequence",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('issequencefailed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "audit success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail children",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "fail this pipeline",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "audit fail children",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Consumption master failed for @{pipeline().parameters.usecase_id}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "3001"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "output_variable": {
                        "type": "String"
                    },
                    "issequencefailed": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Consumption"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T13:09:45Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/consumption_sequence')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/consumption_sequence')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get processes",
                        "description": "Retrieve process records for the current sequence",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT \n    *\nFROM META_RAW.PROCESS\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each process",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get processes').output.value",
                                "type": "Expression"
                            },
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "decide consumption",
                                    "description": "Decide which Consumption Activity to use based on the phase_type parameter",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@item().phase_type",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "Tableau",
                                                "activities": [
                                                    {
                                                        "name": "tableau refresh",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "Tableau",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().process_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Power BI",
                                                "activities": [
                                                    {
                                                        "name": "power bi refresh",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "Power BI",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {}
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "defaultActivities": [
                                            {
                                                "name": "Unknown source",
                                                "type": "Fail",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "message": {
                                                        "value": "Unknown source type: @{item().source_type}",
                                                        "type": "Expression"
                                                    },
                                                    "errorCode": "2000"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each process",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each process",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "sequence_id": {
                        "type": "int"
                    }
                },
                "folder": {
                    "name": "Consumption"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-23T12:26:50Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/Tableau')]",
                "[concat(variables('factoryId'), '/pipelines/Power BI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dbt')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Set parentFolder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "Select \n\"'jobId'\" AS jobId,\n\"'accountId'\" AS accountId,\n\"'waitTime'\" AS waitTime,\n\"'transformationType'\" AS transformationType,\n\"'tempId'\" AS tempId\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'jobId',\n'accountId',\n'waitTime',\n'transformationType',\n'tempId'\n));",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Trigger DBT Job",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:03:00",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "POST",
                                "requestBody": {
                                    "value": "{\n  \"cause\": \"Triggered via ADF transformation pipeline in @{pipeline().globalParameters.environment}\"\n}",
                                    "type": "Expression"
                                },
                                "additionalHeaders": {
                                    "Content-Type": "application/json",
                                    "Authorization": {
                                        "value": "Token @{activity('Fetch Credential from Vault').output.value}",
                                        "type": "Expression"
                                    }
                                },
                                "paginationRules": {
                                    "supportRFC5988": "true"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "DbtRestAPI",
                                "type": "DatasetReference",
                                "parameters": {
                                    "url": {
                                        "value": "api/v2/accounts/@{activity('read parameters').output.value[0].accountId}/jobs/@{activity('read parameters').output.value[0].jobId}/run/",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DbtAPIResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/dbt/@{activity('read parameters').output.value[0].jobId}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "dbtResponseTrigger.json"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Read response",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Trigger DBT Job",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "DbtAPIResponse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tempContainer": "asp",
                                    "tempDirectory": {
                                        "value": "@{variables('parentFolder')}/dbt/@{activity('read parameters').output.value[0].jobId}",
                                        "type": "Expression"
                                    },
                                    "tempFileName": "dbtResponseTrigger.json"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Fetch Credential from Vault",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": "https://akvadbplt001.vault.azure.net/secrets/adfadbplt001lsdbtclouddnacore?api-version=7.0",
                            "connectVia": {
                                "referenceName": "adfiradbplt002",
                                "type": "IntegrationRuntimeReference"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "wait until job is complete",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "get run id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greaterOrEquals(variables('run_status'), 10)",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "wait a while before checking status",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": {
                                            "value": "@int(activity('read parameters').output.value[0].waitTime)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Status Value",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Read Job Status",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "run_status",
                                        "value": {
                                            "value": "@activity('Read Job Status').output.value[0].data?.status",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Get DBT Job Status",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "wait a while before checking status",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:03:00",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "Authorization": {
                                                    "value": "Token @{activity('Fetch Credential from Vault').output.value}",
                                                    "type": "Expression"
                                                }
                                            },
                                            "paginationRules": {
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "DbtRestAPI",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "url": {
                                                    "value": "api/v2/accounts/@{activity('read parameters').output.value[0].accountId}/runs/@{variables('run_id')}/",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "DbtAPIResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": "asp",
                                                "tempDirectory": {
                                                    "value": "@{variables('parentFolder')}/dbt/@{activity('read parameters').output.value[0].jobId}",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": "dbtResponseCurrentJobStatus.json"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Read Job Status",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Get DBT Job Status",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "JsonSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "JsonReadSettings"
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "DbtAPIResponse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tempContainer": "asp",
                                                "tempDirectory": {
                                                    "value": "@{variables('parentFolder')}/dbt/@{activity('read parameters').output.value[0].jobId}",
                                                    "type": "Expression"
                                                },
                                                "tempFileName": "dbtResponseCurrentJobStatus.json"
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    },
                    {
                        "name": "get run id",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Read response",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "run_id",
                            "value": {
                                "value": "@activity('Read response').output.value[0].data?.id",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail pipeline",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "wait until job is complete",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(variables('run_status'),10)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "fail this job",
                                    "type": "Fail",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "dbt job failed, check on run_id @{variables('run_id')} and retry",
                                            "type": "Expression"
                                        },
                                        "errorCode": "2002"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit failure of dbt status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error Fetching token from Vault",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Fetch Credential from Vault').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Fetch Credential from Vault').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Fetch Credential from Vault",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger DBT Job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_4",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "wait until job is complete",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error triggering DBT job",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Trigger DBT Job",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Trigger DBT Job').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Trigger DBT Job').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error reading DBT response",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Read response",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Read response').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('Read response').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error dbt run failed",
                        "type": "ExecutePipeline",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "SwitchBetweenType1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "dbt job failed, check on run_id @{variables('run_id')} and retry",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "2002",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set refreshType",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "refreshType",
                            "value": {
                                "value": "@{activity('read parameters').output.value[0].transformationType}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SwitchBetweenType",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "Set refreshType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set tempId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@variables('refreshType')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "transformation",
                                    "activities": [
                                        {
                                            "name": "Wait",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "ingestion",
                                    "activities": [
                                        {
                                            "name": "Script1",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "select * from core_integration.dbtjobs_test_cdc_metadata where tempid='@{variables('temp_id')}';\n",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "Script2",
                                            "type": "Script",
                                            "dependsOn": [
                                                {
                                                    "activity": "Set parameters",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "call core_integration.SP_failed_tests_models('@{variables('temp_id')}',@{variables('sp_params')});",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        },
                                        {
                                            "name": "ModelName Array",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Script2",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "modelNameArray",
                                                "value": {
                                                    "value": "@activity('Script2').output.resultSets[0].rows",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        {
                                            "name": "Set parameters",
                                            "type": "SetVariable",
                                            "dependsOn": [
                                                {
                                                    "activity": "Script1",
                                                    "dependencyConditions": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            ],
                                            "policy": {
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "variableName": "sp_params",
                                                "value": {
                                                    "value": "'@{replace(activity('Script1').output.resultSets[0].rows[0].MODELS,'''' ,'\\''')}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set tempId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "temp_id",
                            "value": {
                                "value": "@{activity('read parameters').output.value[0].tempId}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEveryModel",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "SwitchBetweenType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@variables('modelNameArray')",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Script3",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "adfadbplt001lssnfkpltdnacore",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "select * from CORE_INTEGRATION.DBTTEST_TABLES_METADATA where model= '@{item().model_name}';",
                                                    "type": "Expression"
                                                }
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                },
                                {
                                    "name": "Fetch Failed Records",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Script3",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SnowflakeSource",
                                            "query": {
                                                "value": "@activity('Script3').output.resultSets[0].rows[0].QUERY",
                                                "type": "Expression"
                                            },
                                            "exportSettings": {
                                                "type": "SnowflakeExportCopyCommand"
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "DNA_CORE_Dataset",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Email records",
                                    "type": "Wait",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Failed Records",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SwitchBetweenType1",
                        "type": "Switch",
                        "dependsOn": [
                            {
                                "activity": "ForEveryModel",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@variables('refreshType')",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "transformation",
                                    "activities": [
                                        {
                                            "name": "Wait1",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                },
                                {
                                    "value": "ingestion",
                                    "activities": [
                                        {
                                            "name": "Script5",
                                            "type": "Script",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "linkedServiceName": {
                                                "referenceName": "adfadbplt001lssnfkpltdnacore",
                                                "type": "LinkedServiceReference"
                                            },
                                            "typeProperties": {
                                                "scripts": [
                                                    {
                                                        "type": "Query",
                                                        "text": {
                                                            "value": "call core_integration.SP_updatecdc_failed_tests_models('@{variables('temp_id')}',@{variables('sp_params')});",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ],
                                                "scriptBlockExecutionTimeout": "02:00:00"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "error dbt run failed_copy1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "dbt job failed, check on run_id @{variables('run_id')} and retry",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "2002",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Set parentFolder",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "parentFolder",
                            "value": {
                                "value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string",
                        "defaultValue": "test"
                    },
                    "usecase_id": {
                        "type": "int",
                        "defaultValue": 7
                    },
                    "sequence_id": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "process_id": {
                        "type": "int",
                        "defaultValue": 20
                    },
                    "phase_id": {
                        "type": "int",
                        "defaultValue": 2
                    }
                },
                "variables": {
                    "run_id": {
                        "type": "Integer"
                    },
                    "run_status": {
                        "type": "Integer"
                    },
                    "modelNameArray": {
                        "type": "Array",
                        "defaultValue": []
                    },
                    "temp_id": {
                        "type": "String",
                        "defaultValue": "1"
                    },
                    "refreshType": {
                        "type": "String",
                        "defaultValue": "Ingestion"
                    },
                    "test": {
                        "type": "String"
                    },
                    "sp_params": {
                        "type": "String"
                    },
                    "parentFolder": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Transformation/dbt"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:20:59Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/DbtRestAPI')]",
                "[concat(variables('factoryId'), '/datasets/DbtAPIResponse')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]",
                "[concat(variables('factoryId'), '/datasets/DNA_CORE_Dataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dbt_backup')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit failure",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get api token",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "read parameters",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT PARAMETER_GROUP_NAME,\n\"'transform_script'\" TRANSFORM_SCRIPT,\n\"'job_id'\" JOB_ID,\n\"'account_id'\" ACCOUNT_ID\nFROM\n(SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE\n)\nPIVOT(\nMAX(PARAMETER_VALUE) FOR PARAMETER_NAME IN (\n'transform_script','job_id','account_id')\n)",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "run dbt model",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "get account id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "get job id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "get token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Authorization": {
                                    "value": "Token @{variables('dbtapitoken')}",
                                    "type": "Expression"
                                }
                            },
                            "url": {
                                "value": "https://cloud.getdbt.com/api/v2/accounts/@{variables('accountid')}/jobs/@{variables('job_id')}/run/",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "body": {
                                "cause": "Triggered via API"
                            }
                        }
                    },
                    {
                        "name": "audit failure on dbt call",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "run dbt model",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log 1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "run dbt model",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": {
                                    "value": "@pipeline().parameters.process_id",
                                    "type": "Expression"
                                },
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('run dbt model').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                },
                                "error_code": {
                                    "value": "@activity('run dbt model').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "get account id",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "accountid",
                            "value": {
                                "value": "@activity('read parameters').output.firstRow.account_id",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "get job id",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "read parameters",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "job_id",
                            "value": {
                                "value": "@activity('read parameters').output.firstRow.job_id",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "get token",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "get api token",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": true,
                            "secureInput": true
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "dbtapitoken",
                            "value": {
                                "value": "@activity('get api token').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "wait until job is complete",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "get run id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greaterOrEquals(variables('run_status'), 10)",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "wait a while before checking status",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 20
                                    }
                                },
                                {
                                    "name": "get dbt job status",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "wait a while before checking status",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": true
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {
                                            "Authorization": {
                                                "value": "Token @{variables('dbtapitoken')}",
                                                "type": "Expression"
                                            }
                                        },
                                        "url": {
                                            "value": "https://cloud.getdbt.com/api/v2/accounts/@{variables('accountid')}/runs/@{variables('run_id')}/",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "set status value",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "get dbt job status",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "run_status",
                                        "value": {
                                            "value": "@activity('get dbt job status').output.data?.status",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    },
                    {
                        "name": "get run id",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "run dbt model",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "run_id",
                            "value": {
                                "value": "@activity('run dbt model').output.data?.id",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "fail pipeline",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "wait until job is complete",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(variables('run_status'),10)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "fail this job",
                                    "type": "Fail",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "dbt job failed, check on run_id @{variables('run_id')} and rey",
                                            "type": "Expression"
                                        },
                                        "errorCode": "2002"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit failure of dbt status",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "fail pipeline",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "get api token",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": true,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "https://kenvuekeyvault.vault.azure.net/secrets/dbttoken/?api-version=7.0",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "sequence_id": {
                        "type": "int"
                    },
                    "process_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "dbt-result": {
                        "type": "String"
                    },
                    "trans_script": {
                        "type": "String"
                    },
                    "Isunknown": {
                        "type": "Boolean"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "folder_path": {
                        "type": "String"
                    },
                    "target_table": {
                        "type": "String"
                    },
                    "target_schema": {
                        "type": "String"
                    },
                    "file_spec": {
                        "type": "String"
                    },
                    "stage": {
                        "type": "String"
                    },
                    "file_format": {
                        "type": "String"
                    },
                    "job_id": {
                        "type": "String"
                    },
                    "accountid": {
                        "type": "String"
                    },
                    "dbtapitoken": {
                        "type": "String"
                    },
                    "isdbtcomplete": {
                        "type": "Boolean",
                        "defaultValue": false
                    },
                    "run_id": {
                        "type": "Integer",
                        "defaultValue": 0
                    },
                    "run_status": {
                        "type": "Integer",
                        "defaultValue": 0
                    }
                },
                "folder": {
                    "name": "Transformation/dbt"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:20:59Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ingestion_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get sequences",
                        "description": "Retrieve the sequence configuration in the current use case",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "For each sequence",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get sequences",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get sequences').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "check pipeline status",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('pipelinefailed')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "execute sequence",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "ingestion_sequence",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "sequence_id": {
                                                            "value": "@item().sequence_id",
                                                            "type": "Expression"
                                                        },
                                                        "usecase_id": {
                                                            "value": "@pipeline().parameters.usecase_id",
                                                            "type": "Expression"
                                                        },
                                                        "phase_id": {
                                                            "value": "@pipeline().parameters.phase_id",
                                                            "type": "Expression"
                                                        },
                                                        "category": {
                                                            "value": "@pipeline().parameters.category",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "set to failed",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "execute sequence",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "pipelinefailed",
                                                    "value": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get sequences",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on for loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "For each sequence",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "check sub pipelinestatus",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "For each sequence",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('pipelinefailed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "audit success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail inside for loop",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "fail this pipeline",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "audit fail inside for loop",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Ingestion master failed for @{pipeline().parameters.usecase_id}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "1004"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "variables": {
                    "output_variable": {
                        "type": "String"
                    },
                    "Isunknown": {
                        "type": "Boolean"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "folder_path": {
                        "type": "String"
                    },
                    "target_table": {
                        "type": "String"
                    },
                    "target_schema": {
                        "type": "String"
                    },
                    "file_spec": {
                        "type": "String"
                    },
                    "stage": {
                        "type": "String"
                    },
                    "file_format": {
                        "type": "String"
                    },
                    "pipelinefailed": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Ingestion"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T19:45:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/ingestion_sequence')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ingestion_sequence')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get processes",
                        "description": "Retrieve process records for the current sequence",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT *\nFROM META_RAW.PROCESS\nJOIN META_RAW.SOURCE USING(SOURCE_ID)\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "For each process",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get processes').output.value",
                                "type": "Expression"
                            },
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "decide source",
                                    "description": "Decide which Source Activity to use based on the source_type parameter",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@item().source_type",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "SFTP",
                                                "activities": [
                                                    {
                                                        "name": "SFTP ingestion",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "SFTP",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "ADLS",
                                                "activities": [
                                                    {
                                                        "name": "ADLS ingestion",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "ADLS",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().process_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "SQL Server",
                                                "activities": [
                                                    {
                                                        "name": "SQL Server ingestion",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "SQL Server",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().process_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "MDS",
                                                "activities": [
                                                    {
                                                        "name": "MDS ingestion",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "MDS",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().process_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Snowflake",
                                                "activities": [
                                                    {
                                                        "name": "MDS_reverse_sync",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "MDS_Reverse_Sync",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@pipeline().parameters.usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "sequence_id": {
                                                                    "value": "@pipeline().parameters.sequence_id",
                                                                    "type": "Expression"
                                                                },
                                                                "process_id": {
                                                                    "value": "@item().process_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@pipeline().parameters.phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "defaultActivities": [
                                            {
                                                "name": "Unknown source",
                                                "type": "Fail",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "message": {
                                                        "value": "Unknown source type: @{item().source_type}",
                                                        "type": "Expression"
                                                    },
                                                    "errorCode": "2000"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "For each process",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_LKP",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Finish_Fail_Foreach",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "For each process",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "sequence_id": {
                        "type": "int"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "variables": {
                    "Isunknown": {
                        "type": "Boolean"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "folder_path": {
                        "type": "String"
                    },
                    "target_table": {
                        "type": "String"
                    },
                    "target_schema": {
                        "type": "String"
                    },
                    "file_spec": {
                        "type": "String"
                    },
                    "stage": {
                        "type": "String"
                    },
                    "file_format": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Ingestion"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T12:21:03Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/SFTP')]",
                "[concat(variables('factoryId'), '/pipelines/ADLS')]",
                "[concat(variables('factoryId'), '/pipelines/SQL Server')]",
                "[concat(variables('factoryId'), '/pipelines/MDS')]",
                "[concat(variables('factoryId'), '/pipelines/MDS_Reverse_Sync')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "read running status",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "parameters": [
                                        {
                                            "name": "job",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "category",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        }
                                    ],
                                    "type": "Query",
                                    "text": "SET JOB= ?;\nSET CATEGORY = ?;\nSELECT AUDIT_LOG_ID ,PROCESS_STATUS FROM \nMETA_RAW.PROCESS_AUDIT_LOG\nWHERE JOB_NAME = $JOB\nAND CATEGORY = $CATEGORY\nQUALIFY ROW_NUMBER() OVER(ORDER BY AUDIT_LOG_ID DESC) =1\n;"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    },
                    {
                        "name": "check running status",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "read running status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@or(if(equals(activity('read running status').output.resultSetCount,0),true,\n    not(equals(toUpper(activity('read running status').output.resultSets[0].rows[0].process_status),'START'))),\n    pipeline().parameters.force_rerun\n    )",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "fail",
                                    "type": "Fail",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "@concat(pipeline().Pipeline, ' is already running for ' , pipeline().parameters.category,\n', If that is of an obsolete status, please trigger the pipeling with force_rerun =  true.')",
                                            "type": "Expression"
                                        },
                                        "errorCode": "1000"
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit start",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "START",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": 0,
                                            "group_id": 0
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail on for loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each usecase",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline().GroupId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": 0,
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "read usecases",
                        "description": "Get distinct use case sequence id's",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "check running status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT\n    USECASE.SEQUENCE_ID AS USECASE_SEQUENCE_ID\nFROM META_RAW.USECASE\nWHERE UPPER(CATEGORY) = '@{toUpper(pipeline().parameters.category)}'\n    AND USECASE.IS_ACTIVE = TRUE\nORDER BY USECASE.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each usecase",
                        "description": "Runs for each usecase, executes the phase_master pipeline with usecase_id as parameter",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "read usecases",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('read usecases').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "check phase master status",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('isphasemasterfailed')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "run usecase master",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "usecase_master",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "usecase_sequence_id": {
                                                            "value": "@item().usecase_sequence_id",
                                                            "type": "Expression"
                                                        },
                                                        "category": {
                                                            "value": "@pipeline().parameters.category",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "set to failed",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "run usecase master",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "isphasemasterfailed",
                                                    "value": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read usecases",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline().GroupId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": 0,
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "eror log 2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read usecases",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('read usecases').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('read usecases').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "read running status",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('read running status').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('read running status').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    },
                    {
                        "name": "eror log 3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each usecase",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('run usecase master').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('run usecase master').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    },
                    {
                        "name": "check phasemaster status",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "for each usecase",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('isphasemasterfailed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "audit success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": 0,
                                            "group_id": 0
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail child",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": 0,
                                            "group_id": 0
                                        }
                                    }
                                },
                                {
                                    "name": "eror log 4",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('read usecases').output.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": 0,
                                            "error_code": {
                                                "value": "@activity('read usecases').output.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": 0
                                        }
                                    }
                                },
                                {
                                    "name": "fail this pipeline",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "eror log 4",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "audit fail child",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Phase master failed for @{pipeline().parameters.category}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "1005"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "force_rerun": {
                        "type": "bool",
                        "defaultValue": false
                    }
                },
                "variables": {
                    "test_variable": {
                        "type": "String"
                    },
                    "isphasemasterfailed": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Master_Pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T15:01:57Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/usecase_master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/phase_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get phases",
                        "description": "Retrieve all phases for the current usecase",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT\n    PHASE.PHASE_ID,\n    PHASE.PHASE_NAME,\n    PROCESS.USECASE_ID\nFROM META_RAW.PROCESS \nJOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE \n    PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PHASE.PHASE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "For each group and phase combination",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get phases",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get phases').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Decide phase",
                                    "description": "Decide, based on each group's phase, what phase pipeline to run",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@if(equals(variables('isphasefailed'),true),'failed'\n    ,item().phase_name)",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "Ingestion",
                                                "activities": [
                                                    {
                                                        "name": "run Ingestion",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "ingestion_master",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "usecase_id": {
                                                                    "value": "@item().usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@item().phase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "ingest failed",
                                                        "type": "SetVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "run Ingestion",
                                                                "dependencyConditions": [
                                                                    "Failed"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "isphasefailed",
                                                            "value": true
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Transformation",
                                                "activities": [
                                                    {
                                                        "name": "run transformation",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "transformation_master",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@item().usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@item().phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "tranform failed",
                                                        "type": "SetVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "run transformation",
                                                                "dependencyConditions": [
                                                                    "Failed"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "isphasefailed",
                                                            "value": true
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "Consumption",
                                                "activities": [
                                                    {
                                                        "name": "run consumption",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "consumption_master",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "category": {
                                                                    "value": "@pipeline().parameters.category",
                                                                    "type": "Expression"
                                                                },
                                                                "usecase_id": {
                                                                    "value": "@item().usecase_id",
                                                                    "type": "Expression"
                                                                },
                                                                "phase_id": {
                                                                    "value": "@item().phase_id",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "consume fialed",
                                                        "type": "SetVariable",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "run consumption",
                                                                "dependencyConditions": [
                                                                    "Failed"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "isphasefailed",
                                                            "value": true
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit fail on for loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "For each group and phase combination",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get phases",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "audit fail on lookup",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('get phases').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('get phases').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "error log 2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "audit fail on for loop",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('Decide phase').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('Decide phase').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "For each group and phase combination",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('isphasefailed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "audit success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "group_id": 0
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit fail in some phase",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "group_id": 0
                                        }
                                    }
                                },
                                {
                                    "name": "error log 3",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "audit fail in some phase",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_error_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "job_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "error_message": {
                                                "value": "@activity('Decide phase').error?.message",
                                                "type": "Expression"
                                            },
                                            "run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "phase_id": 0,
                                            "error_code": {
                                                "value": "@activity('Decide phase').error?.errorCode",
                                                "type": "Expression"
                                            },
                                            "job_id": 0
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "usecase_id": {
                        "type": "int"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "variables": {
                    "isphasefailed": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Master_Pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T15:01:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/ingestion_master')]",
                "[concat(variables('factoryId'), '/pipelines/transformation_master')]",
                "[concat(variables('factoryId'), '/pipelines/consumption_master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/runSQL')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach_load",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.load_fileNames",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Web3",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "https://github.com/KV-APAC-DNA/@{pipeline().parameters.RepoName}/blob/@{pipeline().parameters.BranchName}/@{pipeline().parameters.load_folderName}/@{item()}?raw=true",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        }
                                    }
                                },
                                {
                                    "name": "Script4",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "Web3",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "adfadbplt001lssnfkpltdnaload",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@activity('Web3').output.Response",
                                                    "type": "Expression"
                                                }
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "ForEach_core",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.core_fileNames",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Web_core",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "GET",
                                        "headers": {},
                                        "url": {
                                            "value": "https://github.com/KV-APAC-DNA/@{pipeline().parameters.RepoName}/blob/@{pipeline().parameters.BranchName}/@{pipeline().parameters.core_folderName}/@{item()}?raw=true",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Script4_copy1",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "Web_core",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "adfadbplt001lssnfkpltdnacore",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@activity('Web_core').output.Response",
                                                    "type": "Expression"
                                                }
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "load_folderName": {
                        "type": "string",
                        "defaultValue": "PROD_TABLE_SCRIPTS/load"
                    },
                    "RepoName": {
                        "type": "string",
                        "defaultValue": "gitadfadbplt001"
                    },
                    "BranchName": {
                        "type": "string",
                        "defaultValue": "DDL_DML_Scripts"
                    },
                    "load_fileNames": {
                        "type": "array"
                    },
                    "core_fileNames": {
                        "type": "array"
                    },
                    "core_folderName": {
                        "type": "string",
                        "defaultValue": "PROD_TABLE_SCRIPTS/core"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/s3_adls_child')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach2",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.s3_file",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "if_file_exists",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "s3_source_binary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "bucket": {
                                                    "value": "@pipeline().parameters.s3_bucket",
                                                    "type": "Expression"
                                                },
                                                "path": {
                                                    "value": "@pipeline().parameters.s3_path",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists"
                                        ],
                                        "storeSettings": {
                                            "type": "AmazonS3ReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "if_file_exists",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@activity('if_file_exists').output.exists",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "s3_to_adls",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "BinarySource",
                                                        "storeSettings": {
                                                            "type": "AmazonS3ReadSettings",
                                                            "recursive": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "BinaryReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "BinarySink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "s3_source_binary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "bucket": {
                                                                "value": "@pipeline().parameters.s3_bucket",
                                                                "type": "Expression"
                                                            },
                                                            "path": {
                                                                "value": "@pipeline().parameters.s3_path",
                                                                "type": "Expression"
                                                            },
                                                            "file": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "adls_sink_binary",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "adls_container": {
                                                                "value": "@pipeline().parameters.adls_container",
                                                                "type": "Expression"
                                                            },
                                                            "adls_path": {
                                                                "value": "@pipeline().parameters.adls_path",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "s3_bucket": {
                        "type": "string"
                    },
                    "s3_path": {
                        "type": "string"
                    },
                    "s3_file": {
                        "type": "array"
                    },
                    "adls_container": {
                        "type": "string"
                    },
                    "adls_path": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines/s3_to_adls"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/s3_source_binary')]",
                "[concat(variables('factoryId'), '/datasets/adls_sink_binary')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/s3_to_adls')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get_metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_metadata').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "get file name",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "s3_source_binary",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "bucket": {
                                                    "value": "@item().S3_BUCKET",
                                                    "type": "Expression"
                                                },
                                                "path": {
                                                    "value": "@item().S3_PATH",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat('*',item().S3_FILE,'*.*')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "AmazonS3ReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Filter Only File",
                                    "type": "Filter",
                                    "dependsOn": [
                                        {
                                            "activity": "get file name",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "items": {
                                            "value": "@activity('get file name').output.childItems",
                                            "type": "Expression"
                                        },
                                        "condition": {
                                            "value": "@equals(item().type,'File')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Execute Pipeline1",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Filter Only File",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "s3_adls_child",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "s3_bucket": {
                                                "value": "@item().S3_BUCKET",
                                                "type": "Expression"
                                            },
                                            "s3_path": {
                                                "value": "@item().S3_PATH",
                                                "type": "Expression"
                                            },
                                            "s3_file": {
                                                "value": "@activity('Filter Only File').output.value",
                                                "type": "Expression"
                                            },
                                            "adls_container": {
                                                "value": "@item().ADLS_CONTAINER",
                                                "type": "Expression"
                                            },
                                            "adls_path": {
                                                "value": "@item().ADLS_PATH",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get_metadata",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "@concat('select * from meta_raw.s3_to_adls where GROUP_ID=',pipeline().parameters.Group_id)",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Group_id": {
                        "type": "string"
                    }
                },
                "variables": {
                    "list_of_file": {
                        "type": "Array"
                    },
                    "s3_bucket": {
                        "type": "String"
                    },
                    "s3_path": {
                        "type": "String"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "adls_path": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines/s3_to_adls"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/datasets/s3_source_binary')]",
                "[concat(variables('factoryId'), '/pipelines/s3_adls_child')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/transformation_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit failure on exec pipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each sequence",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "for each sequence",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get sequences",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get sequences').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "check sequence status",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@variables('issequencefailed')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "exec transform sequence",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "transformation_sequence",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "sequence_id": {
                                                            "value": "@item().sequence_id",
                                                            "type": "Expression"
                                                        },
                                                        "usecase_id": {
                                                            "value": "@pipeline().parameters.usecase_id",
                                                            "type": "Expression"
                                                        },
                                                        "phase_id": {
                                                            "value": "@pipeline().parameters.phase_id",
                                                            "type": "Expression"
                                                        },
                                                        "category": {
                                                            "value": "@pipeline().parameters.category",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "set to failed",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "exec transform sequence",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "issequencefailed",
                                                    "value": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get sequences",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT \n    PROCESS.SEQUENCE_ID\nFROM META_RAW.USECASE\nLEFT JOIN META_RAW.PROCESS USING(USECASE_ID)\nLEFT JOIN META_RAW.PHASE USING(PHASE_ID)\nWHERE USECASE.USECASE_ID = @{pipeline().parameters.usecase_id}\n    AND PHASE_ID = @{pipeline().parameters.phase_id}\n    AND USECASE.IS_ACTIVE = TRUE\n    AND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "check if sequence failed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "for each sequence",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@variables('issequencefailed')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "audit success",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FINISH",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "audit failure on loop",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "write_audit_log",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "process_id": 0,
                                            "status": "FAIL",
                                            "input_row_count": 0,
                                            "output_row_count": 0,
                                            "jobname": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "pipeline_id": {
                                                "value": "@pipeline()?.TriggeredByPipelineRunId",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "fail this pipeline",
                                    "type": "Fail",
                                    "dependsOn": [
                                        {
                                            "activity": "audit failure on loop",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "message": {
                                            "value": "Transformation Master failed for @{pipeline().parameters.usecase_id}",
                                            "type": "Expression"
                                        },
                                        "errorCode": "1020"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "output_variable": {
                        "type": "String"
                    },
                    "dbt-result": {
                        "type": "String"
                    },
                    "sequence_id": {
                        "type": "Integer"
                    },
                    "Isunknown": {
                        "type": "Boolean"
                    },
                    "adls_container": {
                        "type": "String"
                    },
                    "folder_path": {
                        "type": "String"
                    },
                    "target_table": {
                        "type": "String"
                    },
                    "target_schema": {
                        "type": "String"
                    },
                    "file_spec": {
                        "type": "String"
                    },
                    "stage": {
                        "type": "String"
                    },
                    "file_format": {
                        "type": "String"
                    },
                    "issequencefailed": {
                        "type": "Boolean",
                        "defaultValue": false
                    }
                },
                "folder": {
                    "name": "Transformation"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-28T19:45:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/transformation_sequence')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/transformation_sequence')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get processes",
                        "description": "Retrieve process records for the current sequence",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT *\nFROM META_RAW.PROCESS\nWHERE PROCESS.USECASE_ID = @{pipeline().parameters.usecase_id}\nAND PROCESS.PHASE_ID = @{pipeline().parameters.phase_id}\nAND PROCESS.SEQUENCE_ID = @{pipeline().parameters.sequence_id}\nAND PROCESS.IS_ACTIVE = TRUE\nORDER BY PROCESS.SEQUENCE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each process",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get processes').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "execute dbt pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "dbt",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            },
                                            "usecase_id": {
                                                "value": "@pipeline().parameters.usecase_id",
                                                "type": "Expression"
                                            },
                                            "sequence_id": {
                                                "value": "@pipeline().parameters.sequence_id",
                                                "type": "Expression"
                                            },
                                            "process_id": {
                                                "value": "@item().process_id",
                                                "type": "Expression"
                                            },
                                            "phase_id": {
                                                "value": "@pipeline().parameters.phase_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each process",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get processes",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "audit fail on pipeline",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each process",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "usecase_id": {
                                    "value": "@pipeline().parameters.usecase_id",
                                    "type": "Expression"
                                },
                                "phase_id": {
                                    "value": "@pipeline().parameters.phase_id",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "sequence_id": {
                        "type": "int"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "variables": {
                    "dbt-result": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Transformation"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T20:19:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/dbt')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/usecase_master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get usecases",
                        "description": "Retrieve all use cases from the current use case sequence",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "audit start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SnowflakeSource",
                                "query": {
                                    "value": "SELECT DISTINCT\n    USECASE.USECASE_ID\nFROM META_RAW.USECASE\nWHERE UPPER(CATEGORY) = '@{toUpper(pipeline().parameters.category)}'\n    AND USECASE.SEQUENCE_ID = @{pipeline().parameters.usecase_sequence_id}\n    AND USECASE.IS_ACTIVE = TRUE\nORDER BY USECASE.USECASE_ID ASC;",
                                    "type": "Expression"
                                },
                                "exportSettings": {
                                    "type": "SnowflakeExportCopyCommand"
                                }
                            },
                            "dataset": {
                                "referenceName": "mtd_process",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for each usecase",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get usecases",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get usecases').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "run phase master",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "phase_master",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "usecase_id": {
                                                "value": "@item().usecase_id",
                                                "type": "Expression"
                                            },
                                            "category": {
                                                "value": "@pipeline().parameters.category",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "audit start",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "START",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit success",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each usecase",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FINISH",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit fail on for loop",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "for each usecase",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "audit fail on lookup",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "get usecases",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_audit_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "status": "FAIL",
                                "input_row_count": 0,
                                "output_row_count": 0,
                                "jobname": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
                                    "type": "Expression"
                                },
                                "runid": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "pipeline_id": {
                                    "value": "@pipeline()?.TriggeredByPipelineRunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "group_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "audit fail on lookup",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('get usecases').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('get usecases').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    },
                    {
                        "name": "error log 2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "audit fail on for loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "write_error_log",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "process_id": 0,
                                "job_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "error_message": {
                                    "value": "@activity('get usecases').error?.message",
                                    "type": "Expression"
                                },
                                "run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "category": {
                                    "value": "@pipeline().parameters.category",
                                    "type": "Expression"
                                },
                                "phase_id": 0,
                                "error_code": {
                                    "value": "@activity('run phase master').error?.errorCode",
                                    "type": "Expression"
                                },
                                "job_id": 0
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "usecase_sequence_id": {
                        "type": "int"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Master_Pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T15:01:56Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/mtd_process')]",
                "[concat(variables('factoryId'), '/pipelines/write_audit_log')]",
                "[concat(variables('factoryId'), '/pipelines/write_error_log')]",
                "[concat(variables('factoryId'), '/pipelines/phase_master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/write_audit_log')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "write to audit table",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "parameters": [
                                        {
                                            "name": "processid",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "pipelineid",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "runid",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "jobname",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "message",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "status",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "incount",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "outcount",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "category",
                                            "type": "String",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "usecase_id",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "group_id",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.group_id, null),0,pipeline().parameters.group_id)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "phase_id",
                                            "type": "Int32",
                                            "value": {
                                                "value": "@if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        }
                                    ],
                                    "type": "NonQuery",
                                    "text": {
                                        "value": "alter session set  timezone ='Asia/Singapore';\nSET DURATION =(\nSELECT DATEDIFF(s, MOMENT, CURRENT_TIMESTAMP())\nFROM META_RAW.PROCESS_AUDIT_LOG WHERE RUN_ID='@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}');\n\nINSERT INTO META_RAW.PROCESS_AUDIT_LOG\n(\nPROCESS_ID,\nPHASE_ID,\nMOMENT,\nDURATION,\nPIPELINE_ID,\nRUN_ID,\nJOB_NAME,\nMESSAGE,\nPROCESS_STATUS,\nINPUT_ROW_COUNT,\nOUTPUT_ROW_COUNT,\nCATEGORY,\nUSECASE_ID\n)\nVALUES\n(\n@{if(equals(pipeline().parameters.process_id, null),0,pipeline().parameters.process_id)},\n@{if(equals(pipeline().parameters.phase_id, null),0,pipeline().parameters.phase_id)},\nCURRENT_TIMESTAMP,\n$DURATION,\n'@{if(equals(pipeline().parameters.pipeline_id, null),0,pipeline().parameters.pipeline_id)}',\n'@{if(equals(pipeline().parameters.runid, null),'',pipeline().parameters.runid)}',\n'@{if(equals(pipeline().parameters.jobname, null),'',pipeline().parameters.jobname)}',\n'@{if(equals(pipeline().parameters.message, null),'',pipeline().parameters.message)}',\nTRIM(UPPER('@{if(equals(pipeline().parameters.status, null),'',pipeline().parameters.status)}')),\n@{if(equals(pipeline().parameters.input_row_count, null),0,pipeline().parameters.input_row_count)},\n@{if(equals(pipeline().parameters.output_row_count, null),0,pipeline().parameters.output_row_count)},\n'@{if(equals(pipeline().parameters.category, null),'',pipeline().parameters.category)}',\n@{if(equals(pipeline().parameters.usecase_id, null),0,pipeline().parameters.usecase_id)}\n);\n",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "process_id": {
                        "type": "int"
                    },
                    "status": {
                        "type": "string"
                    },
                    "input_row_count": {
                        "type": "int"
                    },
                    "output_row_count": {
                        "type": "int"
                    },
                    "jobname": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "runid": {
                        "type": "string"
                    },
                    "pipeline_id": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "usecase_id": {
                        "type": "int"
                    },
                    "group_id": {
                        "type": "int"
                    },
                    "phase_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "subscriptionid": {
                        "type": "String"
                    },
                    "test_variable": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Logging"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T17:06:39Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/write_error_log')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "write to error log",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "adfadbplt001lssnfkpltdnaload",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "NonQuery",
                                    "text": {
                                        "value": "alter session set  timezone ='Asia/Singapore';\nINSERT INTO META_RAW.ERROR_LOG (\n    PROCESS_ID,\n    PHASE_ID,\n    MOMENT,\n    RUN_ID,\n    JOB_ID,\n    JOB_NAME,\n    ERROR_MESSAGE,\n    ERROR_CODE,\n    CATEGORY\n) VALUES (\n    @{pipeline().parameters.process_id},\n    @{pipeline().parameters.phase_id},\n    CURRENT_TIMESTAMP,\n    '@{pipeline().parameters.run_id}',\n    '@{pipeline().parameters.job_id}',\n    '@{pipeline().parameters.job_name}',\n    '@{replace(pipeline().parameters.error_message,'''','''''')}',\n    '@{pipeline().parameters.error_code}',\n    '@{pipeline().parameters.category}'\n);",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "process_id": {
                        "type": "int"
                    },
                    "job_name": {
                        "type": "string"
                    },
                    "error_message": {
                        "type": "string"
                    },
                    "run_id": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "phase_id": {
                        "type": "int"
                    },
                    "error_code": {
                        "type": "string"
                    },
                    "job_id": {
                        "type": "int"
                    }
                },
                "variables": {
                    "subscriptionid": {
                        "type": "String"
                    },
                    "test_variable": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Logging"
                },
                "annotations": [],
                "lastPublishTime": "2023-11-27T15:02:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AdlsFileDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().fileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AmazonRedshiftTable1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsarsadpprd001",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Historical_Data_migration_redshift_snowflake"
                },
                "annotations": [],
                "type": "AmazonRedshiftTable",
                "schema": [],
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsarsadpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BinaryDestination')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/BinarySource')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    },
                    "sourceFile": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().sourceFile",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DNA_CORE_Dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lssnfkpltdnacore",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/DBT"
                },
                "annotations": [],
                "type": "SnowflakeTable",
                "schema": [],
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DbtAPIResponse')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "tempContainer": {
                        "type": "string"
                    },
                    "tempDirectory": {
                        "type": "string"
                    },
                    "tempFileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/DBT"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().tempFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().tempDirectory",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().tempContainer",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DbtRestAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdbtclouddnacore",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "url": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/DBT"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().url",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdbtclouddnacore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3FileDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsas3adpprd001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "s3Bucket": {
                        "type": "string"
                    },
                    "s3Directory": {
                        "type": "string"
                    },
                    "s3fileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AmazonS3Location",
                        "bucketName": {
                            "value": "@dataset().s3Bucket",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().s3Directory",
                            "type": "Expression"
                        },
                        "fileName": {
                            "value": "@dataset().s3fileName",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3FileDatasetExcel')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsas3adpprd001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "s3Bucket": {
                        "type": "string"
                    },
                    "s3Directory": {
                        "type": "string"
                    },
                    "s3FileName": {
                        "type": "string"
                    },
                    "s3FileSheet": {
                        "type": "int"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "location": {
                        "type": "AmazonS3Location",
                        "bucketName": {
                            "value": "@dataset().s3Bucket",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().s3Directory",
                            "type": "Expression"
                        },
                        "fileName": {
                            "value": "@dataset().s3FileName",
                            "type": "Expression"
                        }
                    },
                    "sheetIndex": {
                        "value": "@dataset().s3FileSheet",
                        "type": "Expression"
                    },
                    "range": ""
                },
                "schema": [
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    },
                    {
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3FileDatasetExcelSheetName')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsas3adpprd001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "s3Bucket": {
                        "type": "string"
                    },
                    "s3Directory": {
                        "type": "string"
                    },
                    "s3FileName": {
                        "type": "string"
                    },
                    "s3FileSheetName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@dataset().s3FileSheetName",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "AmazonS3Location",
                        "bucketName": {
                            "value": "@dataset().s3Bucket",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().s3Directory",
                            "type": "Expression"
                        },
                        "fileName": {
                            "value": "@dataset().s3FileName",
                            "type": "Expression"
                        }
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3FolderDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsas3adpprd001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "s3bucket": {
                        "type": "string"
                    },
                    "s3directory": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AmazonS3Location",
                        "bucketName": {
                            "value": "@dataset().s3bucket",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().s3directory",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sink_csv')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Cdata"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "dev/cdata/",
                        "fileSystem": "asp"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TableauJsonResponse')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "tempContainer": {
                        "type": "string"
                    },
                    "tempDirectory": {
                        "type": "string"
                    },
                    "tempFileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Tableau"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().tempFileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().tempDirectory",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().tempContainer",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TableauRestAPI')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lspltbitabap",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "relativeURL": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Tableau"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().relativeURL",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lspltbitabap')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adls_sink_binary')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "adls_container": {
                        "type": "string"
                    },
                    "adls_path": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@dataset().adls_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().adls_container",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adls_src')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "src_path": {
                        "type": "string"
                    },
                    "src_container": {
                        "type": "string"
                    },
                    "src_filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().src_filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().src_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().src_container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adls_srcexcel')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "src_path": {
                        "type": "string"
                    },
                    "src_filename": {
                        "type": "string"
                    },
                    "src_sheetindex": {
                        "type": "int"
                    },
                    "src_container": {
                        "type": "string"
                    },
                    "src_startRange": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().src_filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().src_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().src_container",
                            "type": "Expression"
                        }
                    },
                    "sheetIndex": {
                        "value": "@dataset().src_sheetindex",
                        "type": "Expression"
                    },
                    "range": {
                        "value": "@dataset().src_startRange",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": false
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adls_srcexcel_sheetname')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "src_path": {
                        "type": "string"
                    },
                    "src_filename": {
                        "type": "string"
                    },
                    "src_sheetname": {
                        "type": "string",
                        "defaultValue": "Sheet1"
                    },
                    "src_container": {
                        "type": "string"
                    },
                    "src_startRange": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": {
                        "value": "@dataset().src_sheetname",
                        "type": "Expression"
                    },
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().src_filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().src_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().src_container",
                            "type": "Expression"
                        }
                    },
                    "range": {
                        "value": "@dataset().src_startRange",
                        "type": "Expression"
                    },
                    "firstRowAsHeader": false
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/csv')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "target_path": {
                        "type": "string"
                    },
                    "target_filename": {
                        "type": "string"
                    },
                    "target_container": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().target_filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().target_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().target_container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "\u0001",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": ""
                },
                "schema": [
                    {
                        "name": "Region",
                        "type": "String"
                    },
                    {
                        "name": "Country",
                        "type": "String"
                    },
                    {
                        "name": "NoOfPlants",
                        "type": "String"
                    },
                    {
                        "name": "Testcolumn",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/executejob')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbsbx001lsazrweksgpw0003",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Cdata"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "executeJob/"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbsbx001lsazrweksgpw0003')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/get_status')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Cdata"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "dev/cdata",
                        "fileSystem": "asp"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "RunStartDate",
                        "type": "String"
                    },
                    {
                        "name": "Query",
                        "type": "String"
                    },
                    {
                        "name": "JobName",
                        "type": "String"
                    },
                    {
                        "name": "Status",
                        "type": "String"
                    },
                    {
                        "name": "Detail",
                        "type": "String"
                    },
                    {
                        "name": "Result",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/log_json')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    },
                    "file_path": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "ADF_Framework_Datasets/Cdata"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().file_path",
                            "type": "Expression"
                        },
                        "fileSystem": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/mtd_process')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lssnfkpltdnaload",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ADF_Framework_Datasets"
                },
                "annotations": [],
                "type": "SnowflakeTable",
                "schema": [],
                "typeProperties": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lssnfkpltdnaload')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/s3_source_binary')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsas3adpprd001",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "bucket": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AmazonS3Location",
                        "bucketName": {
                            "value": "@dataset().bucket",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().path",
                            "type": "Expression"
                        },
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsas3adpprd001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/sqlDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "adfadbplt001lsdlsadbplt001",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Miscellaneous Pipelines"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "test.sql",
                        "folderPath": "dev/test",
                        "fileSystem": "asp"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsdlsadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsakvadbplt001')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE Key Vault",
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('adfadbplt001lsakvadbplt001_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsarsadpprd001')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to JnJ APAC DNA PLATFORM AWS Redshift in Production environment",
                "annotations": [],
                "type": "AmazonRedshift",
                "typeProperties": {
                    "server": "[parameters('adfadbplt001lsarsadpprd001_properties_typeProperties_server')]",
                    "database": "[parameters('adfadbplt001lsarsadpprd001_properties_typeProperties_database')]",
                    "port": 5439,
                    "username": "[parameters('adfadbplt001lsarsadpprd001_properties_typeProperties_username')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "adfadbplt001lsakvadbplt001",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "adfadbplt001lsarsadpprd001"
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsas3adpprd001')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to JnJ APAC DNA PLATFORM AWS S3 in Production environment",
                "annotations": [],
                "type": "AmazonS3",
                "typeProperties": {
                    "serviceUrl": "https://s3.amazonaws.com",
                    "accessKeyId": "[parameters('adfadbplt001lsas3adpprd001_properties_typeProperties_accessKeyId')]",
                    "secretAccessKey": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "adfadbplt001lsakvadbplt001",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "adfadbplt001lsas3adpprd001-SecretAccessKey"
                    },
                    "authenticationType": "AccessKey"
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsawswdvsgpw0006')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC MDS Production",
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "adfadbplt001lsakvadbplt001",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('adfadbplt001lsawswdvsgpw0006_properties_typeProperties_connectionString_secretName')]"
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsdbtclouddnacore')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE dbt cloud REST API",
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('adfadbplt001lsdbtclouddnacore_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous",
                    "authHeaders": {
                        "Authorization": {
                            "type": "AzureKeyVaultSecret",
                            "store": {
                                "referenceName": "adfadbplt001lsakvadbplt001",
                                "type": "LinkedServiceReference"
                            },
                            "secretName": "adfadbplt001lsdbtclouddnacore"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt001",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt001')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lsdlsadbplt001')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE ADLS Container for Landing zone",
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('adfadbplt001lsdlsadbplt001_properties_typeProperties_url')]"
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lspltbitabap')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Tableau Rest API",
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('adfadbplt001lspltbitabap_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lssnfkpltdnacore')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE Snowflake L1 and L2",
                "annotations": [],
                "type": "Snowflake",
                "typeProperties": {
                    "authenticationType": "Basic",
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "adfadbplt001lsakvadbplt001",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('adfadbplt001lssnfkpltdnacore_properties_typeProperties_connectionString_secretName')]"
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt001",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt001')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbplt001lssnfkpltdnaload')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE Snowflake L0",
                "annotations": [],
                "type": "Snowflake",
                "typeProperties": {
                    "authenticationType": "Basic",
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "adfadbplt001lsakvadbplt001",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('adfadbplt001lssnfkpltdnaload_properties_typeProperties_connectionString_secretName')]"
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt001",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt001')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfadbsbx001lsazrweksgpw0003')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Linked Service to Kenvue APAC DNA BASE CData Sync Rest API",
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('adfadbsbx001lsazrweksgpw0003_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous",
                    "authHeaders": {
                        "x-cdata-authtoken": {
                            "type": "AzureKeyVaultSecret",
                            "store": {
                                "referenceName": "adfadbplt001lsakvadbplt001",
                                "type": "LinkedServiceReference"
                            },
                            "secretName": "[parameters('adfadbsbx001lsazrweksgpw0003_properties_typeProperties_authHeaders_x-cdata-authtoken_secretName')]"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "adfiradbplt002",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/adfiradbplt002')]",
                "[concat(variables('factoryId'), '/linkedServices/adfadbplt001lsakvadbplt001')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Customer360_Tab_Refresh_Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Refresh Customer360 tableau datasources",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('Customer360_Tab_Refresh_Trigger_properties_master_parameters_category')]",
                            "force_rerun": "[parameters('Customer360_Tab_Refresh_Trigger_properties_master_parameters_force_rerun')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-14T15:55:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                13
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GCH_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('GCH_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                2
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Historical_Trigger_Customer360')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PIPE_hist_data_migration_redshift_snowflake_master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Environment": "[parameters('Historical_Trigger_Customer360_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_Environment')]",
                            "process_id": "[parameters('Historical_Trigger_Customer360_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_process_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                12
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PIPE_hist_data_migration_redshift_snowflake_master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Historical_Trigger_PerfectStore')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "For historical load - Regional",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "PIPE_hist_data_migration_redshift_snowflake_master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Environment": "[parameters('Historical_Trigger_PerfectStore_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_Environment')]",
                            "process_id": "[parameters('Historical_Trigger_PerfectStore_properties_PIPE_hist_data_migration_redshift_snowflake_master_parameters_process_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-14T13:55:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                9,
                                11
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/PIPE_hist_data_migration_redshift_snowflake_master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/J_RG_SELL_IN_COPA_TAB_REFRESH_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('J_RG_SELL_IN_COPA_TAB_REFRESH_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                5
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MALAYSIA_POS_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MALAYSIA_POS_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                16,
                                17,
                                18,
                                19,
                                20
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MALAYSIA_WATSONS_INV_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MALAYSIA_WATSONS_INV_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                17,
                                18,
                                21
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_JOINT_MONTHLY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_JOINT_MONTHLY_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-03-01T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_MDS_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_MDS_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                16,
                                17,
                                18,
                                19,
                                20
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_POS_SIPOS_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_POS_SIPOS_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                7
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_SELLIN_ANALYSIS_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_SELLIN_ANALYSIS_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                7
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_SELLIN_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_SELLIN_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                16,
                                17,
                                18,
                                19,
                                20
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_SELLOUT_SISO_evening_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_SELLOUT_SISO_evening_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                7
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_SELLOUT_SISO_morning_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_SELLOUT_SISO_morning_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                11
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/MY_SELLOUT_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('MY_SELLOUT_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                16,
                                17,
                                18,
                                19,
                                20
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/POP6_refresh_Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Refresh Pop6 tableau datasources",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('POP6_refresh_Trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:36:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                10,
                                12
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_MY_JOINT_MONTHLY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_MY_JOINT_MONTHLY_trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-29T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                20
                            ],
                            "hours": [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_MY_SELLIN_SELLOUT_POS_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_MY_SELLIN_SELLOUT_POS_trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                50
                            ],
                            "hours": [
                                15,
                                16,
                                17,
                                18,
                                19
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_MY_WATSONS_INV_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_MY_WATSONS_INV_trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                50
                            ],
                            "hours": [
                                16,
                                17,
                                20
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_Regional_Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_Regional_Trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:34:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                55
                            ],
                            "hours": [
                                6
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_SGP_Scan_Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_SGP_Scan_Trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:36:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                20
                            ],
                            "hours": [
                                3
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_SGP_Sellout_Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_SGP_Sellout_Trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:37:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                50
                            ],
                            "hours": [
                                8,
                                11,
                                17,
                                14
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/S3_To_ADLS_my_sellout_sales_inv_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "s3_to_adls",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "Group_id": "[parameters('S3_To_ADLS_my_sellout_sales_inv_trigger_properties_s3_to_adls_parameters_Group_id')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                50
                            ],
                            "hours": [
                                23,
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/s3_to_adls')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_BILLING_COND_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_BILLING_COND_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-18T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                21
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_BILLING_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_BILLING_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-18T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                1,
                                9
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_COPA10_SUN_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_COPA10_SUN_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                6
                            ],
                            "weekDays": [
                                "Sunday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_COPA10_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_COPA10_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                3
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_DELIVERY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_DELIVERY_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                1,
                                9
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_INVENTORY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_INVENTORY_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                8
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_INVOICE_SUN_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_INVOICE_SUN_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                6
                            ],
                            "weekDays": [
                                "Sunday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_INVOICE_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_INVOICE_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                2
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_LISTPRICE_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_LISTPRICE_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-18T23:56:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                0
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_MASTER_AND_ACCT_ATTR_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_MASTER_AND_ACCT_ATTR_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-18T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                15
                            ],
                            "hours": [
                                1
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_MATERIAL_UOM_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_MATERIAL_UOM_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_BW_SALES_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_BW_SALES_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                1,
                                9
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_ECC_MASTER_SUN_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_ECC_MASTER_SUN_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "India Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                16
                            ],
                            "weekDays": [
                                "Sunday"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SAP_ECC_MASTER_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('SAP_ECC_MASTER_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T23:55:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                0
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_J_RG_SELL_IN_COPA_TAB_REFRESH_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_J_RG_SELL_IN_COPA_TAB_REFRESH_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-26T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                3,
                                7,
                                11,
                                15,
                                19,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_BILLING_COND_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_BILLING_COND_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_BILLING_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_BILLING_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_COPA10_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_COPA10_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_DELIVERY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_DELIVERY_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_INVENTORY_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_INVENTORY_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_INVOICE_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_INVOICE_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_LISTPRICE_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_LISTPRICE_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_MASTER_AND_ACCT_ATTR_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_MASTER_AND_ACCT_ATTR_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_MATERIAL_UOM_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_MATERIAL_UOM_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_BW_SALES_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_BW_SALES_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_SAP_ECC_MASTER_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_SAP_ECC_MASTER_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_pka_tableau_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_pka_tableau_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-26T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                3,
                                7,
                                11,
                                15,
                                19,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UAT_rg_mds_to_dna_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('UAT_rg_mds_to_dna_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-22T16:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                2,
                                6,
                                10,
                                14,
                                18,
                                22
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/my_gt_sales_dna_to_mds_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('my_gt_sales_dna_to_mds_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                0
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/my_sellout_inv_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('my_sellout_inv_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/my_sellout_sales_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('my_sellout_sales_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-28T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "hours": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pka_tableau_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('pka_tableau_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-19T00:00:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                9
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/rg_mds_to_dna_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('rg_mds_to_dna_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:44:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                21
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/rg_travel_retail_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('rg_travel_retail_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:42:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                7
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/sg_scan_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('sg_scan_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:43:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                3
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/sg_sellout_refresh_trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "master",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "category": "[parameters('sg_sellout_refresh_trigger_properties_master_parameters_category')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-15T13:47:00",
                        "timeZone": "Singapore Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                9,
                                12,
                                15,
                                18
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/master')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 0
                        }
                    }
                },
                "managedVirtualNetwork": {
                    "type": "ManagedVirtualNetworkReference",
                    "referenceName": "default"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfiradbplt001')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "Southeast Asia",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false,
                            "customProperties": []
                        },
                        "copyComputeScaleProperties": {
                            "dataIntegrationUnit": 64,
                            "timeToLive": 30
                        },
                        "pipelineExternalComputeScaleProperties": {
                            "timeToLive": 60,
                            "numberOfPipelineNodes": 2,
                            "numberOfExternalNodes": 2
                        }
                    }
                },
                "managedVirtualNetwork": {
                    "type": "ManagedVirtualNetworkReference",
                    "referenceName": "default"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/adfiradbplt002')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "typeProperties": {
                    "linkedInfo": {
                        "resourceId": "[parameters('adfiradbplt002_properties_typeProperties_linkedInfo_resourceId')]",
                        "authorizationType": "Rbac"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/default')]",
            "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
            "apiVersion": "2018-06-01",
            "properties": {},
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/default/adfadbplt001mpepdlsadbplt001')]",
            "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
            "apiVersion": "2018-06-01",
            "properties": {
                "privateLinkResourceId": "[parameters('adfadbplt001mpepdlsadbplt001_properties_privateLinkResourceId')]",
                "groupId": "[parameters('adfadbplt001mpepdlsadbplt001_properties_groupId')]",
                "fqdns": "[parameters('adfadbplt001mpepdlsadbplt001_properties_fqdns')]"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/default/adfadbplt001mpepdlsadbplt002')]",
            "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
            "apiVersion": "2018-06-01",
            "properties": {
                "privateLinkResourceId": "[parameters('adfadbplt001mpepdlsadbplt002_properties_privateLinkResourceId')]",
                "groupId": "[parameters('adfadbplt001mpepdlsadbplt002_properties_groupId')]",
                "fqdns": "[parameters('adfadbplt001mpepdlsadbplt002_properties_fqdns')]"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/default')]",
            "type": "Microsoft.DataFactory/factories/globalparameters",
            "apiVersion": "2018-06-01",
            "properties": {
                "environment": {
                    "type": "string",
                    "value": "[parameters('default_properties_environment_value')]"
                }
            },
            "dependsOn": []
        }
    ]
}